# generated by datamodel-codegen:
#   filename:  responses.json
#   timestamp: 2021-11-13T13:56:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, confloat, conint, constr


class Responses(BaseModel):
    __root__: Any = Field(..., title='responses')


class Response(BaseModel):
    class Config:
        extra = Extra.forbid

    token: str = Field(..., description='New token')
    secret: Optional[str] = Field(None, description='New secret')


class AccountChangePasswordResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response


class LinkType(Enum):
    profile = 'profile'
    group = 'group'
    app = 'app'


class AccountOffer(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(None, description='Offer description')
    id: Optional[int] = Field(None, description='Offer ID')
    img: Optional[AnyUrl] = Field(None, description='URL of the preview image')
    instruction: Optional[str] = Field(
        None, description='Instruction how to process the offer'
    )
    instruction_html: Optional[str] = Field(
        None, description='Instruction how to process the offer (HTML format)'
    )
    price: Optional[int] = Field(None, description='Offer price')
    short_description: Optional[str] = Field(
        None, description='Offer short description'
    )
    tag: Optional[str] = Field(None, description='Offer tag')
    title: Optional[str] = Field(None, description='Offer title')
    currency_amount: Optional[float] = Field(None, description='Currency amount')
    link_id: Optional[int] = Field(None, description='Link id')
    link_type: Optional[LinkType] = Field(None, description='Link type')


class AccountAccountCounters(BaseModel):
    class Config:
        extra = Extra.forbid

    app_requests: Optional[conint(ge=1)] = Field(
        None, description='New app requests number'
    )
    events: Optional[conint(ge=1)] = Field(None, description='New events number')
    faves: Optional[conint(ge=1)] = Field(None, description='New faves number')
    friends: Optional[conint(ge=1)] = Field(
        None, description='New friends requests number'
    )
    friends_suggestions: Optional[conint(ge=1)] = Field(
        None, description='New friends suggestions number'
    )
    friends_recommendations: Optional[conint(ge=1)] = Field(
        None, description='New friends recommendations number'
    )
    gifts: Optional[conint(ge=1)] = Field(None, description='New gifts number')
    groups: Optional[conint(ge=1)] = Field(None, description='New groups number')
    menu_discover_badge: Optional[int] = None
    menu_clips_badge: Optional[int] = None
    messages: Optional[conint(ge=1)] = Field(None, description='New messages number')
    memories: Optional[conint(ge=1)] = Field(None, description='New memories number')
    notes: Optional[conint(ge=1)] = Field(None, description='New notes number')
    notifications: Optional[conint(ge=1)] = Field(
        None, description='New notifications number'
    )
    photos: Optional[conint(ge=1)] = Field(None, description='New photo tags number')
    sdk: Optional[conint(ge=1)] = Field(None, description='New sdk number')


class BaseBoolInt(Enum):
    integer_0 = 0
    integer_1 = 1


class AccountNameRequestStatus(Enum):
    success = 'success'
    processing = 'processing'
    declined = 'declined'
    was_accepted = 'was_accepted'
    was_declined = 'was_declined'
    declined_with_link = 'declined_with_link'
    response = 'response'
    response_with_link = 'response_with_link'


class AccountPushConversationsItem(BaseModel):
    class Config:
        extra = Extra.forbid

    disabled_until: int = Field(
        ..., description='Time until that notifications are disabled in seconds'
    )
    peer_id: int = Field(..., description='Peer ID')
    sound: BaseBoolInt = Field(
        ..., description='Information whether the sound are enabled'
    )
    disabled_mentions: Optional[BaseBoolInt] = Field(
        None, description='Information whether the mentions are disabled'
    )
    disabled_mass_mentions: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether the mass mentions (like '@all', '@online') are disabled. Can be affected by 'disabled_mentions'",
    )


class AccountPushParamsMode(Enum):
    on = 'on'
    off = 'off'
    no_sound = 'no_sound'
    no_text = 'no_text'


class AccountPushParamsOnoff(Enum):
    on = 'on'
    off = 'off'


class AccountPushParamsSettings(Enum):
    on = 'on'
    off = 'off'
    fr_of_fr = 'fr_of_fr'


class AccountSubscriptions(BaseModel):
    __root__: List[int]


class UsersUserMin(BaseModel):
    class Config:
        extra = Extra.forbid

    deactivated: Optional[str] = Field(
        None, description='Returns if a profile is deleted or blocked'
    )
    first_name: str = Field(..., description='User first name')
    hidden: Optional[int] = Field(None, description='Returns if a profile is hidden.')
    id: int = Field(..., description='User ID')
    last_name: str = Field(..., description='User last name')
    can_access_closed: Optional[bool] = None
    is_closed: Optional[bool] = None


class AccountUserSettingsInterest(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str
    value: str


class AccountUserSettingsInterests(BaseModel):
    class Config:
        extra = Extra.forbid

    activities: Optional[AccountUserSettingsInterest] = None
    interests: Optional[AccountUserSettingsInterest] = None
    music: Optional[AccountUserSettingsInterest] = None
    tv: Optional[AccountUserSettingsInterest] = None
    movies: Optional[AccountUserSettingsInterest] = None
    books: Optional[AccountUserSettingsInterest] = None
    games: Optional[AccountUserSettingsInterest] = None
    quotes: Optional[AccountUserSettingsInterest] = None
    about: Optional[AccountUserSettingsInterest] = None


class AddressesFields(Enum):
    id = 'id'
    title = 'title'
    address = 'address'
    additional_address = 'additional_address'
    country_id = 'country_id'
    city_id = 'city_id'
    metro_station_id = 'metro_station_id'
    latitude = 'latitude'
    longitude = 'longitude'
    distance = 'distance'
    work_info_status = 'work_info_status'
    timetable = 'timetable'
    phone = 'phone'
    time_offset = 'time_offset'


class AdsAccessRole(Enum):
    admin = 'admin'
    manager = 'manager'
    reports = 'reports'


class AdsAccessRolePublic(Enum):
    manager = 'manager'
    reports = 'reports'


class AdsAccesses(BaseModel):
    class Config:
        extra = Extra.forbid

    client_id: Optional[str] = Field(None, description='Client ID')
    role: Optional[AdsAccessRole] = None


class AdsAccountType(Enum):
    general = 'general'
    agency = 'agency'


class AdsAdApproved(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class AdsAdCostType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class AdsAdLayout(BaseModel):
    class Config:
        extra = Extra.forbid

    ad_format: int = Field(..., description='Ad format')
    campaign_id: int = Field(..., description='Campaign ID')
    cost_type: AdsAdCostType
    description: str = Field(..., description='Ad description')
    id: str = Field(..., description='Ad ID')
    image_src: AnyUrl = Field(..., description='Image URL')
    image_src_2x: Optional[AnyUrl] = Field(
        None, description='URL of the preview image in double size'
    )
    link_domain: Optional[str] = Field(None, description='Domain of advertised object')
    link_url: AnyUrl = Field(..., description='URL of advertised object')
    preview_link: Optional[str] = Field(
        None, description='link to preview an ad as it is shown on the website'
    )
    title: str = Field(..., description='Ad title')
    video: Optional[BaseBoolInt] = Field(
        None, description='Information whether the ad is a video'
    )


class AdsAdStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class AdsCampaignStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class AdsCampaignType(Enum):
    normal = 'normal'
    vk_apps_managed = 'vk_apps_managed'
    mobile_apps = 'mobile_apps'
    promoted_posts = 'promoted_posts'
    adaptive_ads = 'adaptive_ads'
    stories = 'stories'


class BaseObjectWithName(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Object ID')
    name: str = Field(..., description='Object name')


class AdsClient(BaseModel):
    class Config:
        extra = Extra.forbid

    all_limit: str = Field(..., description="Client's total limit, rubles")
    day_limit: str = Field(..., description="Client's day limit, rubles")
    id: int = Field(..., description='Client ID')
    name: str = Field(..., description='Client name')


class AdsCriteriaSex(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class AdsStatsAge(BaseModel):
    class Config:
        extra = Extra.forbid

    clicks_rate: Optional[float] = Field(None, description='Clicks rate')
    impressions_rate: Optional[float] = Field(None, description='Impressions rate')
    value: Optional[str] = Field(None, description='Age interval')


class AdsFloodStats(BaseModel):
    class Config:
        extra = Extra.forbid

    left: int = Field(..., description='Requests left')
    refresh: int = Field(..., description='Time to refresh in seconds')


class AdsLinkStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str = Field(..., description='Reject reason')
    redirect_url: AnyUrl = Field(..., description='URL')
    status: str = Field(..., description='Link status')


class Status(Enum):
    search_in_progress = 'search_in_progress'
    search_failed = 'search_failed'
    search_done = 'search_done'
    save_in_progress = 'save_in_progress'
    save_failed = 'save_failed'
    save_done = 'save_done'


class SourceType(Enum):
    retargeting_group = 'retargeting_group'


class AdsLookalikeRequestSaveAudienceLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    level: Optional[conint(ge=1)] = Field(
        None,
        description='Save audience level id, which is used in save audience queries',
    )
    audience_count: Optional[conint(ge=0)] = Field(
        None, description='Saved audience audience size for according level'
    )


class AdsMusician(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Targeting music artist ID')
    name: str = Field(..., description='Music artist name')
    avatar: Optional[str] = Field(None, description='Music artist photo')


class AdsObjectType(Enum):
    ad = 'ad'
    campaign = 'campaign'
    client = 'client'
    office = 'office'


class AdsParagraphs(BaseModel):
    class Config:
        extra = Extra.forbid

    paragraph: Optional[str] = Field(None, description='Rules paragraph')


class AdsPromotedPostReach(BaseModel):
    class Config:
        extra = Extra.forbid

    hide: int = Field(..., description='Hides amount')
    id: int = Field(..., description="Object ID from 'ids' parameter")
    join_group: int = Field(..., description='Community joins')
    links: int = Field(..., description='Link clicks')
    reach_subscribers: int = Field(..., description='Subscribers reach')
    reach_total: int = Field(..., description='Total reach')
    report: int = Field(..., description='Reports amount')
    to_group: int = Field(..., description='Community clicks')
    unsubscribe: int = Field(..., description="'Unsubscribe' events amount")
    video_views_100p: Optional[int] = Field(
        None, description='Video views for 100 percent'
    )
    video_views_25p: Optional[int] = Field(
        None, description='Video views for 25 percent'
    )
    video_views_3s: Optional[int] = Field(None, description='Video views for 3 seconds')
    video_views_50p: Optional[int] = Field(
        None, description='Video views for 50 percent'
    )
    video_views_75p: Optional[int] = Field(
        None, description='Video views for 75 percent'
    )
    video_views_start: Optional[int] = Field(None, description='Video starts')


class AdsRules(BaseModel):
    class Config:
        extra = Extra.forbid

    paragraphs: Optional[List[AdsParagraphs]] = None
    title: Optional[str] = Field(None, description='Comment')


class AdsStatsFormat(BaseModel):
    class Config:
        extra = Extra.forbid

    clicks: Optional[int] = Field(None, description='Clicks number')
    link_external_clicks: Optional[int] = Field(
        None, description='External clicks number'
    )
    day: Optional[str] = Field(None, description='Day as YYYY-MM-DD')
    impressions: Optional[int] = Field(None, description='Impressions number')
    join_rate: Optional[int] = Field(None, description='Events number')
    month: Optional[str] = Field(None, description='Month as YYYY-MM')
    overall: Optional[int] = Field(None, description='1 if period=overall')
    reach: Optional[int] = Field(None, description='Reach ')
    spent: Optional[int] = Field(None, description='Spent funds')
    video_clicks_site: Optional[int] = Field(
        None, description='Clickthoughs to the advertised site'
    )
    video_views: Optional[int] = Field(None, description='Video views number')
    video_views_full: Optional[int] = Field(
        None, description='Video views (full video)'
    )
    video_views_half: Optional[int] = Field(
        None, description='Video views (half of video)'
    )


class AdsStatsCities(BaseModel):
    class Config:
        extra = Extra.forbid

    clicks_rate: Optional[float] = Field(None, description='Clicks rate')
    impressions_rate: Optional[float] = Field(None, description='Impressions rate')
    name: Optional[str] = Field(None, description='City name')
    value: Optional[int] = Field(None, description='City ID')


class AdsStatsSexValue(Enum):
    f = 'f'
    m = 'm'


class AdsStatsSexAge(BaseModel):
    class Config:
        extra = Extra.forbid

    clicks_rate: Optional[float] = Field(None, description='Clicks rate')
    impressions_rate: Optional[float] = Field(None, description='Impressions rate')
    value: Optional[str] = Field(None, description='Sex and age interval')


class AdsStatsViewsTimes(BaseModel):
    class Config:
        extra = Extra.forbid

    views_ads_times_1: Optional[int] = None
    views_ads_times_2: Optional[int] = None
    views_ads_times_3: Optional[int] = None
    views_ads_times_4: Optional[int] = None
    views_ads_times_5: Optional[str] = None
    views_ads_times_6: Optional[int] = None
    views_ads_times_7: Optional[int] = None
    views_ads_times_8: Optional[int] = None
    views_ads_times_9: Optional[int] = None
    views_ads_times_10: Optional[int] = None
    views_ads_times_11_plus: Optional[int] = None


class AdsTargStats(BaseModel):
    class Config:
        extra = Extra.forbid

    audience_count: int = Field(..., description='Audience')
    recommended_cpc: Optional[float] = Field(
        None, description='Recommended CPC value for 50% reach (old format)'
    )
    recommended_cpm: Optional[float] = Field(
        None, description='Recommended CPM value for 50% reach (old format)'
    )
    recommended_cpc_50: Optional[float] = Field(
        None, description='Recommended CPC value for 50% reach'
    )
    recommended_cpm_50: Optional[float] = Field(
        None, description='Recommended CPM value for 50% reach'
    )
    recommended_cpc_70: Optional[float] = Field(
        None, description='Recommended CPC value for 70% reach'
    )
    recommended_cpm_70: Optional[float] = Field(
        None, description='Recommended CPM value for 70% reach'
    )
    recommended_cpc_90: Optional[float] = Field(
        None, description='Recommended CPC value for 90% reach'
    )
    recommended_cpm_90: Optional[float] = Field(
        None, description='Recommended CPM value for 90% reach'
    )


class AdsTargSuggestions(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Object ID')
    name: Optional[str] = Field(None, description='Object name')


class AdsTargSuggestionsCities(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Object ID')
    name: Optional[str] = Field(None, description='Object name')
    parent: Optional[str] = Field(None, description='Parent object')


class AdsTargSuggestionsRegions(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Object ID')
    name: Optional[str] = Field(None, description='Object name')
    type: Optional[str] = Field(None, description='Object type')


class AdsTargSuggestionsSchoolsType(Enum):
    school = 'school'
    university = 'university'
    faculty = 'faculty'
    chair = 'chair'


class AdsTargetGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    audience_count: Optional[int] = Field(None, description='Audience')
    domain: Optional[str] = Field(None, description='Site domain')
    id: Optional[int] = Field(None, description='Group ID')
    lifetime: Optional[int] = Field(
        None, description='Number of days for user to be in group'
    )
    name: Optional[str] = Field(None, description='Group name')
    pixel: Optional[str] = Field(None, description='Pixel code')


class BaseRequestParam(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = Field(None, description='Parameter name')
    value: Optional[str] = Field(None, description='Parameter value')


class AdsUserSpecification(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    role: AdsAccessRolePublic
    grant_access_to_all_clients: Optional[bool] = False
    client_ids: Optional[List[conint(ge=0)]] = None
    view_budget: Optional[bool] = None


class AdsUserSpecificationCutted(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    role: AdsAccessRolePublic
    client_id: Optional[conint(ge=0)] = None
    view_budget: Optional[bool] = None


class AdsUsers(BaseModel):
    class Config:
        extra = Extra.forbid

    accesses: List[AdsAccesses]
    user_id: int = Field(..., description='User ID')


class AdswebGetAdCategoriesResponseCategoriesCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    name: str


class AdswebGetAdUnitsResponseAdUnitsAdUnit(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    site_id: int
    name: Optional[str] = None


class AdswebGetFraudHistoryResponseEntriesEntry(BaseModel):
    class Config:
        extra = Extra.forbid

    site_id: int
    day: str


class AdswebGetSitesResponseSitesSite(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    status_user: Optional[str] = None
    status_moder: Optional[str] = None
    domains: Optional[str] = None


class AdswebGetStatisticsResponseItemsItem(BaseModel):
    class Config:
        extra = Extra.forbid

    site_id: Optional[int] = None
    ad_unit_id: Optional[int] = None
    overall_count: Optional[int] = None
    months_count: Optional[int] = None
    month_min: Optional[str] = None
    month_max: Optional[str] = None
    days_count: Optional[int] = None
    day_min: Optional[str] = None
    day_max: Optional[str] = None
    hours_count: Optional[int] = None
    hour_min: Optional[str] = None
    hour_max: Optional[str] = None


class BaseImage(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    height: conint(ge=0) = Field(..., description='Image height')
    url: AnyUrl = Field(..., description='Image url')
    width: conint(ge=0) = Field(..., description='Image width')


class AppsAppType(Enum):
    app = 'app'
    game = 'game'
    site = 'site'
    standalone = 'standalone'
    vk_app = 'vk_app'
    community_app = 'community_app'
    html5_game = 'html5_game'
    mini_app = 'mini_app'


class AppsAppLeaderboardType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class AppsLeaderboard(BaseModel):
    class Config:
        extra = Extra.forbid

    level: Optional[int] = Field(None, description='Level')
    points: Optional[int] = Field(None, description='Points number')
    score: Optional[int] = Field(None, description='Score number')
    user_id: int = Field(..., description='User ID')


class Name(Enum):
    friends = 'friends'
    photos = 'photos'
    video = 'video'
    pages = 'pages'
    status = 'status'
    notes = 'notes'
    wall = 'wall'
    docs = 'docs'
    groups = 'groups'
    stats = 'stats'
    market = 'market'


class AppsScope(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Name = Field(..., description='Scope name')
    title: Optional[str] = Field(None, description='Scope title')


class AudioAudio(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the audio')
    artist: str = Field(..., description='Artist name')
    id: conint(ge=0) = Field(..., description='Audio ID')
    owner_id: int = Field(..., description="Audio owner's ID")
    title: str = Field(..., description='Title')
    url: Optional[AnyUrl] = Field(None, description='URL of mp3 file')
    duration: conint(ge=0) = Field(..., description='Duration in seconds')
    date: Optional[conint(ge=0)] = Field(None, description='Date when uploaded')
    album_id: Optional[conint(ge=0)] = Field(None, description='Album ID')
    genre_id: Optional[conint(ge=0)] = Field(None, description='Genre ID')
    performer: Optional[str] = Field(None, description='Performer name')


class BaseCity(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='City ID')
    title: str = Field(..., description='City title')


class WallWallpostCommentsDonutPlaceholder(BaseModel):
    class Config:
        extra = Extra.forbid

    text: str


class BaseCountry(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Country ID')
    title: str = Field(..., description='Country title')


class PhotosImageType(Enum):
    s = 's'
    m = 'm'
    x = 'x'
    l = 'l'
    o = 'o'
    p = 'p'
    q = 'q'
    r = 'r'
    y = 'y'
    z = 'z'
    w = 'w'


class BaseCropPhotoCrop(BaseModel):
    class Config:
        extra = Extra.forbid

    x: float = Field(..., description='Coordinate X of the left upper corner')
    y: float = Field(..., description='Coordinate Y of the left upper corner')
    x2: float = Field(..., description='Coordinate X of the right lower corner')
    y2: float = Field(..., description='Coordinate Y of the right lower corner')


class BaseCropPhotoRect(BaseModel):
    class Config:
        extra = Extra.forbid

    x: float = Field(..., description='Coordinate X of the left upper corner')
    y: float = Field(..., description='Coordinate Y of the left upper corner')
    x2: float = Field(..., description='Coordinate X of the right lower corner')
    y2: float = Field(..., description='Coordinate Y of the right lower corner')


class BaseGeoCoordinates(BaseModel):
    class Config:
        extra = Extra.forbid

    latitude: float
    longitude: float


class BaseGradientPoint(BaseModel):
    class Config:
        extra = Extra.forbid

    color: str = Field(..., description='Hex color code without #')
    position: confloat(ge=0.0, le=1.0) = Field(..., description='Point position')


class BaseLikes(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Likes number')
    user_likes: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user likes the photo'
    )


class BaseLikesInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    can_like: BaseBoolInt = Field(
        ..., description='Information whether current user can like the post'
    )
    can_publish: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can repost'
    )
    count: conint(ge=0) = Field(..., description='Likes number')
    user_likes: int = Field(
        ..., description='Information whether current uer has liked the post'
    )


class BaseLinkApplicationStore(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[float] = Field(None, description='Store Id')
    name: Optional[str] = Field(None, description='Store name')


class BaseLinkButtonActionType(Enum):
    open_url = 'open_url'


class BaseLinkButtonStyle(Enum):
    primary = 'primary'
    secondary = 'secondary'


class MarketCurrency(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Currency ID')
    name: str = Field(..., description='Currency sign')
    title: str = Field(..., description='Currency title')


class BaseLinkProductCategory(BaseModel):
    __root__: str


class BaseLinkProductStatus(Enum):
    active = 'active'
    blocked = 'blocked'
    sold = 'sold'
    deleted = 'deleted'
    archived = 'archived'


class BaseLinkRating(BaseModel):
    class Config:
        extra = Extra.forbid

    reviews_count: Optional[int] = Field(None, description='Count of reviews')
    stars: Optional[float] = Field(None, description='Count of stars')


class BaseMessageError(BaseModel):
    class Config:
        extra = Extra.forbid

    code: Optional[int] = Field(None, description='Error code')
    description: Optional[str] = Field(None, description='Error message')


class BaseObject(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Object ID')
    title: str = Field(..., description='Object title')


class BaseObjectCount(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Items count')


class BasePlace(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Optional[str] = Field(None, description='Place address')
    checkins: Optional[int] = Field(None, description='Checkins number')
    city: Optional[str] = Field(None, description='City name')
    country: Optional[str] = Field(None, description='Country name')
    created: Optional[int] = Field(
        None, description='Date of the place creation in Unixtime'
    )
    icon: Optional[AnyUrl] = Field(None, description="URL of the place's icon")
    id: Optional[int] = Field(None, description='Place ID')
    latitude: Optional[float] = Field(None, description='Place latitude')
    longitude: Optional[float] = Field(None, description='Place longitude')
    title: Optional[str] = Field(None, description='Place title')
    type: Optional[str] = Field(None, description='Place type')


class BasePropertyExists(Enum):
    integer_1 = 1


class BaseRepostsInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(
        ..., description='Total reposts counter. Sum of wall and mail reposts counters'
    )
    wall_count: Optional[conint(ge=0)] = Field(None, description='Wall reposts counter')
    mail_count: Optional[conint(ge=0)] = Field(None, description='Mail reposts counter')
    user_reposted: Optional[int] = Field(
        None, description='Information whether current user has reposted the post'
    )


class BaseSex(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class BaseStickerOld(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Sticker ID')
    product_id: Optional[int] = Field(None, description='Pack ID')
    width: Optional[int] = Field(None, description='Width in px')
    height: Optional[int] = Field(None, description='Height in px')
    photo_128: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 128 px in height'
    )
    photo_256: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 256 px in height'
    )
    photo_352: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 352 px in height'
    )
    photo_512: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 512 px in height'
    )
    photo_64: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 64 px in height'
    )
    is_allowed: Optional[bool] = Field(
        None, description='Information whether the sticker is allowed'
    )


class Type(Enum):
    light = 'light'
    dark = 'dark'


class BaseStickerAnimation(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[Type] = Field(None, description='Type of animation script')
    url: Optional[AnyUrl] = Field(None, description='URL of animation script')


class BaseStickerNew(BaseModel):
    class Config:
        extra = Extra.forbid

    sticker_id: Optional[int] = Field(None, description='Sticker ID')
    product_id: Optional[int] = Field(None, description='Pack ID')
    images: Optional[List[BaseImage]] = None
    images_with_background: Optional[List[BaseImage]] = None
    animation_url: Optional[AnyUrl] = Field(
        None, description='URL of sticker animation script'
    )
    animations: Optional[List[BaseStickerAnimation]] = Field(
        None, description='Array of sticker animation script objects'
    )
    is_allowed: Optional[bool] = Field(
        None, description='Information whether the sticker is allowed'
    )


class BaseStickersList(BaseModel):
    __root__: List[BaseStickerNew]


class BaseUploadServer(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_url: AnyUrl = Field(..., description='Upload URL')


class BaseUserGroupFields(Enum):
    about = 'about'
    action_button = 'action_button'
    activities = 'activities'
    activity = 'activity'
    addresses = 'addresses'
    admin_level = 'admin_level'
    age_limits = 'age_limits'
    author_id = 'author_id'
    ban_info = 'ban_info'
    bdate = 'bdate'
    blacklisted = 'blacklisted'
    blacklisted_by_me = 'blacklisted_by_me'
    books = 'books'
    can_create_topic = 'can_create_topic'
    can_message = 'can_message'
    can_post = 'can_post'
    can_see_all_posts = 'can_see_all_posts'
    can_see_audio = 'can_see_audio'
    can_send_friend_request = 'can_send_friend_request'
    can_upload_video = 'can_upload_video'
    can_write_private_message = 'can_write_private_message'
    career = 'career'
    city = 'city'
    common_count = 'common_count'
    connections = 'connections'
    contacts = 'contacts'
    counters = 'counters'
    country = 'country'
    cover = 'cover'
    crop_photo = 'crop_photo'
    deactivated = 'deactivated'
    description = 'description'
    domain = 'domain'
    education = 'education'
    exports = 'exports'
    finish_date = 'finish_date'
    fixed_post = 'fixed_post'
    followers_count = 'followers_count'
    friend_status = 'friend_status'
    games = 'games'
    has_market_app = 'has_market_app'
    has_mobile = 'has_mobile'
    has_photo = 'has_photo'
    home_town = 'home_town'
    id = 'id'
    interests = 'interests'
    is_admin = 'is_admin'
    is_closed = 'is_closed'
    is_favorite = 'is_favorite'
    is_friend = 'is_friend'
    is_hidden_from_feed = 'is_hidden_from_feed'
    is_member = 'is_member'
    is_messages_blocked = 'is_messages_blocked'
    can_send_notify = 'can_send_notify'
    is_subscribed = 'is_subscribed'
    last_seen = 'last_seen'
    links = 'links'
    lists = 'lists'
    maiden_name = 'maiden_name'
    main_album_id = 'main_album_id'
    main_section = 'main_section'
    market = 'market'
    member_status = 'member_status'
    members_count = 'members_count'
    military = 'military'
    movies = 'movies'
    music = 'music'
    name = 'name'
    nickname = 'nickname'
    occupation = 'occupation'
    online = 'online'
    online_status = 'online_status'
    personal = 'personal'
    phone = 'phone'
    photo_100 = 'photo_100'
    photo_200 = 'photo_200'
    photo_200_orig = 'photo_200_orig'
    photo_400_orig = 'photo_400_orig'
    photo_50 = 'photo_50'
    photo_id = 'photo_id'
    photo_max = 'photo_max'
    photo_max_orig = 'photo_max_orig'
    quotes = 'quotes'
    relation = 'relation'
    relatives = 'relatives'
    schools = 'schools'
    screen_name = 'screen_name'
    sex = 'sex'
    site = 'site'
    start_date = 'start_date'
    status = 'status'
    timezone = 'timezone'
    trending = 'trending'
    tv = 'tv'
    type = 'type'
    universities = 'universities'
    verified = 'verified'
    wall_comments = 'wall_comments'
    wiki_page = 'wiki_page'
    vk_admin_status = 'vk_admin_status'


class BaseUserId(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[int] = Field(None, description='User ID')


class BoardDefaultOrder(Enum):
    integer_1 = 1
    integer_2 = 2
    integer__1 = -1
    integer__2 = -2


class BoardTopic(BaseModel):
    class Config:
        extra = Extra.forbid

    comments: Optional[int] = Field(None, description='Comments number')
    created: Optional[int] = Field(
        None, description='Date when the topic has been created in Unixtime'
    )
    created_by: Optional[int] = Field(None, description='Creator ID')
    id: Optional[int] = Field(None, description='Topic ID')
    is_closed: Optional[BaseBoolInt] = Field(
        None, description='Information whether the topic is closed'
    )
    is_fixed: Optional[BaseBoolInt] = Field(
        None, description='Information whether the topic is fixed'
    )
    title: Optional[str] = Field(None, description='Topic title')
    updated: Optional[int] = Field(
        None, description='Date when the topic has been updated in Unixtime'
    )
    updated_by: Optional[int] = Field(
        None, description='ID of user who updated the topic'
    )


class DocsDocPreviewAudioMsg(BaseModel):
    class Config:
        extra = Extra.forbid

    duration: conint(ge=0) = Field(..., description='Audio message duration in seconds')
    link_mp3: AnyUrl = Field(..., description='MP3 file URL')
    link_ogg: AnyUrl = Field(..., description='OGG file URL')
    waveform: List[conint(ge=0)]


class PollsAnswer(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Answer ID')
    rate: confloat(ge=0.0) = Field(..., description='Answer rate in percents')
    text: str = Field(..., description='Answer text')
    votes: conint(ge=0) = Field(..., description='Votes number')


class CallbackType(Enum):
    audio_new = 'audio_new'
    board_post_new = 'board_post_new'
    board_post_edit = 'board_post_edit'
    board_post_restore = 'board_post_restore'
    board_post_delete = 'board_post_delete'
    confirmation = 'confirmation'
    group_leave = 'group_leave'
    group_join = 'group_join'
    group_change_photo = 'group_change_photo'
    group_change_settings = 'group_change_settings'
    group_officers_edit = 'group_officers_edit'
    lead_forms_new = 'lead_forms_new'
    market_comment_new = 'market_comment_new'
    market_comment_delete = 'market_comment_delete'
    market_comment_edit = 'market_comment_edit'
    market_comment_restore = 'market_comment_restore'
    message_new = 'message_new'
    message_reply = 'message_reply'
    message_edit = 'message_edit'
    message_allow = 'message_allow'
    message_deny = 'message_deny'
    message_read = 'message_read'
    message_typing_state = 'message_typing_state'
    messages_edit = 'messages_edit'
    photo_new = 'photo_new'
    photo_comment_new = 'photo_comment_new'
    photo_comment_delete = 'photo_comment_delete'
    photo_comment_edit = 'photo_comment_edit'
    photo_comment_restore = 'photo_comment_restore'
    poll_vote_new = 'poll_vote_new'
    user_block = 'user_block'
    user_unblock = 'user_unblock'
    video_new = 'video_new'
    video_comment_new = 'video_comment_new'
    video_comment_delete = 'video_comment_delete'
    video_comment_edit = 'video_comment_edit'
    video_comment_restore = 'video_comment_restore'
    wall_post_new = 'wall_post_new'
    wall_reply_new = 'wall_reply_new'
    wall_reply_edit = 'wall_reply_edit'
    wall_reply_delete = 'wall_reply_delete'
    wall_reply_restore = 'wall_reply_restore'
    wall_repost = 'wall_repost'


class CallbackBoardPostDelete(BaseModel):
    class Config:
        extra = Extra.forbid

    topic_owner_id: conint(ge=0)
    topic_id: conint(ge=0)
    id: conint(ge=0)


class CallbackDonutMoneyWithdraw(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: confloat(ge=0.0)
    amount_without_fee: confloat(ge=0.0)


class CallbackDonutMoneyWithdrawError(BaseModel):
    class Config:
        extra = Extra.forbid

    reason: str


class CallbackDonutSubscriptionCancelled(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None


class CallbackDonutSubscriptionCreate(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None
    amount: conint(ge=0)
    amount_without_fee: confloat(ge=0.0)


class CallbackDonutSubscriptionExpired(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None


class CallbackDonutSubscriptionPriceChanged(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None
    amount_old: conint(ge=0)
    amount_new: conint(ge=0)
    amount_diff: Optional[confloat(ge=0.0)] = None
    amount_diff_without_fee: Optional[confloat(ge=0.0)] = None


class CallbackDonutSubscriptionProlonged(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None
    amount: conint(ge=0)
    amount_without_fee: confloat(ge=0.0)


class CallbackGroupChangeSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    self: BaseBoolInt


class CallbackGroupJoinType(Enum):
    join = 'join'
    unsure = 'unsure'
    accepted = 'accepted'
    approved = 'approved'
    request = 'request'


class CallbackGroupLeave(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[conint(ge=0)] = None
    self: Optional[BaseBoolInt] = None


class CallbackGroupMarket(Enum):
    integer_0 = 0
    integer_1 = 1


class CallbackGroupOfficerRole(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class CallbackGroupOfficersEdit(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: conint(ge=0)
    user_id: conint(ge=0)
    level_old: CallbackGroupOfficerRole
    level_new: CallbackGroupOfficerRole


class GroupsGroupIsClosed(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class ObjectType(Enum):
    video = 'video'
    photo = 'photo'
    post = 'post'
    comment = 'comment'
    note = 'note'
    topic_comment = 'topic_comment'
    photo_comment = 'photo_comment'
    video_comment = 'video_comment'
    market = 'market'
    market_comment = 'market_comment'


class CallbackLikeAddRemove(BaseModel):
    class Config:
        extra = Extra.forbid

    liker_id: int
    object_type: ObjectType
    object_owner_id: int
    object_id: int
    post_id: conint(ge=0)
    thread_reply_id: Optional[conint(ge=0)] = None


class CallbackMarketComment(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    from_id: int
    date: conint(ge=0)
    text: Optional[str] = None
    market_owner_id: Optional[int] = None
    photo_id: Optional[int] = None


class CallbackMarketCommentDelete(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int
    id: int
    user_id: conint(ge=0)
    item_id: conint(ge=0)


class CallbackMessageAllowObject(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    key: str


class CallbackMessageDeny(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)


class MessagesMessageActionPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    photo_100: AnyUrl = Field(
        ..., description='URL of the preview image with 100px in width'
    )
    photo_200: AnyUrl = Field(
        ..., description='URL of the preview image with 200px in width'
    )
    photo_50: AnyUrl = Field(
        ..., description='URL of the preview image with 50px in width'
    )


class MessagesTemplateActionTypeNames(Enum):
    text = 'text'
    start = 'start'
    location = 'location'
    vkpay = 'vkpay'
    open_app = 'open_app'
    open_photo = 'open_photo'
    open_link = 'open_link'
    callback = 'callback'
    intent_subscribe = 'intent_subscribe'
    intent_unsubscribe = 'intent_unsubscribe'


class CallbackPhotoComment(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    from_id: conint(ge=0)
    date: conint(ge=0)
    text: str
    photo_owner_id: int


class CallbackPhotoCommentDelete(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    owner_id: conint(ge=0)
    user_id: conint(ge=0)
    photo_id: conint(ge=0)


class CallbackPollVoteNew(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int
    poll_id: conint(ge=0)
    option_id: conint(ge=0)
    user_id: conint(ge=0)


class CallbackQrScan(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    data: str
    type: str
    subtype: str
    reread: bool


class CallbackUserBlock(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: conint(ge=0)
    user_id: conint(ge=0)
    unblock_date: conint(ge=0)
    reason: conint(ge=0)
    comment: Optional[str] = None


class CallbackUserUnblock(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: conint(ge=0)
    user_id: conint(ge=0)
    by_end_date: conint(ge=0)


class CallbackVideoComment(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    from_id: int
    date: conint(ge=0)
    text: str
    video_owner_id: int


class CallbackVideoCommentDelete(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    owner_id: int
    user_id: conint(ge=0)
    video_id: conint(ge=0)


class CallbackWallCommentDelete(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int
    id: conint(ge=0)
    user_id: conint(ge=0)
    post_id: conint(ge=0)


class CallsEndState(Enum):
    canceled_by_initiator = 'canceled_by_initiator'
    canceled_by_receiver = 'canceled_by_receiver'
    reached = 'reached'


class CallsParticipants(BaseModel):
    class Config:
        extra = Extra.forbid

    list: Optional[List[int]] = None
    count: Optional[conint(ge=0)] = Field(None, description='Participants count')


class WallWallCommentDonutPlaceholder(BaseModel):
    class Config:
        extra = Extra.forbid

    text: str


class DatabaseCity(BaseObject):
    class Config:
        extra = Extra.forbid

    area: Optional[str] = Field(None, description='Area title')
    region: Optional[str] = Field(None, description='Region title')
    important: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the city is included in important cities list',
    )


class DatabaseFaculty(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Faculty ID')
    title: Optional[str] = Field(None, description='Faculty title')


class DatabaseRegion(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Region ID')
    title: Optional[str] = Field(None, description='Region title')


class DatabaseSchool(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='School ID')
    title: Optional[str] = Field(None, description='School title')


class DatabaseStation(BaseModel):
    class Config:
        extra = Extra.forbid

    city_id: Optional[conint(ge=1)] = Field(None, description='City ID')
    color: Optional[str] = Field(None, description='Hex color code without #')
    id: conint(ge=1) = Field(..., description='Station ID')
    name: str = Field(..., description='Station name')


class DatabaseUniversity(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='University ID')
    title: Optional[str] = Field(None, description='University title')


class DocsDocAttachmentType(Enum):
    doc = 'doc'
    graffiti = 'graffiti'
    audio_message = 'audio_message'


class DocsDocPreviewGraffiti(BaseModel):
    class Config:
        extra = Extra.forbid

    src: AnyUrl = Field(..., description='Graffiti file URL')
    width: conint(ge=0) = Field(..., description='Graffiti width')
    height: conint(ge=0) = Field(..., description='Graffiti height')


class PhotosPhotoSizesType(Enum):
    s = 's'
    m = 'm'
    x = 'x'
    o = 'o'
    p = 'p'
    q = 'q'
    r = 'r'
    k = 'k'
    l = 'l'
    y = 'y'
    z = 'z'
    c = 'c'
    w = 'w'
    a = 'a'
    b = 'b'
    e = 'e'
    i = 'i'
    d = 'd'
    j = 'j'
    temp = 'temp'
    h = 'h'
    g = 'g'
    n = 'n'
    f = 'f'
    max = 'max'


class DocsDocPreviewVideo(BaseModel):
    class Config:
        extra = Extra.forbid

    src: AnyUrl = Field(..., description='Video URL')
    width: conint(ge=0) = Field(..., description="Video's width in pixels")
    height: conint(ge=0) = Field(..., description="Video's height in pixels")
    file_size: conint(ge=0) = Field(..., description='Video file size in bites')


class DocsDocTypes(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Doc type ID')
    name: str = Field(..., description='Doc type title')
    count: conint(ge=0) = Field(..., description='Number of docs')


class Status1(Enum):
    active = 'active'
    expiring = 'expiring'


class DonutDonatorSubscriptionInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int
    next_payment_date: int
    amount: int
    status: Status1


class GroupsGroupFullMemberStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class TopicId(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_7 = 7
    integer_12 = 12
    integer_16 = 16
    integer_19 = 19
    integer_21 = 21
    integer_23 = 23
    integer_25 = 25
    integer_26 = 26
    integer_32 = 32
    integer_43 = 43


class WallCarouselBase(BaseModel):
    class Config:
        extra = Extra.forbid

    carousel_offset: Optional[conint(ge=0)] = Field(
        None, description='Index of current carousel element'
    )


class FaveBookmarkType(Enum):
    post = 'post'
    video = 'video'
    product = 'product'
    article = 'article'
    link = 'link'


class Wall(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupsGroupType(Enum):
    group = 'group'
    page = 'page'
    event = 'event'


class FavePageType(Enum):
    user = 'user'
    group = 'group'
    hints = 'hints'


class FaveTag(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[conint(ge=0)] = Field(None, description='Tag id')
    name: Optional[str] = Field(None, description='Tag name')


class FriendsFriendStatusStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class FriendsFriendsList(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='List ID')
    name: str = Field(..., description='List title')


class FriendsMutualFriend(BaseModel):
    class Config:
        extra = Extra.forbid

    common_count: Optional[int] = Field(None, description='Total mutual friends number')
    common_friends: Optional[List[conint(ge=1)]] = None
    id: Optional[int] = Field(None, description='User ID')


class FriendsRequestsMutual(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(
        None, description='Total mutual friends number'
    )
    users: Optional[List[conint(ge=1)]] = None


class FriendsRequestsXtrMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    from_: Optional[str] = Field(
        None,
        alias='from',
        description='ID of the user by whom friend has been suggested',
    )
    message: Optional[str] = Field(None, description='Message sent with a request')
    mutual: Optional[FriendsRequestsMutual] = None
    user_id: Optional[conint(ge=1)] = Field(None, description='User ID')


class WallDefault(Enum):
    owner = 'owner'
    all = 'all'


class Status2(Enum):
    recently = 'recently'
    last_week = 'last_week'
    last_month = 'last_month'
    long_ago = 'long_ago'
    not_show = 'not_show'


class UsersOnlineInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    visible: bool = Field(
        ..., description='Whether you can see real online status of user or not'
    )
    last_seen: Optional[conint(ge=0)] = Field(
        None, description='Last time we saw user being active'
    )
    is_online: Optional[bool] = Field(
        None, description='Whether user is currently online or not'
    )
    app_id: Optional[conint(ge=0)] = Field(
        None,
        description='Application id from which user is currently online or was last seen online',
    )
    is_mobile: Optional[bool] = Field(
        None, description='Is user online from desktop app or mobile app'
    )
    status: Optional[Status2] = Field(
        None,
        description='In case user online is not visible, it indicates approximate timeframe of user online',
    )


class GiftsLayout(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Gift ID')
    thumb_512: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 512 px in width'
    )
    thumb_256: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 256 px in width'
    )
    thumb_48: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 48 px in width'
    )
    thumb_96: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 96 px in width'
    )
    stickers_product_id: Optional[conint(ge=0)] = Field(
        None, description='ID of the sticker pack, if the gift is representing one'
    )
    is_stickers_style: Optional[bool] = Field(
        None, description='Information whether gift represents a stickers style'
    )
    build_id: Optional[str] = Field(
        None, description='ID of the build of constructor gift'
    )
    keywords: Optional[str] = Field(None, description='Keywords used for search')


class GiftsGiftPrivacy(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsAddressTimetableDay(BaseModel):
    class Config:
        extra = Extra.forbid

    break_close_time: Optional[int] = Field(
        None, description='Close time of the break in minutes'
    )
    break_open_time: Optional[int] = Field(
        None, description='Start time of the break in minutes'
    )
    close_time: int = Field(..., description='Close time in minutes')
    open_time: int = Field(..., description='Open time in minutes')


class GroupsAddressWorkInfoStatus(Enum):
    no_information = 'no_information'
    temporarily_closed = 'temporarily_closed'
    always_opened = 'always_opened'
    timetable = 'timetable'
    forever_closed = 'forever_closed'


class GroupsAddressesInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    is_enabled: bool = Field(
        ..., description='Information whether addresses is enabled'
    )
    main_address_id: Optional[int] = Field(
        None, description='Main address id for group'
    )


class GroupsBanInfoReason(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class GroupsOwnerXtrBanInfoType(Enum):
    group = 'group'
    profile = 'profile'


class Status3(Enum):
    unconfigured = 'unconfigured'
    failed = 'failed'
    wait = 'wait'
    ok = 'ok'


class GroupsCallbackServer(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    title: str
    creator_id: conint(ge=0)
    url: str
    secret_key: str
    status: Status3


class GroupsLongPollEvents(BaseModel):
    class Config:
        extra = Extra.forbid

    app_payload: BaseBoolInt
    audio_new: BaseBoolInt
    board_post_delete: BaseBoolInt
    board_post_edit: BaseBoolInt
    board_post_new: BaseBoolInt
    board_post_restore: BaseBoolInt
    group_change_photo: BaseBoolInt
    group_change_settings: BaseBoolInt
    group_join: BaseBoolInt
    group_leave: BaseBoolInt
    group_officers_edit: BaseBoolInt
    lead_forms_new: Optional[BaseBoolInt] = None
    like_add: BaseBoolInt
    like_remove: BaseBoolInt
    market_comment_delete: BaseBoolInt
    market_comment_edit: BaseBoolInt
    market_comment_new: BaseBoolInt
    market_comment_restore: BaseBoolInt
    market_order_new: Optional[BaseBoolInt] = None
    market_order_edit: Optional[BaseBoolInt] = None
    message_allow: BaseBoolInt
    message_deny: BaseBoolInt
    message_new: BaseBoolInt
    message_read: BaseBoolInt
    message_reply: BaseBoolInt
    message_typing_state: BaseBoolInt
    message_edit: BaseBoolInt
    photo_comment_delete: BaseBoolInt
    photo_comment_edit: BaseBoolInt
    photo_comment_new: BaseBoolInt
    photo_comment_restore: BaseBoolInt
    photo_new: BaseBoolInt
    poll_vote_new: BaseBoolInt
    user_block: BaseBoolInt
    user_unblock: BaseBoolInt
    video_comment_delete: BaseBoolInt
    video_comment_edit: BaseBoolInt
    video_comment_new: BaseBoolInt
    video_comment_restore: BaseBoolInt
    video_new: BaseBoolInt
    wall_post_new: BaseBoolInt
    wall_reply_delete: BaseBoolInt
    wall_reply_edit: BaseBoolInt
    wall_reply_new: BaseBoolInt
    wall_reply_restore: BaseBoolInt
    wall_repost: BaseBoolInt
    donut_subscription_create: BaseBoolInt
    donut_subscription_prolonged: BaseBoolInt
    donut_subscription_cancelled: BaseBoolInt
    donut_subscription_expired: BaseBoolInt
    donut_subscription_price_changed: BaseBoolInt
    donut_money_withdraw: BaseBoolInt
    donut_money_withdraw_error: BaseBoolInt
    vkpay_transaction: BaseBoolInt
    message_event: BaseBoolInt
    music_subscription_update: BaseBoolInt
    inapp_subscription_update: BaseBoolInt
    inapp_order_create: BaseBoolInt
    inapp_order_refund: BaseBoolInt


class GroupsContactsItem(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[int] = Field(None, description='User ID')
    desc: Optional[str] = Field(None, description='Contact description')
    phone: Optional[str] = Field(None, description='Contact phone')
    email: Optional[str] = Field(None, description='Contact email')


class GroupsCountersGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    addresses: Optional[int] = Field(None, description='Addresses number')
    albums: Optional[int] = Field(None, description='Photo albums number')
    audios: Optional[int] = Field(None, description='Audios number')
    audio_playlists: Optional[int] = Field(None, description='Audio playlists number')
    docs: Optional[int] = Field(None, description='Docs number')
    market: Optional[int] = Field(None, description='Market items number')
    photos: Optional[int] = Field(None, description='Photos number')
    topics: Optional[int] = Field(None, description='Topics number')
    videos: Optional[int] = Field(None, description='Videos number')
    market_services: Optional[int] = Field(None, description='Market services number')
    podcasts: Optional[int] = Field(None, description='Podcasts number')
    articles: Optional[int] = Field(None, description='Articles number')
    narratives: Optional[int] = Field(None, description='Narratives number')
    clips: Optional[int] = Field(None, description='Clips number')
    clips_followers: Optional[int] = Field(None, description='Clips followers number')


class GroupsCover(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: BaseBoolInt = Field(
        ..., description='Information whether cover is enabled'
    )
    images: Optional[List[BaseImage]] = None


class GroupsFields(Enum):
    market = 'market'
    member_status = 'member_status'
    is_favorite = 'is_favorite'
    is_subscribed = 'is_subscribed'
    is_subscribed_podcasts = 'is_subscribed_podcasts'
    can_subscribe_podcasts = 'can_subscribe_podcasts'
    city = 'city'
    country = 'country'
    verified = 'verified'
    description = 'description'
    wiki_page = 'wiki_page'
    members_count = 'members_count'
    requests_count = 'requests_count'
    counters = 'counters'
    cover = 'cover'
    can_post = 'can_post'
    can_suggest = 'can_suggest'
    can_upload_story = 'can_upload_story'
    can_upload_doc = 'can_upload_doc'
    can_upload_video = 'can_upload_video'
    can_upload_clip = 'can_upload_clip'
    can_see_all_posts = 'can_see_all_posts'
    can_create_topic = 'can_create_topic'
    crop_photo = 'crop_photo'
    activity = 'activity'
    fixed_post = 'fixed_post'
    has_photo = 'has_photo'
    status = 'status'
    main_album_id = 'main_album_id'
    links = 'links'
    contacts = 'contacts'
    site = 'site'
    main_section = 'main_section'
    secondary_section = 'secondary_section'
    wall = 'wall'
    trending = 'trending'
    can_message = 'can_message'
    is_market_cart_enabled = 'is_market_cart_enabled'
    is_messages_blocked = 'is_messages_blocked'
    can_send_notify = 'can_send_notify'
    has_group_channel = 'has_group_channel'
    group_channel = 'group_channel'
    online_status = 'online_status'
    start_date = 'start_date'
    finish_date = 'finish_date'
    age_limits = 'age_limits'
    ban_info = 'ban_info'
    action_button = 'action_button'
    author_id = 'author_id'
    phone = 'phone'
    has_market_app = 'has_market_app'
    addresses = 'addresses'
    live_covers = 'live_covers'
    is_adult = 'is_adult'
    is_hidden_from_feed = 'is_hidden_from_feed'
    can_subscribe_posts = 'can_subscribe_posts'
    warning_notification = 'warning_notification'
    msg_push_allowed = 'msg_push_allowed'
    stories_archive_count = 'stories_archive_count'
    video_live_level = 'video_live_level'
    video_live_count = 'video_live_count'
    clips_count = 'clips_count'
    has_unseen_stories = 'has_unseen_stories'
    is_business = 'is_business'
    textlives_count = 'textlives_count'


class GroupsFilter(Enum):
    admin = 'admin'
    editor = 'editor'
    moder = 'moder'
    advertiser = 'advertiser'
    groups = 'groups'
    publics = 'publics'
    events = 'events'
    has_addresses = 'has_addresses'


class GroupsGroupAccess(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupAdminLevel(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupsGroupAgeLimits(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupsGroupAttach(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='group ID')
    text: str = Field(..., description='text of attach')
    status: str = Field(..., description='activity or category of group')
    size: int = Field(..., description='size of group')
    is_favorite: bool = Field(..., description='is favorite')


class GroupsGroupAudio(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupBanInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    comment: Optional[str] = Field(None, description='Ban comment')
    end_date: Optional[int] = Field(None, description='End date of ban in Unixtime')
    reason: Optional[GroupsBanInfoReason] = None


class GroupsGroupCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    subcategories: Optional[List[BaseObjectWithName]] = None


class GroupsGroupCategoryType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    name: str


class GroupsGroupDocs(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupFullAgeLimits(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupsGroupFullSection(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_10 = 10
    integer_35 = 35
    integer_39 = 39
    integer_43 = 43
    integer_51 = 51


class GroupsGroupMarketCurrency(Enum):
    integer_643 = 643
    integer_980 = 980
    integer_398 = 398
    integer_978 = 978
    integer_840 = 840


class GroupsGroupPhotos(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupPublicCategoryList(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = None
    name: Optional[str] = None
    subcategories: Optional[List[GroupsGroupCategoryType]] = None


class GroupsGroupRole(Enum):
    moderator = 'moderator'
    editor = 'editor'
    administrator = 'administrator'
    advertiser = 'advertiser'


class GroupsGroupSubject(Enum):
    field_1 = 1
    field_2 = 2
    field_3 = 3
    field_4 = 4
    field_5 = 5
    field_6 = 6
    field_7 = 7
    field_8 = 8
    field_9 = 9
    field_10 = 10
    field_11 = 11
    field_12 = 12
    field_13 = 13
    field_14 = 14
    field_15 = 15
    field_16 = 16
    field_17 = 17
    field_18 = 18
    field_19 = 19
    field_20 = 20
    field_21 = 21
    field_22 = 22
    field_23 = 23
    field_24 = 24
    field_25 = 25
    field_26 = 26
    field_27 = 27
    field_28 = 28
    field_29 = 29
    field_30 = 30
    field_31 = 31
    field_32 = 32
    field_33 = 33
    field_34 = 34
    field_35 = 35
    field_36 = 36
    field_37 = 37
    field_38 = 38
    field_39 = 39
    field_40 = 40
    field_41 = 41
    field_42 = 42


class GroupsGroupSuggestedPrivacy(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class Color(Enum):
    field_454647 = '454647'
    field_45678f = '45678f'
    field_4bb34b = '4bb34b'
    field_5181b8 = '5181b8'
    field_539b9c = '539b9c'
    field_5c9ce6 = '5c9ce6'
    field_63b9ba = '63b9ba'
    field_6bc76b = '6bc76b'
    field_76787a = '76787a'
    field_792ec0 = '792ec0'
    field_7a6c4f = '7a6c4f'
    field_7ececf = '7ececf'
    field_9e8d6b = '9e8d6b'
    a162de = 'a162de'
    aaaeb3 = 'aaaeb3'
    bbaa84 = 'bbaa84'
    e64646 = 'e64646'
    ff5c5c = 'ff5c5c'
    ffa000 = 'ffa000'
    ffc107 = 'ffc107'


class GroupsGroupTag(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    name: str
    color: Color
    uses: Optional[int] = None


class GroupsGroupTopics(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupVideo(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupWall(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupsGroupWiki(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class GroupsGroupsArray(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Communities number')
    items: List[int]


class GroupsLinksItem(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description='Link title')
    desc: Optional[str] = Field(None, description='Link description')
    edit_title: Optional[BaseBoolInt] = Field(
        None, description='Information whether the link title can be edited'
    )
    id: Optional[int] = Field(None, description='Link ID')
    photo_100: Optional[AnyUrl] = Field(
        None, description='URL of square image of the link with 100 pixels in width'
    )
    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of square image of the link with 50 pixels in width'
    )
    url: Optional[AnyUrl] = Field(None, description='Link URL')
    image_processing: Optional[BaseBoolInt] = Field(
        None, description='Information whether the image on processing'
    )


class GroupsLiveCovers(BaseModel):
    class Config:
        extra = Extra.forbid

    is_enabled: bool = Field(
        ..., description='Information whether live covers is enabled'
    )
    is_scalable: Optional[bool] = Field(
        None, description='Information whether live covers photo scaling is enabled'
    )
    story_ids: Optional[List[str]] = None


class GroupsLongPollServer(BaseModel):
    class Config:
        extra = Extra.forbid

    key: str = Field(..., description='Long Poll key')
    server: str = Field(..., description='Long Poll server address')
    ts: str = Field(..., description='Number of the last event')


class GroupsLongPollSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    api_version: Optional[str] = Field(
        None, description='API version used for the events'
    )
    events: GroupsLongPollEvents
    is_enabled: bool = Field(..., description='Shows whether Long Poll is enabled')


class GroupsMarketState(Enum):
    none = 'none'
    basic = 'basic'
    advanced = 'advanced'


class GroupsMemberRolePermission(Enum):
    ads = 'ads'


class GroupsMemberRoleStatus(Enum):
    moderator = 'moderator'
    editor = 'editor'
    administrator = 'administrator'
    creator = 'creator'
    advertiser = 'advertiser'


class GroupsMemberStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    member: BaseBoolInt = Field(
        ..., description='Information whether user is a member of the group'
    )
    user_id: conint(ge=1) = Field(..., description='User ID')


class GroupsMemberStatusFull(BaseModel):
    class Config:
        extra = Extra.forbid

    can_invite: Optional[BaseBoolInt] = Field(
        None, description='Information whether user can be invited'
    )
    can_recall: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether user's invite to the group can be recalled",
    )
    invitation: Optional[BaseBoolInt] = Field(
        None, description='Information whether user has been invited to the group'
    )
    member: BaseBoolInt = Field(
        ..., description='Information whether user is a member of the group'
    )
    request: Optional[BaseBoolInt] = Field(
        None, description='Information whether user has send request to the group'
    )
    user_id: conint(ge=1) = Field(..., description='User ID')


class GroupsOnlineStatusType(Enum):
    none = 'none'
    online = 'online'
    answer_mark = 'answer_mark'


class GroupsPhotoSize(BaseModel):
    class Config:
        extra = Extra.forbid

    height: conint(ge=0) = Field(..., description='Image height')
    width: conint(ge=0) = Field(..., description='Image width')


class GroupsRoleOptions(Enum):
    moderator = 'moderator'
    editor = 'editor'
    administrator = 'administrator'
    creator = 'creator'


class GroupsSectionsListItem(BaseModel):
    __root__: List[Union[int, str]] = Field(
        ..., description='(index, title) tuples', max_items=2, min_items=2
    )


class Status4(Enum):
    loading = 'loading'
    sync = 'sync'


class GroupsSettingsTwitter(BaseModel):
    class Config:
        extra = Extra.forbid

    status: Status4
    name: Optional[str] = None


class GroupsSubjectItem(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Subject ID')
    name: str = Field(..., description='Subject title')


class GroupsTokenPermissionSetting(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    setting: conint(ge=0)


class LeadFormsAnswerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = None
    value: str


class Type1(Enum):
    input = 'input'
    textarea = 'textarea'
    radio = 'radio'
    checkbox = 'checkbox'
    select = 'select'


class LeadFormsQuestionItemOption(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = None
    label: str


class LikesType(Enum):
    post = 'post'
    comment = 'comment'
    photo = 'photo'
    audio = 'audio'
    video = 'video'
    note = 'note'
    market = 'market'
    photo_comment = 'photo_comment'
    video_comment = 'video_comment'
    topic_comment = 'topic_comment'
    market_comment = 'market_comment'
    sitepage = 'sitepage'
    textpost = 'textpost'


class LinkTargetObject(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = Field(None, description='Object type')
    owner_id: Optional[int] = Field(None, description='Owner ID')
    item_id: Optional[int] = Field(None, description='Item ID')


class MarketSection(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Section ID')
    name: str = Field(..., description='Section name')


class MarketMarketCategoryNested(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    parent: Optional[MarketMarketCategoryNested] = None


class MarketMarketCategoryTree(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    children: Optional[List[MarketMarketCategoryTree]] = None


class MarketMarketItemAvailability(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class MarketServicesViewType(Enum):
    integer_1 = 1
    integer_2 = 2


class MessagesAudioMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for audio message')
    transcript_error: Optional[conint(ge=1, le=11)] = None
    duration: conint(ge=0) = Field(..., description='Audio message duration in seconds')
    id: conint(ge=0) = Field(..., description='Audio message ID')
    link_mp3: AnyUrl = Field(..., description='MP3 file URL')
    link_ogg: AnyUrl = Field(..., description='OGG file URL')
    owner_id: int = Field(..., description='Audio message owner ID')
    waveform: List[conint(ge=0)]


class MessagesChatPushSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    disabled_until: Optional[int] = Field(
        None, description='Time until that notifications are disabled'
    )
    sound: Optional[BaseBoolInt] = Field(
        None, description='Information whether the sound is on'
    )


class UsersUserType(Enum):
    profile = 'profile'


class MessagesChatPreview(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: Optional[conint(ge=0)] = None
    joined: Optional[bool] = None
    local_id: Optional[int] = None
    members: Optional[List[int]] = None
    members_count: Optional[conint(ge=0)] = None
    title: Optional[str] = None
    is_member: Optional[bool] = None


class MessagesChatRestrictions(BaseModel):
    class Config:
        extra = Extra.forbid

    admins_promote_users: Optional[bool] = Field(
        None, description='Only admins can promote users to admins'
    )
    only_admins_edit_info: Optional[bool] = Field(
        None, description='Only admins can change chat info'
    )
    only_admins_edit_pin: Optional[bool] = Field(
        None, description='Only admins can edit pinned message'
    )
    only_admins_invite: Optional[bool] = Field(
        None, description='Only admins can invite users to this chat'
    )
    only_admins_kick: Optional[bool] = Field(
        None, description='Only admins can kick users from this chat'
    )


class MessagesGraffiti(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for graffiti')
    height: conint(ge=0) = Field(..., description='Graffiti height')
    id: conint(ge=0) = Field(..., description='Graffiti ID')
    owner_id: int = Field(..., description='Graffiti owner ID')
    url: AnyUrl = Field(..., description='Graffiti URL')
    width: conint(ge=0) = Field(..., description='Graffiti width')


class MessagesChatSettingsAcl(BaseModel):
    class Config:
        extra = Extra.forbid

    can_change_info: bool = Field(
        ..., description='Can you change photo, description and name'
    )
    can_change_invite_link: bool = Field(
        ..., description='Can you change invite link for this chat'
    )
    can_change_pin: bool = Field(
        ..., description='Can you pin/unpin message for this chat'
    )
    can_invite: bool = Field(..., description='Can you invite other peers in chat')
    can_promote_users: bool = Field(
        ..., description='Can you promote simple users to chat admins'
    )
    can_see_invite_link: bool = Field(
        ..., description='Can you see invite link for this chat'
    )
    can_moderate: bool = Field(
        ..., description="Can you moderate (delete) other users' messages"
    )
    can_copy_chat: bool = Field(..., description='Can you copy chat')
    can_call: bool = Field(..., description='Can you init group call in the chat')
    can_use_mass_mentions: bool = Field(..., description='Can you use mass mentions')
    can_change_service_type: Optional[bool] = Field(
        None, description='Can you change chat service type'
    )


class Invite(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class ChangeInfo(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class ChangePin(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class UseMassMentions(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class SeeInviteLink(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class Call(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'
    all = 'all'


class ChangeAdmins(Enum):
    owner = 'owner'
    owner_and_admins = 'owner_and_admins'


class MessagesChatSettingsPermissions(BaseModel):
    class Config:
        extra = Extra.forbid

    invite: Optional[Invite] = Field(None, description='Who can invite users to chat')
    change_info: Optional[ChangeInfo] = Field(
        None, description='Who can change chat info'
    )
    change_pin: Optional[ChangePin] = Field(
        None, description='Who can change pinned message'
    )
    use_mass_mentions: Optional[UseMassMentions] = Field(
        None, description='Who can use mass mentions'
    )
    see_invite_link: Optional[SeeInviteLink] = Field(
        None, description='Who can see invite link'
    )
    call: Optional[Call] = Field(None, description='Who can make calls')
    change_admins: Optional[ChangeAdmins] = Field(
        None, description='Who can change admins'
    )


class MessagesChatSettingsPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 50px in width'
    )
    photo_100: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 100px in width'
    )
    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 200px in width'
    )
    is_default_photo: Optional[bool] = Field(
        None, description='If provided photo is default'
    )
    is_default_call_photo: Optional[bool] = Field(
        None, description='If provided photo is default call photo'
    )


class MessagesChatSettingsState(Enum):
    in_ = 'in'
    kicked = 'kicked'
    left = 'left'


class SpecialServiceType(Enum):
    business_notify = 'business_notify'


class MessagesConversationPeerType(Enum):
    chat = 'chat'
    email = 'email'
    user = 'user'
    group = 'group'


class MessagesConversationCanWrite(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed: bool
    reason: Optional[int] = None


class MessagesConversationMember(BaseModel):
    class Config:
        extra = Extra.forbid

    can_kick: Optional[bool] = Field(
        None, description='Is it possible for user to kick this member'
    )
    invited_by: Optional[int] = None
    is_admin: Optional[bool] = None
    is_owner: Optional[bool] = None
    is_message_request: Optional[bool] = None
    join_date: Optional[conint(ge=0)] = None
    request_date: Optional[conint(ge=0)] = Field(
        None, description='Message request date'
    )
    member_id: int


class MessagesConversationSortId(BaseModel):
    class Config:
        extra = Extra.forbid

    major_id: conint(ge=0) = Field(
        ..., description='Major id for sorting conversations'
    )
    minor_id: conint(ge=0) = Field(
        ..., description='Minor id for sorting conversations'
    )


class MessagesForward(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: Optional[int] = Field(None, description='Messages owner_id')
    peer_id: Optional[int] = Field(None, description='Messages peer_id')
    conversation_message_ids: Optional[List[int]] = None
    message_ids: Optional[List[int]] = None
    is_reply: Optional[bool] = Field(
        None, description='If you need to reply to a message'
    )


class MessagesHistoryMessageAttachmentType(Enum):
    photo = 'photo'
    video = 'video'
    audio = 'audio'
    doc = 'doc'
    link = 'link'
    market = 'market'
    wall = 'wall'
    share = 'share'
    graffiti = 'graffiti'
    audio_message = 'audio_message'


class Color1(Enum):
    default = 'default'
    positive = 'positive'
    negative = 'negative'
    primary = 'primary'


class MessagesKeyboardButtonAction(BaseModel):
    class Config:
        extra = Extra.forbid

    app_id: Optional[int] = Field(
        None,
        description='Fragment value in app link like vk.com/app{app_id}_-654321#hash',
    )
    hash: Optional[str] = Field(
        None,
        description='Fragment value in app link like vk.com/app123456_-654321#{hash}',
    )
    label: Optional[str] = Field(None, description='Label for button')
    link: Optional[str] = Field(None, description='link for button')
    owner_id: Optional[int] = Field(
        None,
        description='Fragment value in app link like vk.com/app123456_{owner_id}#hash',
    )
    payload: Optional[str] = Field(
        None,
        description='Additional data sent along with message for developer convenience',
    )
    type: MessagesTemplateActionTypeNames = Field(..., description='Button type')


class MessagesLastActivity(BaseModel):
    class Config:
        extra = Extra.forbid

    online: BaseBoolInt = Field(..., description='Information whether user is online')
    time: int = Field(..., description='Time when user was online in Unixtime')


class MessagesLongpollParams(BaseModel):
    class Config:
        extra = Extra.forbid

    server: str = Field(..., description='Server URL')
    key: str = Field(..., description='Key')
    ts: int = Field(..., description='Timestamp')
    pts: Optional[int] = Field(None, description='Persistent timestamp')


class MessagesMessageActionStatus(Enum):
    chat_photo_update = 'chat_photo_update'
    chat_photo_remove = 'chat_photo_remove'
    chat_create = 'chat_create'
    chat_title_update = 'chat_title_update'
    chat_invite_user = 'chat_invite_user'
    chat_kick_user = 'chat_kick_user'
    chat_pin_message = 'chat_pin_message'
    chat_unpin_message = 'chat_unpin_message'
    chat_invite_user_by_link = 'chat_invite_user_by_link'
    chat_invite_user_by_message_request = 'chat_invite_user_by_message_request'
    chat_screenshot = 'chat_screenshot'


class MessagesMessageAttachmentType(Enum):
    photo = 'photo'
    audio = 'audio'
    video = 'video'
    doc = 'doc'
    link = 'link'
    market = 'market'
    market_album = 'market_album'
    gift = 'gift'
    sticker = 'sticker'
    wall = 'wall'
    wall_reply = 'wall_reply'
    article = 'article'
    poll = 'poll'
    call = 'call'
    graffiti = 'graffiti'
    audio_message = 'audio_message'


class MessagesMessageRequestData(BaseModel):
    class Config:
        extra = Extra.forbid

    status: Optional[str] = Field(None, description='Status of message request')
    inviter_id: Optional[int] = Field(None, description='Message request sender id')
    request_date: Optional[int] = Field(None, description='Message request date')


class MessagesOutReadBy(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = None
    member_ids: Optional[List[int]] = None


class MessagesPushSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    disabled_forever: bool = Field(
        ..., description='Information whether push notifications are disabled forever'
    )
    disabled_until: Optional[int] = Field(
        None, description='Time until what notifications are disabled'
    )
    no_sound: bool = Field(..., description='Information whether the sound is on')
    disabled_mentions: Optional[bool] = Field(
        None, description='Information whether the mentions are disabled'
    )
    disabled_mass_mentions: Optional[bool] = Field(
        None,
        description="Information whether the mass mentions (like '@all', '@online') are disabled",
    )


class MessagesSendUserIdsResponseItem(BaseModel):
    class Config:
        extra = Extra.forbid

    peer_id: int
    message_id: conint(ge=0)
    conversation_message_id: Optional[conint(ge=0)] = None
    error: Optional[BaseMessageError] = None


class NewsfeedCommentsFilters(Enum):
    post = 'post'
    photo = 'photo'
    video = 'video'
    topic = 'topic'
    note = 'note'


class NewsfeedIgnoreItemType(Enum):
    wall = 'wall'
    tag = 'tag'
    profilephoto = 'profilephoto'
    video = 'video'
    photo = 'photo'
    audio = 'audio'


class NewsfeedNewsfeedItemType(Enum):
    post = 'post'
    photo = 'photo'
    photo_tag = 'photo_tag'
    wall_photo = 'wall_photo'
    friend = 'friend'
    audio = 'audio'
    video = 'video'
    topic = 'topic'
    digest = 'digest'
    stories = 'stories'
    note = 'note'
    audio_playlist = 'audio_playlist'
    clip = 'clip'


class NewsfeedItemAudioAudio(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Audios number')
    items: Optional[List[AudioAudio]] = None


class Template(Enum):
    list = 'list'
    grid = 'grid'
    single = 'single'


class Style(Enum):
    primary = 'primary'


class NewsfeedItemDigestButton(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str
    style: Optional[Style] = None


class Style1(Enum):
    text = 'text'
    button = 'button'


class NewsfeedItemDigestFooter(BaseModel):
    class Config:
        extra = Extra.forbid

    style: Style1
    text: str = Field(..., description='text for invite to enable smart feed')
    button: Optional[NewsfeedItemDigestButton] = None


class Style2(Enum):
    default = 'default'
    inversed = 'inversed'
    spotlight = 'spotlight'


class Style3(Enum):
    singleline = 'singleline'
    multiline = 'multiline'


class NewsfeedItemDigestHeader(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str = Field(..., description='Title of the header')
    subtitle: Optional[str] = Field(
        None, description='Subtitle of the header, when title have two strings'
    )
    style: Style3
    button: Optional[NewsfeedItemDigestButton] = None


class NewsfeedItemFriendFriends(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(
        None, description='Number of friends has been added'
    )
    items: Optional[List[BaseUserId]] = None


class NewsfeedItemPromoButtonAction(BaseModel):
    class Config:
        extra = Extra.forbid

    url: Optional[str] = None
    type: Optional[str] = None
    target: Optional[str] = None


class NewsfeedItemPromoButtonImage(BaseModel):
    class Config:
        extra = Extra.forbid

    width: Optional[int] = None
    height: Optional[int] = None
    url: Optional[str] = None


class Type2(Enum):
    video = 'video'
    music_video = 'music_video'
    movie = 'movie'


class LiveStatus(Enum):
    waiting = 'waiting'
    started = 'started'
    finished = 'finished'
    failed = 'failed'
    upcoming = 'upcoming'


class VideoVideoImage(BaseImage):
    class Config:
        extra = Extra.forbid

    with_padding: Optional[BasePropertyExists] = None


class NewsfeedItemWallpostFeedbackType(Enum):
    buttons = 'buttons'
    stars = 'stars'


class NewsfeedItemWallpostFeedbackAnswer(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str
    id: str


class NewsfeedList(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='List ID')
    title: str = Field(..., description='List title')


class NewsfeedListFull(NewsfeedList):
    class Config:
        extra = Extra.forbid

    no_reposts: Optional[BaseBoolInt] = Field(
        None, description='Information whether reposts hiding is enabled'
    )
    source_ids: Optional[List[int]] = None


class NotesNote(BaseModel):
    class Config:
        extra = Extra.forbid

    read_comments: Optional[conint(ge=0)] = None
    can_comment: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the note'
    )
    comments: conint(ge=0) = Field(..., description='Comments number')
    date: conint(ge=0) = Field(
        ..., description='Date when the note has been created in Unixtime'
    )
    id: conint(ge=1) = Field(..., description='Note ID')
    owner_id: conint(ge=1) = Field(..., description="Note owner's ID")
    text: Optional[str] = Field(None, description='Note text')
    text_wiki: Optional[str] = Field(None, description='Note text in wiki format')
    title: str = Field(..., description='Note title')
    view_url: AnyUrl = Field(..., description='URL of the page with note preview')
    privacy_view: Optional[List[str]] = None
    privacy_comment: Optional[List[str]] = None


class NotesNoteComment(BaseModel):
    class Config:
        extra = Extra.forbid

    date: int = Field(
        ..., description='Date when the comment has beed added in Unixtime'
    )
    id: int = Field(..., description='Comment ID')
    message: str = Field(..., description='Comment text')
    nid: int = Field(..., description='Note ID')
    oid: int = Field(..., description='Note ID')
    reply_to: Optional[int] = Field(None, description='ID of replied comment ')
    uid: int = Field(..., description="Comment author's ID")


class NotificationsReply(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[int] = Field(
        None, description='Date when the reply has been created in Unixtime'
    )
    id: Optional[int] = Field(None, description='Reply ID')
    text: Optional[int] = Field(None, description='Reply text')


class Type3(Enum):
    place = 'place'
    point = 'point'


class WallGeo(BaseModel):
    class Config:
        extra = Extra.forbid

    coordinates: Optional[str] = Field(
        None, description='Coordinates as string. <latitude> <longtitude>'
    )
    place: Optional[BasePlace] = None
    showmap: Optional[int] = Field(
        None, description='Information whether a map is showed'
    )
    type: Optional[Type3] = Field(None, description='Place type')


class Code(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4


class NotificationsSendMessageError(BaseModel):
    class Config:
        extra = Extra.forbid

    code: Optional[Code] = Field(None, description='Error code')
    description: Optional[str] = Field(None, description='Error description')


class NotificationsSendMessageItem(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[int] = Field(None, description='User ID')
    status: Optional[bool] = Field(None, description='Notification status')
    error: Optional[NotificationsSendMessageError] = None


class OauthError(BaseModel):
    class Config:
        extra = Extra.forbid

    error: str = Field(..., description='Error type')
    error_description: str = Field(..., description='Error description')
    redirect_uri: Optional[str] = Field(None, description='URI for validation')


class OrdersAmountItem(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: Optional[float] = Field(None, description="Votes amount in user's currency")
    description: Optional[str] = Field(None, description='Amount description')
    votes: Optional[str] = Field(None, description='Votes number')


class Status5(Enum):
    created = 'created'
    charged = 'charged'
    refunded = 'refunded'
    chargeable = 'chargeable'
    cancelled = 'cancelled'
    declined = 'declined'


class OrdersOrder(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: str = Field(..., description='Amount')
    app_order_id: str = Field(..., description='App order ID')
    cancel_transaction_id: Optional[str] = Field(
        None, description='Cancel transaction ID'
    )
    date: str = Field(..., description='Date of creation in Unixtime')
    id: str = Field(..., description='Order ID')
    item: str = Field(..., description='Order item')
    receiver_id: str = Field(..., description='Receiver ID')
    status: Status5 = Field(..., description='Order status')
    transaction_id: Optional[str] = Field(None, description='Transaction ID')
    user_id: str = Field(..., description='User ID')


class OrdersSubscription(BaseModel):
    class Config:
        extra = Extra.forbid

    cancel_reason: Optional[str] = Field(None, description='Cancel reason')
    create_time: int = Field(..., description='Date of creation in Unixtime')
    id: int = Field(..., description='Subscription ID')
    item_id: str = Field(..., description='Subscription order item')
    next_bill_time: Optional[int] = Field(
        None, description='Date of next bill in Unixtime'
    )
    expire_time: Optional[int] = Field(
        None, description='Subscription expiration time in Unixtime'
    )
    pending_cancel: Optional[bool] = Field(None, description='Pending cancel state')
    period: int = Field(..., description='Subscription period')
    period_start_time: int = Field(
        ..., description='Date of last period start in Unixtime'
    )
    price: int = Field(..., description='Subscription price')
    title: Optional[str] = Field(None, description='Subscription name')
    app_id: Optional[int] = Field(None, description="Subscription's application id")
    application_name: Optional[str] = Field(
        None, description="Subscription's application name"
    )
    photo_url: Optional[str] = Field(None, description='Item photo image url')
    status: str = Field(..., description='Subscription status')
    test_mode: Optional[bool] = Field(None, description='Is test subscription')
    trial_expire_time: Optional[int] = Field(
        None, description='Date of trial expire in Unixtime'
    )
    update_time: int = Field(..., description='Date of last change in Unixtime')


class State(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5


class OwnerState(BaseModel):
    class Config:
        extra = Extra.forbid

    state: Optional[State] = None
    description: Optional[str] = Field(
        None, description='wiki text to describe user state'
    )


class PagesPrivacySettings(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class PagesWikipage(BaseModel):
    class Config:
        extra = Extra.forbid

    creator_id: Optional[int] = Field(None, description='Page creator ID')
    creator_name: Optional[int] = Field(None, description='Page creator name')
    editor_id: Optional[int] = Field(None, description='Last editor ID')
    editor_name: Optional[str] = Field(None, description='Last editor name')
    group_id: conint(ge=1) = Field(..., description='Community ID')
    id: conint(ge=1) = Field(..., description='Page ID')
    title: str = Field(..., description='Page title')
    views: int = Field(..., description='Views number')
    who_can_edit: PagesPrivacySettings = Field(
        ..., description='Edit settings of the page'
    )
    who_can_view: PagesPrivacySettings = Field(
        ..., description='View settings of the page'
    )


class PagesWikipageFull(BaseModel):
    class Config:
        extra = Extra.forbid

    created: int = Field(
        ..., description='Date when the page has been created in Unixtime'
    )
    creator_id: Optional[int] = Field(None, description='Page creator ID')
    current_user_can_edit: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can edit the page'
    )
    current_user_can_edit_access: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can edit the page access settings',
    )
    edited: int = Field(
        ..., description='Date when the page has been edited in Unixtime'
    )
    editor_id: Optional[int] = Field(None, description='Last editor ID')
    group_id: conint(ge=1) = Field(..., description='Community ID')
    html: Optional[str] = Field(None, description='Page content, HTML')
    id: conint(ge=1) = Field(..., description='Page ID')
    source: Optional[str] = Field(None, description='Page content, wiki')
    title: str = Field(..., description='Page title')
    view_url: AnyUrl = Field(..., description='URL of the page preview')
    views: int = Field(..., description='Views number')
    who_can_edit: PagesPrivacySettings = Field(
        ..., description='Edit settings of the page'
    )
    who_can_view: PagesPrivacySettings = Field(
        ..., description='View settings of the page'
    )
    url: Optional[AnyUrl] = Field(None, description='URL')
    parent: Optional[str] = Field(None, description='Parent')
    parent2: Optional[str] = Field(None, description='Parent2')
    owner_id: Optional[int] = Field(None, description='Owner ID')


class PagesWikipageHistory(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Version ID')
    length: conint(ge=0) = Field(..., description='Page size in bytes')
    date: conint(ge=0) = Field(
        ..., description='Date when the page has been edited in Unixtime'
    )
    editor_id: int = Field(..., description='Last editor ID')
    editor_name: str = Field(..., description='Last editor name')


class PhotosPhotoSizes(BaseModel):
    class Config:
        extra = Extra.forbid

    height: conint(ge=0) = Field(..., description='Height in px')
    url: AnyUrl = Field(..., description='URL of the image')
    src: Optional[AnyUrl] = Field(None, description='URL of the image')
    type: PhotosPhotoSizesType
    width: conint(ge=0) = Field(..., description='Width in px')


class PhotosPhotoFalseable(BaseModel):
    __root__: Union[bool, str]


class PhotosPhotoFullXtrRealOffset(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the photo')
    album_id: int = Field(..., description='Album ID')
    can_comment: Optional[BaseBoolInt] = None
    comments: Optional[BaseObjectCount] = None
    date: conint(ge=0) = Field(..., description='Date when uploaded')
    height: Optional[conint(ge=0)] = Field(None, description='Original photo height')
    hidden: Optional[BasePropertyExists] = Field(
        None, description='Returns if the photo is hidden above the wall'
    )
    id: conint(ge=0) = Field(..., description='Photo ID')
    lat: Optional[float] = Field(None, description='Latitude')
    likes: Optional[BaseLikes] = None
    long: Optional[float] = Field(None, description='Longitude')
    owner_id: int = Field(..., description="Photo owner's ID")
    photo_1280: Optional[AnyUrl] = Field(
        None, description='URL of image with 1280 px width'
    )
    photo_130: Optional[AnyUrl] = Field(
        None, description='URL of image with 130 px width'
    )
    photo_2560: Optional[AnyUrl] = Field(
        None, description='URL of image with 2560 px width'
    )
    photo_604: Optional[AnyUrl] = Field(
        None, description='URL of image with 604 px width'
    )
    photo_75: Optional[AnyUrl] = Field(
        None, description='URL of image with 75 px width'
    )
    photo_807: Optional[AnyUrl] = Field(
        None, description='URL of image with 807 px width'
    )
    post_id: Optional[conint(ge=1)] = Field(None, description='Post ID')
    real_offset: Optional[int] = Field(None, description='Real position of the photo')
    reposts: Optional[BaseObjectCount] = None
    sizes: Optional[List[PhotosPhotoSizes]] = None
    tags: Optional[BaseObjectCount] = None
    text: Optional[str] = Field(None, description='Photo caption')
    user_id: Optional[conint(ge=1)] = Field(
        None, description='ID of the user who have uploaded the photo'
    )
    width: Optional[conint(ge=0)] = Field(None, description='Original photo width')


class PhotosPhotoTag(BaseModel):
    class Config:
        extra = Extra.forbid

    date: conint(ge=0) = Field(
        ..., description='Date when tag has been added in Unixtime'
    )
    id: int = Field(..., description='Tag ID')
    placer_id: int = Field(..., description='ID of the tag creator')
    tagged_name: str = Field(..., description='Tag description')
    description: Optional[str] = Field(None, description='Tagged description.')
    user_id: int = Field(..., description='Tagged user ID')
    viewed: BaseBoolInt = Field(
        ..., description='Information whether the tag is reviewed'
    )
    x: float = Field(..., description='Coordinate X of the left upper corner')
    x2: float = Field(..., description='Coordinate X of the right lower corner')
    y: float = Field(..., description='Coordinate Y of the left upper corner')
    y2: float = Field(..., description='Coordinate Y of the right lower corner')


class PhotosPhotoUpload(BaseModel):
    class Config:
        extra = Extra.forbid

    album_id: int = Field(..., description='Album ID')
    upload_url: AnyUrl = Field(..., description='URL to upload photo')
    fallback_upload_url: Optional[AnyUrl] = Field(
        None, description='Fallback URL if upload_url returned error'
    )
    user_id: int = Field(..., description='User ID')
    group_id: Optional[int] = Field(None, description='Group ID')


class PhotosPhotoXtrRealOffset(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the photo')
    album_id: int = Field(..., description='Album ID')
    date: conint(ge=0) = Field(..., description='Date when uploaded')
    height: Optional[conint(ge=0)] = Field(None, description='Original photo height')
    hidden: Optional[BasePropertyExists] = Field(
        None, description='Returns if the photo is hidden above the wall'
    )
    id: conint(ge=0) = Field(..., description='Photo ID')
    lat: Optional[float] = Field(None, description='Latitude')
    long: Optional[float] = Field(None, description='Longitude')
    owner_id: int = Field(..., description="Photo owner's ID")
    photo_1280: Optional[AnyUrl] = Field(
        None, description='URL of image with 1280 px width'
    )
    photo_130: Optional[AnyUrl] = Field(
        None, description='URL of image with 130 px width'
    )
    photo_2560: Optional[AnyUrl] = Field(
        None, description='URL of image with 2560 px width'
    )
    photo_604: Optional[AnyUrl] = Field(
        None, description='URL of image with 604 px width'
    )
    photo_75: Optional[AnyUrl] = Field(
        None, description='URL of image with 75 px width'
    )
    photo_807: Optional[AnyUrl] = Field(
        None, description='URL of image with 807 px width'
    )
    post_id: Optional[conint(ge=1)] = Field(None, description='Post ID')
    real_offset: Optional[int] = Field(None, description='Real position of the photo')
    sizes: Optional[List[PhotosPhotoSizes]] = None
    text: Optional[str] = Field(None, description='Photo caption')
    user_id: Optional[conint(ge=1)] = Field(
        None, description='ID of the user who have uploaded the photo'
    )
    width: Optional[conint(ge=0)] = Field(None, description='Original photo width')


class PhotosPhotoXtrTagInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the photo')
    album_id: int = Field(..., description='Album ID')
    date: conint(ge=0) = Field(..., description='Date when uploaded')
    height: Optional[conint(ge=0)] = Field(None, description='Original photo height')
    id: conint(ge=0) = Field(..., description='Photo ID')
    lat: Optional[float] = Field(None, description='Latitude')
    long: Optional[float] = Field(None, description='Longitude')
    owner_id: int = Field(..., description="Photo owner's ID")
    photo_1280: Optional[AnyUrl] = Field(
        None, description='URL of image with 1280 px width'
    )
    photo_130: Optional[AnyUrl] = Field(
        None, description='URL of image with 130 px width'
    )
    photo_2560: Optional[AnyUrl] = Field(
        None, description='URL of image with 2560 px width'
    )
    photo_604: Optional[AnyUrl] = Field(
        None, description='URL of image with 604 px width'
    )
    photo_75: Optional[AnyUrl] = Field(
        None, description='URL of image with 75 px width'
    )
    photo_807: Optional[AnyUrl] = Field(
        None, description='URL of image with 807 px width'
    )
    placer_id: Optional[int] = Field(None, description='ID of the tag creator')
    post_id: Optional[conint(ge=1)] = Field(None, description='Post ID')
    sizes: Optional[List[PhotosPhotoSizes]] = None
    tag_created: Optional[conint(ge=0)] = Field(
        None, description='Date when tag has been added in Unixtime'
    )
    tag_id: Optional[int] = Field(None, description='Tag ID')
    text: Optional[str] = Field(None, description='Photo caption')
    user_id: Optional[conint(ge=1)] = Field(
        None, description='ID of the user who have uploaded the photo'
    )
    width: Optional[conint(ge=0)] = Field(None, description='Original photo width')


class Action(Enum):
    confirm = 'confirm'
    decline = 'decline'
    show_tags = 'show_tags'


class Style4(Enum):
    primary = 'primary'
    secondary = 'secondary'


class PhotosTagsSuggestionItemButton(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[str] = None
    action: Optional[Action] = None
    style: Optional[Style4] = None


class PodcastCover(BaseModel):
    class Config:
        extra = Extra.forbid

    sizes: Optional[List[PhotosPhotoSizes]] = None


class PodcastExternalData(BaseModel):
    class Config:
        extra = Extra.forbid

    url: Optional[str] = Field(None, description='Url of the podcast page')
    owner_url: Optional[str] = Field(
        None, description='Url of the podcasts owner community'
    )
    title: Optional[str] = Field(None, description='Podcast title')
    owner_name: Optional[str] = Field(
        None, description='Name of the podcasts owner community'
    )
    cover: Optional[PodcastCover] = Field(None, description='Podcast cover')


class Type4(Enum):
    gradient = 'gradient'
    tile = 'tile'


class PollsBackground(BaseModel):
    class Config:
        extra = Extra.forbid

    angle: Optional[int] = Field(
        None, description='Gradient angle with 0 on positive X axis'
    )
    color: Optional[str] = Field(None, description='Hex color code without #')
    height: Optional[conint(ge=0)] = Field(
        None, description='Original height of pattern tile'
    )
    id: Optional[int] = None
    name: Optional[str] = None
    images: Optional[List[BaseImage]] = Field(None, description='Pattern tiles')
    points: Optional[List[BaseGradientPoint]] = Field(
        None, description='Gradient points'
    )
    type: Optional[Type4] = None
    width: Optional[conint(ge=0)] = Field(
        None, description='Original with of pattern tile'
    )


class PollsFriend(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)


class PollsPollAnonymous(BaseModel):
    __root__: bool = Field(
        ..., description='Information whether the field is anonymous'
    )


class PollsVotersUsers(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Votes number')
    items: Optional[List[int]] = None


class PrettyCardsPrettyCard(BaseModel):
    class Config:
        extra = Extra.forbid

    button: Optional[str] = Field(None, description='Button key')
    button_text: Optional[str] = Field(
        None, description='Button text in current language'
    )
    card_id: str = Field(..., description='Card ID (long int returned as string)')
    images: Optional[List[BaseImage]] = None
    link_url: str = Field(..., description='Link URL')
    photo: str = Field(..., description='Photo ID (format "<owner_id>_<media_id>")')
    price: Optional[str] = Field(
        None, description='Price if set (decimal number returned as string)'
    )
    price_old: Optional[str] = Field(
        None, description='Old price if set (decimal number returned as string)'
    )
    title: str = Field(..., description='Title')


class SearchHintSection(Enum):
    groups = 'groups'
    events = 'events'
    publics = 'publics'
    correspondents = 'correspondents'
    people = 'people'
    friends = 'friends'
    mutual_friends = 'mutual_friends'
    promo = 'promo'


class SearchHintType(Enum):
    group = 'group'
    profile = 'profile'
    vk_app = 'vk_app'
    app = 'app'
    html5_game = 'html5_game'
    link = 'link'


class SecureGiveEventStickerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: Optional[int] = None
    status: Optional[str] = None


class SecureLevel(BaseModel):
    class Config:
        extra = Extra.forbid

    level: Optional[int] = Field(None, description='Level')
    uid: Optional[int] = Field(None, description='User ID')


class SecureSmsNotification(BaseModel):
    class Config:
        extra = Extra.forbid

    app_id: Optional[str] = Field(None, description='Application ID')
    date: Optional[str] = Field(
        None, description='Date when message has been sent in Unixtime'
    )
    id: Optional[str] = Field(None, description='Notification ID')
    message: Optional[str] = Field(None, description='Messsage text')
    user_id: Optional[str] = Field(None, description='User ID')


class SecureTokenChecked(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[int] = Field(
        None, description='Date when access_token has been generated in Unixtime'
    )
    expire: Optional[int] = Field(
        None, description='Date when access_token will expire in Unixtime'
    )
    success: Optional[int] = Field(1, description='Returns if successfully processed')
    user_id: Optional[int] = Field(None, description='User ID')


class SecureTransaction(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[int] = Field(None, description='Transaction date in Unixtime')
    id: Optional[int] = Field(None, description='Transaction ID')
    uid_from: Optional[int] = Field(None, description='From ID')
    uid_to: Optional[int] = Field(None, description='To ID')
    votes: Optional[int] = Field(None, description='Votes number')


class StatsActivity(BaseModel):
    class Config:
        extra = Extra.forbid

    comments: Optional[conint(ge=0)] = Field(None, description='Comments number')
    copies: Optional[conint(ge=0)] = Field(None, description='Reposts number')
    hidden: Optional[conint(ge=0)] = Field(None, description='Hidden from news count')
    likes: Optional[conint(ge=0)] = Field(None, description='Likes number')
    subscribed: Optional[conint(ge=0)] = Field(
        None, description='New subscribers count'
    )
    unsubscribed: Optional[conint(ge=0)] = Field(None, description='Unsubscribed count')


class StatsCity(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Visitors number')
    name: Optional[str] = Field(None, description='City name')
    value: Optional[int] = Field(None, description='City ID')


class StatsCountry(BaseModel):
    class Config:
        extra = Extra.forbid

    code: Optional[str] = Field(None, description='Country code')
    count: Optional[conint(ge=0)] = Field(None, description='Visitors number')
    name: Optional[str] = Field(None, description='Country name')
    value: Optional[int] = Field(None, description='Country ID')


class StatsSexAge(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Visitors number')
    value: str = Field(..., description='Sex/age value')
    reach: Optional[int] = None
    reach_subscribers: Optional[int] = None
    count_subscribers: Optional[int] = None


class StatsViews(BaseModel):
    class Config:
        extra = Extra.forbid

    age: Optional[List[StatsSexAge]] = None
    cities: Optional[List[StatsCity]] = None
    countries: Optional[List[StatsCountry]] = None
    mobile_views: Optional[conint(ge=0)] = Field(
        None, description='Number of views from mobile devices'
    )
    sex: Optional[List[StatsSexAge]] = None
    sex_age: Optional[List[StatsSexAge]] = None
    views: Optional[conint(ge=0)] = Field(None, description='Views number')
    visitors: Optional[conint(ge=0)] = Field(None, description='Visitors number')


class StatsWallpostStat(BaseModel):
    class Config:
        extra = Extra.forbid

    post_id: Optional[int] = None
    hide: Optional[int] = Field(None, description='Hidings number')
    join_group: Optional[int] = Field(None, description='People have joined the group')
    links: Optional[int] = Field(None, description='Link clickthrough')
    reach_subscribers: Optional[int] = Field(None, description='Subscribers reach')
    reach_subscribers_count: Optional[int] = None
    reach_total: Optional[int] = Field(None, description='Total reach')
    reach_total_count: Optional[int] = None
    reach_viral: Optional[int] = None
    reach_ads: Optional[int] = None
    report: Optional[int] = Field(None, description='Reports number')
    to_group: Optional[int] = Field(None, description='Clickthrough to community')
    unsubscribe: Optional[int] = Field(None, description='Unsubscribed members')
    sex_age: Optional[List[StatsSexAge]] = None


class StatusStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    text: str = Field(..., description='Status text')
    audio: Optional[AudioAudio] = None


class StickersImageSet(BaseModel):
    class Config:
        extra = Extra.forbid

    base_url: AnyUrl = Field(..., description='Base URL for images in set')
    version: Optional[int] = Field(
        None, description='Version number to be appended to the image URL'
    )


class StorageValue(BaseModel):
    class Config:
        extra = Extra.forbid

    key: str
    value: str


class Type5(Enum):
    stickers = 'stickers'


class StoreProductIcon(BaseModel):
    __root__: List[BaseImage]


class StoreStickersKeywordStickers(BaseModel):
    __root__: BaseStickersList


class StoreStickersKeywordSticker(BaseModel):
    class Config:
        extra = Extra.forbid

    pack_id: int = Field(..., description='Pack id')
    sticker_id: int = Field(..., description='Sticker id')


class StoriesClickableArea(BaseModel):
    class Config:
        extra = Extra.forbid

    x: int
    y: int


class Style5(Enum):
    transparent = 'transparent'
    blue_gradient = 'blue_gradient'
    red_gradient = 'red_gradient'
    underline = 'underline'
    blue = 'blue'
    green = 'green'
    white = 'white'
    question_reply = 'question_reply'
    light = 'light'
    impressive = 'impressive'


class Type6(Enum):
    hashtag = 'hashtag'
    mention = 'mention'
    link = 'link'
    question = 'question'
    place = 'place'
    market_item = 'market_item'
    music = 'music'
    story_reply = 'story_reply'
    owner = 'owner'
    post = 'post'
    poll = 'poll'
    sticker = 'sticker'
    app = 'app'
    situational_theme = 'situational_theme'


class Subtype(Enum):
    market_item = 'market_item'
    aliexpress_product = 'aliexpress_product'


class Type7(Enum):
    promo_stories = 'promo_stories'
    stories = 'stories'
    live_active = 'live_active'
    live_finished = 'live_finished'
    community_grouped_stories = 'community_grouped_stories'
    app_grouped_stories = 'app_grouped_stories'
    birthday = 'birthday'


class StoriesStoryLink(BaseModel):
    class Config:
        extra = Extra.forbid

    text: str = Field(..., description='Link text')
    url: AnyUrl = Field(..., description='Link URL')


class StoriesPromoBlock(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(..., description='Promo story title')
    photo_50: str = Field(
        ..., description='RL of square photo of the story with 50 pixels in width'
    )
    photo_100: str = Field(
        ..., description='RL of square photo of the story with 100 pixels in width'
    )
    not_animated: bool = Field(..., description='Hide animation for promo story')


class StoriesReplies(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Replies number.')
    new: Optional[int] = Field(None, description='New replies number.')


class StoriesStatLine(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    counter: Optional[conint(ge=0)] = None
    is_unavailable: Optional[bool] = None


class StoriesStoryStatsState(Enum):
    on = 'on'
    off = 'off'
    hidden = 'hidden'


class StoriesStoryType(Enum):
    photo = 'photo'
    video = 'video'
    live_active = 'live_active'
    live_finished = 'live_finished'
    birthday_invite = 'birthday_invite'


class StoriesUploadLinkText(Enum):
    to_store = 'to_store'
    vote = 'vote'
    more = 'more'
    book = 'book'
    order = 'order'
    enroll = 'enroll'
    fill = 'fill'
    signup = 'signup'
    buy = 'buy'
    ticket = 'ticket'
    write = 'write'
    open = 'open'
    learn_more = 'learn_more'
    view = 'view'
    go_to = 'go_to'
    contact = 'contact'
    watch = 'watch'
    play = 'play'
    install = 'install'
    read = 'read'
    calendar = 'calendar'


class UsersCareer(BaseModel):
    class Config:
        extra = Extra.forbid

    city_id: Optional[int] = Field(None, description='City ID')
    city_name: Optional[str] = Field(None, description='City name')
    company: Optional[str] = Field(None, description='Company name')
    country_id: Optional[int] = Field(None, description='Country ID')
    from_: Optional[int] = Field(None, alias='from', description='From year')
    group_id: Optional[int] = Field(None, description='Community ID')
    id: Optional[int] = Field(None, description='Career ID')
    position: Optional[str] = Field(None, description='Position')
    until: Optional[int] = Field(None, description='Till year')


class UsersExports(BaseModel):
    class Config:
        extra = Extra.forbid

    facebook: Optional[int] = None
    livejournal: Optional[int] = None
    twitter: Optional[int] = None


class UsersFields(Enum):
    first_name_nom = 'first_name_nom'
    first_name_gen = 'first_name_gen'
    first_name_dat = 'first_name_dat'
    first_name_acc = 'first_name_acc'
    first_name_ins = 'first_name_ins'
    first_name_abl = 'first_name_abl'
    last_name_nom = 'last_name_nom'
    last_name_gen = 'last_name_gen'
    last_name_dat = 'last_name_dat'
    last_name_acc = 'last_name_acc'
    last_name_ins = 'last_name_ins'
    last_name_abl = 'last_name_abl'
    photo_id = 'photo_id'
    verified = 'verified'
    sex = 'sex'
    bdate = 'bdate'
    city = 'city'
    country = 'country'
    home_town = 'home_town'
    has_photo = 'has_photo'
    photo = 'photo'
    photo_rec = 'photo_rec'
    photo_50 = 'photo_50'
    photo_100 = 'photo_100'
    photo_200_orig = 'photo_200_orig'
    photo_200 = 'photo_200'
    photo_400 = 'photo_400'
    photo_400_orig = 'photo_400_orig'
    photo_big = 'photo_big'
    photo_medium = 'photo_medium'
    photo_medium_rec = 'photo_medium_rec'
    photo_max = 'photo_max'
    photo_max_orig = 'photo_max_orig'
    photo_max_size = 'photo_max_size'
    third_party_buttons = 'third_party_buttons'
    online = 'online'
    lists = 'lists'
    domain = 'domain'
    has_mobile = 'has_mobile'
    contacts = 'contacts'
    language = 'language'
    site = 'site'
    education = 'education'
    universities = 'universities'
    schools = 'schools'
    status = 'status'
    last_seen = 'last_seen'
    followers_count = 'followers_count'
    counters = 'counters'
    common_count = 'common_count'
    online_info = 'online_info'
    occupation = 'occupation'
    nickname = 'nickname'
    relatives = 'relatives'
    relation = 'relation'
    personal = 'personal'
    connections = 'connections'
    exports = 'exports'
    wall_comments = 'wall_comments'
    wall_default = 'wall_default'
    activities = 'activities'
    activity = 'activity'
    interests = 'interests'
    music = 'music'
    movies = 'movies'
    tv = 'tv'
    books = 'books'
    is_no_index = 'is_no_index'
    games = 'games'
    about = 'about'
    quotes = 'quotes'
    can_post = 'can_post'
    can_see_all_posts = 'can_see_all_posts'
    can_see_audio = 'can_see_audio'
    can_see_gifts = 'can_see_gifts'
    work = 'work'
    places = 'places'
    can_write_private_message = 'can_write_private_message'
    can_send_friend_request = 'can_send_friend_request'
    can_upload_doc = 'can_upload_doc'
    is_favorite = 'is_favorite'
    is_hidden_from_feed = 'is_hidden_from_feed'
    timezone = 'timezone'
    screen_name = 'screen_name'
    maiden_name = 'maiden_name'
    crop_photo = 'crop_photo'
    is_friend = 'is_friend'
    friend_status = 'friend_status'
    career = 'career'
    military = 'military'
    blacklisted = 'blacklisted'
    blacklisted_by_me = 'blacklisted_by_me'
    can_subscribe_posts = 'can_subscribe_posts'
    descriptions = 'descriptions'
    trending = 'trending'
    mutual = 'mutual'
    friendship_weeks = 'friendship_weeks'
    can_invite_to_chats = 'can_invite_to_chats'
    stories_archive_count = 'stories_archive_count'
    has_unseen_stories = 'has_unseen_stories'
    video_live = 'video_live'
    video_live_level = 'video_live_level'
    video_live_count = 'video_live_count'
    clips_count = 'clips_count'
    service_description = 'service_description'
    can_see_wishes = 'can_see_wishes'
    is_subscribed_podcasts = 'is_subscribed_podcasts'
    can_subscribe_podcasts = 'can_subscribe_podcasts'


class UsersLastSeen(BaseModel):
    class Config:
        extra = Extra.forbid

    platform: Optional[int] = Field(
        None, description='Type of the platform that used for the last authorization'
    )
    time: Optional[int] = Field(None, description='Last visit date (in Unix time)')


class UsersMilitary(BaseModel):
    class Config:
        extra = Extra.forbid

    country_id: int = Field(..., description='Country ID')
    from_: Optional[int] = Field(None, alias='from', description='From year')
    id: Optional[int] = Field(None, description='Military ID')
    unit: str = Field(..., description='Unit name')
    unit_id: int = Field(..., description='Unit ID')
    until: Optional[int] = Field(None, description='Till year')


class UsersOccupation(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[conint(ge=0)] = Field(
        None, description='ID of school, university, company group'
    )
    name: Optional[str] = Field(None, description='Name of occupation')
    type: Optional[str] = Field(None, description='Type of occupation')


class UsersPersonal(BaseModel):
    class Config:
        extra = Extra.forbid

    alcohol: Optional[int] = Field(None, description="User's views on alcohol")
    inspired_by: Optional[str] = Field(None, description="User's inspired by")
    langs: Optional[List[str]] = None
    life_main: Optional[int] = Field(
        None, description="User's personal priority in life"
    )
    people_main: Optional[int] = Field(
        None, description="User's personal priority in people"
    )
    political: Optional[int] = Field(None, description="User's political views")
    religion: Optional[str] = Field(None, description="User's religion")
    religion_id: Optional[int] = Field(None, description="User's religion id")
    smoking: Optional[int] = Field(None, description="User's views on smoking")


class Type8(Enum):
    parent = 'parent'
    child = 'child'
    grandparent = 'grandparent'
    grandchild = 'grandchild'
    sibling = 'sibling'


class UsersRelative(BaseModel):
    class Config:
        extra = Extra.forbid

    birth_date: Optional[str] = Field(
        None, description='Date of child birthday (format dd.mm.yyyy)'
    )
    id: Optional[int] = Field(None, description='Relative ID')
    name: Optional[str] = Field(None, description='Name of relative')
    type: Type8 = Field(..., description='Relative type')


class UsersSchool(BaseModel):
    class Config:
        extra = Extra.forbid

    city: Optional[int] = Field(None, description='City ID')
    class_: Optional[str] = Field(
        None, alias='class', description='School class letter'
    )
    country: Optional[int] = Field(None, description='Country ID')
    id: Optional[str] = Field(None, description='School ID')
    name: Optional[str] = Field(None, description='School name')
    type: Optional[int] = Field(None, description='School type ID')
    type_str: Optional[str] = Field(None, description='School type name')
    year_from: Optional[int] = Field(None, description='Year the user started to study')
    year_graduated: Optional[int] = Field(None, description='Graduation year')
    year_to: Optional[int] = Field(None, description='Year the user finished to study')
    speciality: Optional[str] = None


class UsersUniversity(BaseModel):
    class Config:
        extra = Extra.forbid

    chair: Optional[int] = Field(None, description='Chair ID')
    chair_name: Optional[str] = Field(None, description='Chair name')
    city: Optional[int] = Field(None, description='City ID')
    country: Optional[int] = Field(None, description='Country ID')
    education_form: Optional[str] = Field(None, description='Education form')
    education_status: Optional[str] = Field(None, description='Education status')
    faculty: Optional[int] = Field(None, description='Faculty ID')
    faculty_name: Optional[str] = Field(None, description='Faculty name')
    graduation: Optional[int] = Field(None, description='Graduation year')
    id: Optional[int] = Field(None, description='University ID')
    name: Optional[str] = Field(None, description='University name')
    university_group_id: Optional[int] = None


class UsersUserConnections(BaseModel):
    class Config:
        extra = Extra.forbid

    skype: str = Field(..., description="User's Skype nickname")
    facebook: str = Field(..., description="User's Facebook account")
    facebook_name: Optional[str] = Field(None, description="User's Facebook name")
    twitter: str = Field(..., description="User's Twitter account")
    livejournal: Optional[str] = Field(None, description="User's Livejournal account")
    instagram: str = Field(..., description="User's Instagram account")


class UsersUserCounters(BaseModel):
    class Config:
        extra = Extra.forbid

    albums: Optional[int] = Field(None, description='Albums number')
    badges: Optional[int] = Field(None, description='Badges number')
    audios: Optional[int] = Field(None, description='Audios number')
    followers: Optional[int] = Field(None, description='Followers number')
    friends: Optional[int] = Field(None, description='Friends number')
    gifts: Optional[int] = Field(None, description='Gifts number')
    groups: Optional[int] = Field(None, description='Communities number')
    notes: Optional[int] = Field(None, description='Notes number')
    online_friends: Optional[int] = Field(None, description='Online friends number')
    pages: Optional[int] = Field(None, description='Public pages number')
    photos: Optional[int] = Field(None, description='Photos number')
    subscriptions: Optional[int] = Field(None, description='Subscriptions number')
    user_photos: Optional[int] = Field(None, description='Number of photos with user')
    user_videos: Optional[int] = Field(None, description='Number of videos with user')
    videos: Optional[int] = Field(None, description='Videos number')
    new_photo_tags: Optional[int] = None
    new_recognition_tags: Optional[int] = None
    mutual_friends: Optional[int] = None
    posts: Optional[int] = None
    articles: Optional[int] = None
    wishes: Optional[int] = None
    podcasts: Optional[int] = None
    clips: Optional[int] = None
    clips_followers: Optional[int] = None


class UsersUserRelation(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8


class UsersUsersArray(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Users number')
    items: List[int]


class UtilsDomainResolvedType(Enum):
    user = 'user'
    group = 'group'
    application = 'application'
    page = 'page'
    vk_app = 'vk_app'
    community_application = 'community_application'


class UtilsLastShortenedLink(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for private stats')
    key: Optional[str] = Field(None, description='Link key (characters after vk.cc/)')
    short_url: Optional[AnyUrl] = Field(None, description='Short link URL')
    timestamp: Optional[int] = Field(None, description='Creation time in Unixtime')
    url: Optional[AnyUrl] = Field(None, description='Full URL')
    views: Optional[int] = Field(None, description='Total views number')


class UtilsLinkCheckedStatus(Enum):
    not_banned = 'not_banned'
    banned = 'banned'
    processing = 'processing'


class UtilsStats(BaseModel):
    class Config:
        extra = Extra.forbid

    timestamp: Optional[int] = Field(None, description='Start time')
    views: Optional[int] = Field(None, description='Total views number')


class UtilsStatsCity(BaseModel):
    class Config:
        extra = Extra.forbid

    city_id: Optional[int] = Field(None, description='City ID')
    views: Optional[int] = Field(None, description='Views number')


class UtilsShortLink(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for private stats')
    key: Optional[str] = Field(None, description='Link key (characters after vk.cc/)')
    short_url: Optional[AnyUrl] = Field(None, description='Short link URL')
    url: Optional[AnyUrl] = Field(None, description='Full URL')


class UtilsStatsCountry(BaseModel):
    class Config:
        extra = Extra.forbid

    country_id: Optional[int] = Field(None, description='Country ID')
    views: Optional[int] = Field(None, description='Views number')


class UtilsStatsSexAge(BaseModel):
    class Config:
        extra = Extra.forbid

    age_range: Optional[str] = Field(None, description='Age denotation')
    female: Optional[int] = Field(None, description=' Views by female users')
    male: Optional[int] = Field(None, description=' Views by male users')


class VideoLiveInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: BaseBoolInt
    is_notifications_blocked: Optional[BaseBoolInt] = None


class VideoLiveSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    can_rewind: Optional[BaseBoolInt] = Field(
        None, description='If user car rewind live or not'
    )
    is_endless: Optional[BaseBoolInt] = Field(
        None, description='If live is endless or not'
    )
    max_duration: Optional[int] = Field(
        None, description='Max possible time for rewind'
    )


class VideoSaveResult(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Video access key')
    description: Optional[str] = Field(None, description='Video description')
    owner_id: Optional[int] = Field(None, description='Video owner ID')
    title: Optional[str] = Field(None, description='Video title')
    upload_url: Optional[AnyUrl] = Field(
        None, description='URL for the video uploading'
    )
    video_id: Optional[int] = Field(None, description='Video ID')


class VideoVideoAlbum(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Album ID')
    owner_id: int = Field(..., description="Album owner's ID")
    title: str = Field(..., description='Album title')


class VideoVideoAlbumFull(VideoVideoAlbum):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number of videos in album')
    image: Optional[List[VideoVideoImage]] = Field(
        None, description='Album cover image in different sizes'
    )
    image_blur: Optional[BasePropertyExists] = Field(
        None, description='Need blur album thumb or not'
    )
    is_system: Optional[BasePropertyExists] = Field(
        None, description='Information whether album is system'
    )
    updated_time: conint(ge=0) = Field(
        ..., description='Date when the album has been updated last time in Unixtime'
    )


class VideoVideoFiles(BaseModel):
    class Config:
        extra = Extra.forbid

    external: Optional[AnyUrl] = Field(None, description='URL of the external player')
    mp4_240: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 240p quality'
    )
    mp4_360: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 360p quality'
    )
    mp4_480: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 480p quality'
    )
    mp4_720: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 720p quality'
    )
    mp4_1080: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 1080p quality'
    )
    mp4_1440: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 2K quality'
    )
    mp4_2160: Optional[AnyUrl] = Field(
        None, description='URL of the mpeg4 file with 4K quality'
    )
    flv_320: Optional[AnyUrl] = Field(
        None, description='URL of the flv file with 320p quality'
    )


class WallAppPost(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Application ID')
    name: Optional[str] = Field(None, description='Application name')
    photo_130: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 130 px in width'
    )
    photo_604: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 604 px in width'
    )


class WallAttachedNote(BaseModel):
    class Config:
        extra = Extra.forbid

    comments: conint(ge=0) = Field(..., description='Comments number')
    date: conint(ge=0) = Field(
        ..., description='Date when the note has been created in Unixtime'
    )
    id: conint(ge=1) = Field(..., description='Note ID')
    owner_id: conint(ge=1) = Field(..., description="Note owner's ID")
    read_comments: conint(ge=0) = Field(..., description='Read comments number')
    title: str = Field(..., description='Note title')
    text: Optional[str] = Field(None, description='Note text')
    privacy_view: Optional[List[str]] = None
    privacy_comment: Optional[List[str]] = None
    can_comment: Optional[int] = None
    text_wiki: Optional[str] = Field(None, description='Note wiki text')
    view_url: AnyUrl = Field(..., description='URL of the page with note preview')


class WallCommentAttachmentType(Enum):
    photo = 'photo'
    audio = 'audio'
    video = 'video'
    doc = 'doc'
    link = 'link'
    note = 'note'
    page = 'page'
    market_market_album = 'market_market_album'
    market = 'market'
    sticker = 'sticker'


class WallGetFilter(Enum):
    owner = 'owner'
    others = 'others'
    all = 'all'
    postponed = 'postponed'
    suggests = 'suggests'
    archived = 'archived'
    donut = 'donut'


class WallGraffiti(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Graffiti ID')
    owner_id: Optional[int] = Field(None, description="Graffiti owner's ID")
    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 200 px in width'
    )
    photo_586: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 586 px in width'
    )
    height: Optional[conint(ge=0)] = Field(None, description='Graffiti height')
    url: Optional[AnyUrl] = Field(None, description='Graffiti URL')
    width: Optional[conint(ge=0)] = Field(None, description='Graffiti width')
    access_key: Optional[str] = Field(None, description='Access key for graffiti')


class WallPostCopyright(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = None
    link: str
    name: str
    type: str


class WallPostSourceType(Enum):
    vk = 'vk'
    widget = 'widget'
    api = 'api'
    rss = 'rss'
    sms = 'sms'
    mvk = 'mvk'


class WallPostType(Enum):
    post = 'post'
    copy = 'copy'
    reply = 'reply'
    postpone = 'postpone'
    suggest = 'suggest'
    post_ads = 'post_ads'
    photo = 'photo'
    video = 'video'


class WallPostedPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Photo ID')
    owner_id: Optional[int] = Field(None, description="Photo owner's ID")
    photo_130: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 130 px in width'
    )
    photo_604: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 604 px in width'
    )


class WallViews(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Count')


class WallWallpostAttachmentType(Enum):
    photo = 'photo'
    photos_list = 'photos_list'
    posted_photo = 'posted_photo'
    audio = 'audio'
    audio_playlist = 'audio_playlist'
    video = 'video'
    doc = 'doc'
    link = 'link'
    graffiti = 'graffiti'
    note = 'note'
    app = 'app'
    poll = 'poll'
    page = 'page'
    album = 'album'
    market_album = 'market_album'
    market = 'market'
    event = 'event'
    donut_link = 'donut_link'
    article = 'article'
    textlive = 'textlive'
    textpost = 'textpost'
    textpost_publish = 'textpost_publish'
    situational_theme = 'situational_theme'
    group = 'group'
    sticker = 'sticker'
    podcast = 'podcast'


class EditMode(Enum):
    all = 'all'
    duration = 'duration'


class WallWallpostDonutPlaceholder(BaseModel):
    class Config:
        extra = Extra.forbid

    text: str


class WidgetsCommentMediaType(Enum):
    audio = 'audio'
    photo = 'photo'
    video = 'video'


class WidgetsWidgetLikes(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Likes number')


class WidgetsWidgetPage(BaseModel):
    class Config:
        extra = Extra.forbid

    comments: Optional[BaseObjectCount] = None
    date: Optional[int] = Field(
        None,
        description='Date when widgets on the page has been initialized firstly in Unixtime',
    )
    description: Optional[str] = Field(None, description='Page description')
    id: Optional[int] = Field(None, description='Page ID')
    likes: Optional[BaseObjectCount] = None
    page_id: Optional[str] = Field(None, description='page_id parameter value')
    photo: Optional[AnyUrl] = Field(None, description='URL of the preview image')
    title: Optional[str] = Field(None, description='Page title')
    url: Optional[AnyUrl] = Field(None, description='Page absolute URL')


class AccountGetAppPermissionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Permissions mask')


class AccountGetCountersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AccountAccountCounters


class AdsAddOfficeUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: bool = Field(..., description='true if success')


class AdsCheckLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AdsLinkStatus


class AdsCreateAdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class AdsCreateCampaignsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class AdsCreateClientsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class Response4(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Group ID')
    pixel: Optional[str] = Field(None, description='Pixel code')


class AdsCreateTargetGroupResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response4


class AdsDeleteAdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class AdsDeleteCampaignsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='0 if success')


class AdsDeleteClientsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='0 if sucess')


class AdsGetAdsLayoutResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsAdLayout]


class AdsGetBudgetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Budget')


class AdsGetClientsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsClient]


class AdsGetFloodStatsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AdsFloodStats


class Response7(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[AdsMusician] = Field(..., description='Musicians')


class AdsGetMusiciansResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response7


class AdsGetOfficeUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsUsers]


class AdsGetPostsReachResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsPromotedPostReach]


class AdsGetSuggestionsCitiesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargSuggestionsCities]


class AdsGetSuggestionsRegionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargSuggestionsRegions]


class AdsGetSuggestionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargSuggestions]


class AdsGetTargetGroupsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargetGroup]


class AdsGetTargetingStatsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AdsTargStats


class AdsGetUploadURLResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: str = Field(..., description='Photo upload URL')


class AdsGetVideoUploadURLResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: str = Field(..., description='Video upload URL')


class AdsImportTargetContactsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Imported contacts number')


class AdsRemoveOfficeUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: bool = Field(..., description='true if success')


class AdsUpdateAdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class AdsUpdateCampaignsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Campaign ID')


class AdsUpdateClientsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Client ID')


class Response8(BaseModel):
    class Config:
        extra = Extra.forbid

    categories: List[AdswebGetAdCategoriesResponseCategoriesCategory]


class AdswebGetAdCategoriesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response8


class Response9(BaseModel):
    class Config:
        extra = Extra.forbid

    html: str


class AdswebGetAdUnitCodeResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response9


class Response10(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int
    ad_units: Optional[List[AdswebGetAdUnitsResponseAdUnitsAdUnit]] = None


class AdswebGetAdUnitsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response10


class Response11(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int
    entries: Optional[List[AdswebGetFraudHistoryResponseEntriesEntry]] = None


class AdswebGetFraudHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response11


class Response12(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int
    sites: Optional[List[AdswebGetSitesResponseSitesSite]] = None


class AdswebGetSitesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response12


class Response13(BaseModel):
    class Config:
        extra = Extra.forbid

    next_page_id: Optional[str] = None
    items: List[AdswebGetStatisticsResponseItemsItem]


class AdswebGetStatisticsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response13


class Response14(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_url: Optional[str] = Field(
        None,
        description='To upload an image, generate POST-request to upload_url with a file in photo field. Then call appWidgets.saveAppImage method',
    )


class AppWidgetsGetAppImageUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response14


class Response15(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_url: Optional[str] = Field(
        None,
        description='To upload an image, generate POST-request to upload_url with a file in photo field. Then call appWidgets.saveAppImage method',
    )


class AppWidgetsGetGroupImageUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response15


class Response17(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[AppsLeaderboard]] = None
    profiles: Optional[List[UsersUserMin]] = None


class AppsGetLeaderboardExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response17


class Response18(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[AppsLeaderboard]] = None


class AppsGetLeaderboardResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response18


class Response19(BaseModel):
    class Config:
        extra = Extra.forbid

    privacy_policy: Optional[AnyUrl] = Field(
        None, description="URL of the app's privacy policy"
    )
    terms: Optional[AnyUrl] = Field(None, description="URL of the app's terms")


class AppsGetMiniAppPoliciesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response19


class Response20(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[AppsScope]


class AppsGetScopesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response20


class AppsGetScoreResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Score number')


class Response22(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[str] = Field(None, description='Uploading hash')
    image: Optional[str] = Field(None, description='Uploaded photo data')


class AppsImageUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response22


class AppsSendRequestResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Request ID')


class Success(Enum):
    integer_1 = 1


class Response23(BaseModel):
    class Config:
        extra = Extra.forbid

    success: Optional[Success] = Field(None, description='1 if success')
    sid: Optional[str] = Field(
        None, description='Parameter needed to grant access by code'
    )


class AuthRestoreResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response23


class BaseBoolResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt


class BaseGetUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseUploadServer


class Response24(Enum):
    integer_1 = 1


class BaseOkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response24


class BoardAddTopicResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Topic ID')


class BoardCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Comment ID')


class Response27(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[BoardTopic]
    default_order: BoardDefaultOrder
    can_add_topics: BaseBoolInt = Field(
        ..., description='Information whether current user can add topic'
    )
    profiles: List[UsersUserMin]


class BoardGetTopicsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response27


class Response28(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[BoardTopic]
    default_order: BoardDefaultOrder
    can_add_topics: BaseBoolInt = Field(
        ..., description='Information whether current user can add topic'
    )


class BoardGetTopicsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response28


class Response29(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[BaseObject]] = None


class DatabaseGetChairsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response29


class DatabaseGetCitiesByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[BaseObject]


class Response30(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseCity]] = None


class DatabaseGetCitiesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response30


class DatabaseGetCountriesByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[BaseCountry]


class Response31(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[BaseCountry]] = None


class DatabaseGetCountriesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response31


class Response32(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseFaculty]] = None


class DatabaseGetFacultiesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response32


class DatabaseGetMetroStationsByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[DatabaseStation]


class Response33(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseStation]] = None


class DatabaseGetMetroStationsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response33


class Response34(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseRegion]] = None


class DatabaseGetRegionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response34


class DatabaseGetSchoolClassesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[List[Union[str, int]]]


class Response35(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseSchool]] = None


class DatabaseGetSchoolsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response35


class Response36(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DatabaseUniversity]] = None


class DatabaseGetUniversitiesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response36


class DocsAddResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Document ID')


class Response37(BaseModel):
    class Config:
        extra = Extra.forbid

    file: Optional[str] = Field(None, description='Uploaded file data')


class DocsDocUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response37


class Response38(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[DocsDocTypes]] = None


class DocsGetTypesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response38


class DocsGetUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseUploadServer


class DonutGetSubscriptionResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: DonutDonatorSubscriptionInfo


class Response43(BaseModel):
    class Config:
        extra = Extra.forbid

    is_paid: bool = Field(..., description='Game has been paid')


class DownloadedGamesPaidStatusResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response43


class FaveAddTagResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: FaveTag


class Response45(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = None
    items: Optional[List[FaveTag]] = None


class FaveGetTagsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response45


class Response48(BaseModel):
    class Config:
        extra = Extra.forbid

    list_id: conint(ge=1) = Field(..., description='List ID')


class FriendsAddListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response48


class Response49(Enum):
    integer_1 = 1
    integer_2 = 2
    integer_4 = 4


class FriendsAddResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response49 = Field(..., description='Friend request status')


class FriendDeleted(Enum):
    integer_1 = 1


class OutRequestDeleted(Enum):
    integer_1 = 1


class InRequestDeleted(Enum):
    integer_1 = 1


class SuggestionDeleted(Enum):
    integer_1 = 1


class Response50(BaseModel):
    class Config:
        extra = Extra.forbid

    success: int
    friend_deleted: Optional[FriendDeleted] = Field(
        None, description='Returns 1 if friend has been deleted'
    )
    out_request_deleted: Optional[OutRequestDeleted] = Field(
        None, description='Returns 1 if out request has been canceled'
    )
    in_request_deleted: Optional[InRequestDeleted] = Field(
        None, description='Returns 1 if incoming request has been declined'
    )
    suggestion_deleted: Optional[SuggestionDeleted] = Field(
        None, description='Returns 1 if suggestion has been declined'
    )


class FriendsDeleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response50


class FriendsGetAppUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[conint(ge=1)]


class Response51(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number of friends lists')
    items: List[FriendsFriendsList]


class FriendsGetListsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response51


class FriendsGetMutualResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[conint(ge=1)]


class FriendsGetMutualTargetUidsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[FriendsMutualFriend]


class Response52(BaseModel):
    class Config:
        extra = Extra.forbid

    online: Optional[List[conint(ge=1)]] = None
    online_mobile: Optional[List[conint(ge=1)]] = None


class FriendsGetOnlineOnlineMobileResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response52


class FriendsGetOnlineResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[conint(ge=1)]


class FriendsGetRecentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[conint(ge=1)]


class Response53(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Total requests number')
    items: Optional[List[FriendsRequestsXtrMessage]] = None


class FriendsGetRequestsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response53


class Response55(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Total requests number')
    items: Optional[List[conint(ge=1)]] = None
    count_unread: Optional[int] = Field(
        None, description='Total unread requests number'
    )


class FriendsGetRequestsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response55


class Response58(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total friends number')
    items: List[conint(ge=1)]


class FriendsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response58


class Response61(BaseModel):
    class Config:
        extra = Extra.forbid

    server_id: conint(ge=0)


class GroupsAddCallbackServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response61


class GroupsAddLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsLinksItem


class Response64(BaseModel):
    class Config:
        extra = Extra.forbid

    code: str = Field(..., description='Confirmation code')


class GroupsGetCallbackConfirmationCodeResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response64


class Response65(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0)
    items: List[GroupsCallbackServer]


class GroupsGetCallbackServersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response65


class Response67(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: BaseBoolInt = Field(
        ..., description='Information whether catalog is enabled for current user'
    )
    categories: Optional[List[GroupsGroupCategory]] = None


class GroupsGetCatalogInfoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response67


class GroupsGetLongPollServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsLongPollServer


class GroupsGetLongPollSettingsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsLongPollSettings


class Response74(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total members number')
    items: List[conint(ge=0)]


class GroupsGetMembersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response74


class Response76(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[conint(ge=1)]


class GroupsGetRequestsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response76


class Response77(BaseModel):
    class Config:
        extra = Extra.forbid

    access: Optional[GroupsGroupAccess] = Field(
        None, description='Community access settings'
    )
    address: Optional[str] = Field(None, description="Community's page domain")
    audio: GroupsGroupAudio = Field(..., description='Audio settings')
    articles: int = Field(..., description='Articles settings')
    recognize_photo: Optional[int] = Field(None, description='Photo suggests setting')
    city_id: int = Field(..., description='City id of group')
    contacts: Optional[BaseBoolInt] = None
    links: Optional[BaseBoolInt] = None
    sections_list: Optional[List[GroupsSectionsListItem]] = None
    main_section: Optional[GroupsGroupFullSection] = None
    secondary_section: Optional[GroupsGroupFullSection] = None
    age_limits: Optional[GroupsGroupAgeLimits] = None
    country_id: int = Field(..., description='Country id of group')
    description: str = Field(..., description='Community description')
    docs: GroupsGroupDocs = Field(..., description='Docs settings')
    events: Optional[BaseBoolInt] = None
    obscene_filter: BaseBoolInt = Field(
        ..., description='Information whether the obscene filter is enabled'
    )
    obscene_stopwords: BaseBoolInt = Field(
        ..., description='Information whether the stop words filter is enabled'
    )
    obscene_words: List[str] = Field(..., description='The list of stop words')
    event_group_id: Optional[int] = None
    photos: GroupsGroupPhotos = Field(..., description='Photos settings')
    public_category: Optional[int] = Field(
        None, description='Information about the group category'
    )
    public_category_list: Optional[List[GroupsGroupPublicCategoryList]] = None
    public_date: Optional[str] = None
    public_date_label: Optional[str] = None
    public_subcategory: Optional[int] = Field(
        None, description='Information about the group subcategory'
    )
    rss: Optional[AnyUrl] = Field(None, description='URL of the RSS feed')
    start_date: Optional[conint(ge=0)] = Field(None, description='Start date')
    finish_date: Optional[int] = Field(
        None, description='Finish date in Unix-time format'
    )
    subject: Optional[int] = Field(None, description='Community subject ID')
    subject_list: Optional[List[GroupsSubjectItem]] = None
    suggested_privacy: Optional[GroupsGroupSuggestedPrivacy] = None
    title: str = Field(..., description='Community title')
    topics: GroupsGroupTopics = Field(..., description='Topics settings')
    twitter: Optional[GroupsSettingsTwitter] = None
    video: GroupsGroupVideo = Field(..., description='Video settings')
    wall: GroupsGroupWall = Field(..., description='Wall settings')
    website: Optional[str] = Field(None, description='Community website')
    phone: Optional[str] = Field(None, description='Community phone')
    email: Optional[str] = Field(None, description='Community email')
    wiki: GroupsGroupWiki = Field(..., description='Wiki settings')


class GroupsGetSettingsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response77


class GroupsGetTagListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[GroupsGroupTag]


class Response78(BaseModel):
    class Config:
        extra = Extra.forbid

    mask: conint(ge=0)
    permissions: List[GroupsTokenPermissionSetting]


class GroupsGetTokenPermissionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response78


class Response80(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total communities number')
    items: List[conint(ge=0)]


class GroupsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response80


class Response81(BaseModel):
    class Config:
        extra = Extra.forbid

    member: BaseBoolInt = Field(
        ..., description='Information whether user is a member of the group'
    )
    invitation: Optional[BaseBoolInt] = Field(
        None, description='Information whether user has been invited to the group'
    )
    can_invite: Optional[BaseBoolInt] = Field(
        None, description='Information whether user can be invited'
    )
    can_recall: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether user's invite to the group can be recalled",
    )
    request: Optional[BaseBoolInt] = Field(
        None, description='Information whether user has sent request to the group'
    )


class GroupsIsMemberExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response81


class GroupsIsMemberResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ..., description='Information whether user is a member of the group'
    )


class GroupsIsMemberUserIdsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[GroupsMemberStatusFull]


class GroupsIsMemberUserIdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[GroupsMemberStatus]


class Response83(BaseModel):
    class Config:
        extra = Extra.forbid

    form_id: int
    url: AnyUrl


class LeadFormsCreateResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response83


class Response84(BaseModel):
    class Config:
        extra = Extra.forbid

    form_id: int


class LeadFormsDeleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response84


class LeadFormsUploadUrlResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AnyUrl


class Response86(BaseModel):
    class Config:
        extra = Extra.forbid

    likes: int = Field(..., description='Total likes number')


class LikesAddResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response86


class Response87(BaseModel):
    class Config:
        extra = Extra.forbid

    likes: int = Field(..., description='Total likes number')


class LikesDeleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response87


class Response88(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[UsersUserMin]


class LikesGetListExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response88


class Response89(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[int]


class LikesGetListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response89


class Response90(BaseModel):
    class Config:
        extra = Extra.forbid

    liked: BaseBoolInt = Field(
        ..., description='Information whether user liked the object'
    )
    copied: BaseBoolInt = Field(
        ..., description='Information whether user reposted the object'
    )


class LikesIsLikedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response90


class Response91(BaseModel):
    class Config:
        extra = Extra.forbid

    market_album_id: Optional[int] = Field(None, description='Album ID')
    albums_count: Optional[int] = Field(None, description='Albums count')


class MarketAddAlbumResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response91


class Response92(BaseModel):
    class Config:
        extra = Extra.forbid

    market_item_id: int = Field(..., description='Item ID')


class MarketAddResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response92


class MarketCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Comment ID')


class MarketDeleteCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ...,
        description='Returns 1 if request has been processed successfully (0 if the comment is not found)',
    )


class Response97(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[MarketMarketCategoryTree]


class MarketGetCategoriesNewResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response97


class MarketRestoreCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ...,
        description='Returns 1 if request has been processed successfully (0 if the comment is not found)',
    )


class MessagesCreateChatResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Chat ID')


class Response110(BaseModel):
    class Config:
        extra = Extra.forbid

    last_deleted_id: conint(ge=0) = Field(
        ..., description='Id of the last message, that was deleted'
    )


class MessagesDeleteConversationResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response110


class MessagesDeleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Dict[constr(regex=r'^[0-9]+$'), BaseBoolInt]


class MessagesEditResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class Response122(BaseModel):
    class Config:
        extra = Extra.forbid

    link: Optional[str] = None


class MessagesGetInviteLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response122


class MessagesGetLastActivityResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesLastActivity


class MessagesGetLongPollServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesLongpollParams


class Response124(BaseModel):
    class Config:
        extra = Extra.forbid

    is_allowed: Optional[BaseBoolInt] = None


class MessagesIsMessagesFromGroupAllowedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response124


class Response125(BaseModel):
    class Config:
        extra = Extra.forbid

    chat_id: Optional[int] = None


class MessagesJoinChatByInviteLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response125


class MessagesMarkAsImportantResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class MessagesSendResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Message ID')


class MessagesSendUserIdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[MessagesSendUserIdsResponseItem]


class Response132(BaseModel):
    class Config:
        extra = Extra.forbid

    groups: Optional[List[int]] = None
    members: Optional[List[int]] = None


class NewsfeedGetBannedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response132


class Response134(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[NewsfeedListFull]


class NewsfeedGetListsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response134


class Response135(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[NewsfeedList]


class NewsfeedGetListsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response135


class Response140(BaseModel):
    class Config:
        extra = Extra.forbid

    status: bool


class NewsfeedIgnoreItemResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response140


class NewsfeedSaveListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='List ID')


class NotesAddResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Note ID')


class NotesCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Comment ID')


class NotesGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: NotesNote


class Response143(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[NotesNoteComment]


class NotesGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response143


class Response144(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[NotesNote]


class NotesGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response144


class NotificationsMarkAsViewedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class NotificationsSendMessageResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[NotificationsSendMessageItem]


class OrdersCancelSubscriptionResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class OrdersChangeStateResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: str = Field(..., description='New state')


class OrdersGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[OrdersOrder]


class OrdersGetUserSubscriptionByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: OrdersSubscription


class Response146(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[OrdersSubscription]] = None


class OrdersGetUserSubscriptionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response146


class OrdersGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[OrdersOrder]


class OrdersUpdateSubscriptionResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class PagesGetHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PagesWikipageHistory]


class PagesGetTitlesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PagesWikipage]


class PagesGetVersionResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PagesWikipageFull


class PagesGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PagesWikipageFull


class PagesParseWikiResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: str = Field(..., description='HTML source')


class PagesSaveAccessResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Page ID')


class PagesSaveResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Page ID')


class PhotosCopyResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: conint(ge=1) = Field(..., description='Photo ID')


class PhotosCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Created comment ID')


class PhotosDeleteCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ...,
        description='Returns 1 if request has been processed successfully, 0 if the comment is not found',
    )


class PhotosGetAlbumsCountResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: conint(ge=0) = Field(..., description='Albums number')


class Response149(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[PhotosPhotoFullXtrRealOffset]] = None
    more: Optional[BaseBoolInt] = Field(
        None, description='Information whether next page is presented'
    )


class PhotosGetAllExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response149


class Response150(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[PhotosPhotoXtrRealOffset]] = None
    more: Optional[BaseBoolInt] = Field(
        None, description='Information whether next page is presented'
    )


class PhotosGetAllResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response150


class PhotosGetMarketUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseUploadServer


class PhotosGetMessagesUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PhotosPhotoUpload


class Response155(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhotoXtrTagInfo]


class PhotosGetNewTagsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response155


class PhotosGetTagsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhotoTag]


class PhotosGetUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PhotosPhotoUpload


class PhotosGetWallUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PhotosPhotoUpload


class Response160(BaseModel):
    class Config:
        extra = Extra.forbid

    gid: Optional[int] = Field(None, description='Community ID')
    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosMarketAlbumUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response160


class Response161(BaseModel):
    class Config:
        extra = Extra.forbid

    crop_data: Optional[str] = Field(None, description='Crop data')
    crop_hash: Optional[str] = Field(None, description='Crop hash')
    group_id: Optional[int] = Field(None, description='Community ID')
    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosMarketUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response161


class Response162(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosMessageUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response162


class Response163(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')


class PhotosOwnerCoverUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response163


class Response164(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosOwnerUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response164


class Response165(BaseModel):
    class Config:
        extra = Extra.forbid

    aid: Optional[int] = Field(None, description='Album ID')
    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    photos_list: Optional[str] = Field(None, description='Uploaded photos data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosPhotoUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response165


class PhotosPutTagResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Created tag ID')


class PhotosRestoreCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ...,
        description='Returns 1 if request has been processed successfully, 0 if the comment is not found',
    )


class Response166(BaseModel):
    class Config:
        extra = Extra.forbid

    images: Optional[List[BaseImage]] = None


class PhotosSaveOwnerCoverPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response166


class Response167(BaseModel):
    class Config:
        extra = Extra.forbid

    photo_hash: str = Field(..., description='Photo hash')
    photo_src: str = Field(..., description='Uploaded image url')
    photo_src_big: Optional[str] = Field(None, description='Uploaded image url')
    photo_src_small: Optional[str] = Field(None, description='Uploaded image url')
    saved: Optional[int] = Field(
        None, description='Returns 1 if profile photo is saved'
    )
    post_id: Optional[int] = Field(None, description='Created post ID')


class PhotosSaveOwnerPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response167


class Response169(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[str] = Field(None, description='Uploading hash')
    photo: Optional[str] = Field(None, description='Uploaded photo data')
    server: Optional[int] = Field(None, description='Upload server number')


class PhotosWallUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response169


class Response170(BaseModel):
    class Config:
        extra = Extra.forbid

    podcasts: List[PodcastExternalData]
    results_total: int = Field(..., description='Total amount of found results')


class PodcastsSearchPodcastResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response170


class PollsAddVoteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class PollsDeleteVoteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(..., description='Result')


class PollsGetBackgroundsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PollsBackground]


class PollsSavePhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PollsBackground


class Response171(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int = Field(..., description='Owner ID of created pretty card')
    card_id: str = Field(..., description='Card ID of created pretty card')


class PrettyCardsCreateResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response171


class Response172(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int = Field(..., description='Owner ID of deleted pretty card')
    card_id: str = Field(..., description='Card ID of deleted pretty card')
    error: Optional[str] = Field(None, description='Error reason if error happened')


class PrettyCardsDeleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response172


class Response173(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int = Field(..., description='Owner ID of edited pretty card')
    card_id: str = Field(..., description='Card ID of edited pretty card')


class PrettyCardsEditResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response173


class PrettyCardsGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PrettyCardsPrettyCard]


class PrettyCardsGetUploadURLResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: str = Field(..., description='Upload URL')


class Response174(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PrettyCardsPrettyCard]


class PrettyCardsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response174


class SecureCheckTokenResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: SecureTokenChecked


class SecureGetAppBalanceResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='App balance')


class SecureGetSMSHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[SecureSmsNotification]


class SecureGetTransactionsHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[SecureTransaction]


class SecureGetUserLevelResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[SecureLevel]


class SecureGiveEventStickerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[SecureGiveEventStickerItem]


class SecureSendNotificationResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class StatsGetPostReachResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[StatsWallpostStat]


class StatusGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: StatusStatus


class StorageGetKeysResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[str]


class StorageGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[StorageValue]


class Response178(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Stories count')
    items: List[int]


class StoriesGetBannedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response178


class Response181(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_url: str = Field(..., description='Upload URL')
    user_ids: List[conint(ge=0)] = Field(
        ..., description='Users ID who can to see story.'
    )


class StoriesGetPhotoUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response181


class Response182(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_url: str = Field(..., description='Upload URL')
    user_ids: List[conint(ge=0)] = Field(
        ..., description='Users ID who can to see story.'
    )


class StoriesGetVideoUploadServerResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response182


class Response188(BaseModel):
    class Config:
        extra = Extra.forbid

    upload_result: Optional[str] = Field(
        None, description='A string hash that is used in the stories.save method'
    )


class StoriesUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response188


class Response189(BaseModel):
    class Config:
        extra = Extra.forbid

    endpoint: Optional[str] = Field(None, description='Server host')
    key: Optional[str] = Field(None, description='Access key')


class StreamingGetServerUrlResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response189


class Response191(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total friends number')
    items: List[conint(ge=1)]


class UsersGetFollowersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response191


class Response193(BaseModel):
    class Config:
        extra = Extra.forbid

    users: UsersUsersArray
    groups: GroupsGroupsArray


class UsersGetSubscriptionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response193


class Response195(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(
        None, description='Total number of available results'
    )
    items: Optional[List[UtilsLastShortenedLink]] = None


class UtilsGetLastShortenedLinksResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response195


class UtilsGetServerTimeResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Time as Unixtime')


class UtilsGetShortLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: UtilsShortLink


class Response196(BaseModel):
    class Config:
        extra = Extra.forbid

    album_id: int = Field(..., description='Created album ID')


class VideoAddAlbumResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response196


class VideoCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: int = Field(..., description='Created comment ID')


class VideoGetAlbumByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: VideoVideoAlbumFull


class Response197(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[VideoVideoAlbumFull]] = None


class VideoGetAlbumsByVideoExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response197


class VideoGetAlbumsByVideoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[int]


class Response198(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[VideoVideoAlbumFull]


class VideoGetAlbumsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response198


class Response199(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[VideoVideoAlbumFull]


class VideoGetAlbumsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response199


class VideoRestoreCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: BaseBoolInt = Field(
        ...,
        description='Returns 1 if request has been processed successfully, 0 if the comment is not found',
    )


class VideoSaveResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: VideoSaveResult


class Response205(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[int] = Field(None, description='Video size')
    video_id: Optional[int] = Field(None, description='Video ID')


class VideoUploadResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response205


class Response206(BaseModel):
    class Config:
        extra = Extra.forbid

    comment_id: int = Field(..., description='Created comment ID')


class WallCreateCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response206


class Response207(BaseModel):
    class Config:
        extra = Extra.forbid

    post_id: conint(ge=0) = Field(..., description='Edited post ID')


class WallEditResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response207


class Response217(BaseModel):
    class Config:
        extra = Extra.forbid

    post_id: int = Field(..., description='Created post ID')


class WallPostAdsStealthResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response217


class Response218(BaseModel):
    class Config:
        extra = Extra.forbid

    post_id: int = Field(..., description='Created post ID')


class WallPostResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response218


class Response219(BaseModel):
    class Config:
        extra = Extra.forbid

    success: int
    post_id: int = Field(..., description='Created post ID')
    reposts_count: conint(ge=1) = Field(..., description='Reposts number')
    wall_repost_count: Optional[conint(ge=0)] = Field(
        None, description='Reposts to wall number'
    )
    mail_repost_count: Optional[conint(ge=0)] = Field(
        None, description='Reposts to mail number'
    )
    likes_count: conint(ge=0) = Field(..., description='Reposts number')


class WallRepostResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response219


class Response223(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    pages: List[WidgetsWidgetPage]


class WidgetsGetPagesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response223


class Response1(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[AccountOffer]


class AccountGetActiveOffersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response1


class AccountInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    wishlists_ae_promo_banner_show: Optional[BaseBoolInt] = None
    field_2fa_required: Optional[BaseBoolInt] = Field(
        None, alias='2fa_required', description='Two factor authentication is enabled'
    )
    country: Optional[str] = Field(None, description='Country code')
    https_required: Optional[BaseBoolInt] = Field(
        None, description='Information whether HTTPS-only is enabled'
    )
    intro: Optional[BaseBoolInt] = Field(
        None, description='Information whether user has been processed intro'
    )
    show_vk_apps_intro: Optional[bool] = None
    mini_apps_ads_slot_id: Optional[conint(ge=0)] = Field(
        None, description='Ads slot id for MyTarget'
    )
    qr_promotion: Optional[conint(ge=0)] = None
    link_redirects: Optional[Dict[str, Any]] = None
    lang: Optional[int] = Field(None, description='Language ID')
    no_wall_replies: Optional[BaseBoolInt] = Field(
        None, description='Information whether wall comments should be hidden'
    )
    own_posts_default: Optional[BaseBoolInt] = Field(
        None, description='Information whether only owners posts should be shown'
    )
    subscriptions: Optional[AccountSubscriptions] = None


class AccountNameRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    first_name: Optional[str] = Field(None, description='First name in request')
    id: Optional[int] = Field(
        None, description='Request ID needed to cancel the request'
    )
    last_name: Optional[str] = Field(None, description='Last name in request')
    status: Optional[AccountNameRequestStatus] = None
    lang: Optional[str] = Field(None, description='Text to display to user')
    link_href: Optional[str] = Field(None, description='href for link in lang field')
    link_label: Optional[str] = Field(
        None, description='label to display for link in lang field'
    )


class AccountPushConversations(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Items count')
    items: Optional[List[AccountPushConversationsItem]] = None


class AccountPushParams(BaseModel):
    class Config:
        extra = Extra.forbid

    msg: Optional[List[AccountPushParamsMode]] = None
    chat: Optional[List[AccountPushParamsMode]] = None
    like: Optional[List[AccountPushParamsSettings]] = None
    repost: Optional[List[AccountPushParamsSettings]] = None
    comment: Optional[List[AccountPushParamsSettings]] = None
    mention: Optional[List[AccountPushParamsSettings]] = None
    reply: Optional[List[AccountPushParamsOnoff]] = None
    new_post: Optional[List[AccountPushParamsOnoff]] = None
    wall_post: Optional[List[AccountPushParamsOnoff]] = None
    wall_publish: Optional[List[AccountPushParamsOnoff]] = None
    friend: Optional[List[AccountPushParamsOnoff]] = None
    friend_found: Optional[List[AccountPushParamsOnoff]] = None
    friend_accepted: Optional[List[AccountPushParamsOnoff]] = None
    group_invite: Optional[List[AccountPushParamsOnoff]] = None
    group_accepted: Optional[List[AccountPushParamsOnoff]] = None
    birthday: Optional[List[AccountPushParamsOnoff]] = None
    event_soon: Optional[List[AccountPushParamsOnoff]] = None
    app_request: Optional[List[AccountPushParamsOnoff]] = None
    sdk_open: Optional[List[AccountPushParamsOnoff]] = None


class AccountPushSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    disabled: Optional[BaseBoolInt] = Field(
        None, description='Information whether notifications are disabled'
    )
    disabled_until: Optional[int] = Field(
        None, description='Time until that notifications are disabled in Unixtime'
    )
    settings: Optional[AccountPushParams] = None
    conversations: Optional[AccountPushConversations] = None


class AdsAccount(BaseModel):
    class Config:
        extra = Extra.forbid

    access_role: AdsAccessRole
    account_id: int = Field(..., description='Account ID')
    account_status: BaseBoolInt = Field(
        ..., description='Information whether account is active'
    )
    account_type: AdsAccountType
    account_name: str = Field(..., description='Account name')
    can_view_budget: bool = Field(..., description='Can user view account budget')


class AdsAd(BaseModel):
    class Config:
        extra = Extra.forbid

    ad_format: int = Field(..., description='Ad format')
    ad_platform: Optional[Union[int, str]] = Field(None, description='Ad platform')
    all_limit: int = Field(..., description='Total limit')
    approved: AdsAdApproved
    campaign_id: int = Field(..., description='Campaign ID')
    category1_id: Optional[int] = Field(None, description='Category ID')
    category2_id: Optional[int] = Field(None, description='Additional category ID')
    cost_type: AdsAdCostType
    cpc: Optional[int] = Field(None, description='Cost of a click, kopecks')
    cpm: Optional[int] = Field(None, description='Cost of 1000 impressions, kopecks')
    cpa: Optional[int] = Field(None, description='Cost of an action, kopecks')
    ocpm: Optional[int] = Field(
        None, description='Cost of 1000 impressions optimized, kopecks'
    )
    autobidding_max_cost: Optional[int] = Field(
        None, description='Max cost of target actions for autobidding, kopecks'
    )
    disclaimer_medical: Optional[BaseBoolInt] = Field(
        None, description='Information whether disclaimer is enabled'
    )
    disclaimer_specialist: Optional[BaseBoolInt] = Field(
        None, description='Information whether disclaimer is enabled'
    )
    disclaimer_supplements: Optional[BaseBoolInt] = Field(
        None, description='Information whether disclaimer is enabled'
    )
    id: int = Field(..., description='Ad ID')
    impressions_limit: Optional[int] = Field(None, description='Impressions limit')
    impressions_limited: Optional[BaseBoolInt] = Field(
        None, description='Information whether impressions are limited'
    )
    name: str = Field(..., description='Ad title')
    status: AdsAdStatus
    video: Optional[BaseBoolInt] = Field(
        None, description='Information whether the ad is a video'
    )


class AdsCampaign(BaseModel):
    class Config:
        extra = Extra.forbid

    ads_count: Optional[int] = Field(
        None, description='Amount of active ads in campaign'
    )
    all_limit: str = Field(..., description="Campaign's total limit, rubles")
    create_time: Optional[int] = Field(
        None, description='Campaign create time, as Unixtime'
    )
    goal_type: Optional[int] = Field(None, description='Campaign goal type')
    user_goal_type: Optional[int] = Field(None, description='Campaign user goal type')
    is_cbo_enabled: Optional[bool] = Field(
        None, description='Shows if Campaign Budget Optimization is on'
    )
    day_limit: str = Field(..., description="Campaign's day limit, rubles")
    id: int = Field(..., description='Campaign ID')
    name: str = Field(..., description='Campaign title')
    start_time: int = Field(..., description='Campaign start time, as Unixtime')
    status: AdsCampaignStatus
    stop_time: int = Field(..., description='Campaign stop time, as Unixtime')
    type: AdsCampaignType
    update_time: Optional[int] = Field(
        None, description='Campaign update time, as Unixtime'
    )
    views_limit: Optional[int] = Field(
        None, description='Limit of views per user per campaign'
    )


class AdsCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    subcategories: Optional[List[BaseObjectWithName]] = None


class AdsCriteria(BaseModel):
    class Config:
        extra = Extra.forbid

    age_from: Optional[conint(ge=0)] = Field(None, description='Age from')
    age_to: Optional[conint(ge=0)] = Field(None, description='Age to')
    apps: Optional[str] = Field(None, description='Apps IDs')
    apps_not: Optional[str] = Field(None, description='Apps IDs to except')
    birthday: Optional[int] = Field(None, description='Days to birthday')
    cities: Optional[str] = Field(None, description='Cities IDs')
    cities_not: Optional[str] = Field(None, description='Cities IDs to except')
    country: Optional[conint(ge=0)] = Field(None, description='Country ID')
    districts: Optional[str] = Field(None, description='Districts IDs')
    groups: Optional[str] = Field(None, description='Communities IDs')
    interest_categories: Optional[str] = Field(
        None, description='Interests categories IDs'
    )
    interests: Optional[str] = Field(None, description='Interests')
    paying: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the user has proceeded VK payments before',
    )
    positions: Optional[str] = Field(None, description='Positions IDs')
    religions: Optional[str] = Field(None, description='Religions IDs')
    retargeting_groups: Optional[str] = Field(
        None, description='Retargeting groups IDs'
    )
    retargeting_groups_not: Optional[str] = Field(
        None, description='Retargeting groups IDs to except'
    )
    school_from: Optional[int] = Field(None, description='School graduation year from')
    school_to: Optional[int] = Field(None, description='School graduation year to')
    schools: Optional[str] = Field(None, description='Schools IDs')
    sex: Optional[AdsCriteriaSex] = None
    stations: Optional[str] = Field(None, description='Stations IDs')
    statuses: Optional[str] = Field(None, description='Relationship statuses')
    streets: Optional[str] = Field(None, description='Streets IDs')
    travellers: Optional[BasePropertyExists] = Field(
        None, description='Travellers only'
    )
    uni_from: Optional[int] = Field(None, description='University graduation year from')
    uni_to: Optional[int] = Field(None, description='University graduation year to')
    user_browsers: Optional[str] = Field(None, description='Browsers')
    user_devices: Optional[str] = Field(None, description='Devices')
    user_os: Optional[str] = Field(None, description='Operating systems')


class AdsLookalikeRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Lookalike request ID')
    create_time: int = Field(
        ..., description='Lookalike request create time, as Unixtime'
    )
    update_time: int = Field(
        ..., description='Lookalike request update time, as Unixtime'
    )
    scheduled_delete_time: Optional[int] = Field(
        None,
        description='Time by which lookalike request would be deleted, as Unixtime',
    )
    status: Status = Field(..., description='Lookalike request status')
    source_type: SourceType = Field(..., description='Lookalike request source type')
    source_retargeting_group_id: Optional[conint(ge=1)] = Field(
        None, description='Retargeting group id, which was used as lookalike seed'
    )
    source_name: Optional[str] = Field(
        None, description='Lookalike request seed name (retargeting group name)'
    )
    audience_count: Optional[conint(ge=0)] = Field(
        None, description='Lookalike request seed audience size'
    )
    save_audience_levels: Optional[List[AdsLookalikeRequestSaveAudienceLevel]] = None


class AdsRejectReason(BaseModel):
    class Config:
        extra = Extra.forbid

    comment: Optional[str] = Field(None, description='Comment text')
    rules: Optional[List[AdsRules]] = None


class AdsStats(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Object ID')
    stats: Optional[AdsStatsFormat] = None
    type: Optional[AdsObjectType] = None
    views_times: Optional[AdsStatsViewsTimes] = None


class AdsStatsSex(BaseModel):
    class Config:
        extra = Extra.forbid

    clicks_rate: Optional[float] = Field(None, description='Clicks rate')
    impressions_rate: Optional[float] = Field(None, description='Impressions rate')
    value: Optional[AdsStatsSexValue] = None


class AdsTargSettings(AdsCriteria):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Ad ID')
    campaign_id: Optional[int] = Field(None, description='Campaign ID')


class AdsTargSuggestionsSchools(BaseModel):
    class Config:
        extra = Extra.forbid

    desc: Optional[str] = Field(None, description='Full school title')
    id: Optional[int] = Field(None, description='School ID')
    name: Optional[str] = Field(None, description='School title')
    parent: Optional[str] = Field(None, description='City name')
    type: Optional[AdsTargSuggestionsSchoolsType] = None


class BaseError(BaseModel):
    class Config:
        extra = Extra.forbid

    error_code: int = Field(..., description='Error code')
    error_subcode: Optional[int] = Field(None, description='Error subcode')
    error_msg: Optional[str] = Field(None, description='Error message')
    error_text: Optional[str] = Field(None, description='Localized error message')
    request_params: Optional[List[BaseRequestParam]] = None


class AppWidgetsPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str = Field(..., description='Image ID')
    images: List[BaseImage]


class AppWidgetsPhotos(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = None
    items: Optional[List[AppWidgetsPhoto]] = None


class AppsAppMin(BaseModel):
    class Config:
        extra = Extra.forbid

    type: AppsAppType
    id: conint(ge=0) = Field(..., description='Application ID')
    title: str = Field(..., description='Application title')
    author_owner_id: Optional[int] = Field(None, description="Application author's ID")
    is_installed: Optional[bool] = Field(None, description='Is application installed')
    icon_139: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 139 px in width'
    )
    icon_150: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 150 px in width'
    )
    icon_278: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 278 px in width'
    )
    icon_576: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 576 px in width'
    )
    background_loader_color: Optional[str] = Field(
        None, description='Hex color code without hash sign'
    )
    loader_icon: Optional[str] = Field(None, description='SVG data')
    icon_75: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 75 px in width'
    )


class WallWallpostCommentsDonut(BaseModel):
    class Config:
        extra = Extra.forbid

    placeholder: Optional[WallWallpostCommentsDonutPlaceholder] = None


class PhotosImage(BaseModel):
    class Config:
        extra = Extra.forbid

    height: Optional[int] = Field(None, description='Height of the photo in px.')
    type: Optional[PhotosImageType] = None
    url: Optional[AnyUrl] = Field(None, description='Photo URL.')
    width: Optional[int] = Field(None, description='Width of the photo in px.')


class BaseGeo(BaseModel):
    class Config:
        extra = Extra.forbid

    coordinates: Optional[BaseGeoCoordinates] = None
    place: Optional[BasePlace] = None
    showmap: Optional[int] = Field(
        None, description='Information whether a map is showed'
    )
    type: Optional[str] = Field(None, description='Place type')


class BaseLinkApplication(BaseModel):
    class Config:
        extra = Extra.forbid

    app_id: Optional[float] = Field(None, description='Application Id')
    store: Optional[BaseLinkApplicationStore] = None


class BaseLinkButtonAction(BaseModel):
    class Config:
        extra = Extra.forbid

    type: BaseLinkButtonActionType
    url: Optional[AnyUrl] = Field(None, description='Action URL')
    consume_reason: Optional[str] = None


class MarketPrice(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: str = Field(..., description='Amount')
    currency: MarketCurrency
    discount_rate: Optional[int] = None
    old_amount: Optional[str] = None
    text: str = Field(..., description='Text')
    old_amount_text: Optional[str] = Field(
        None, description='Textual representation of old price'
    )


class BaseSticker(BaseModel):
    __root__: Union[BaseStickerOld, BaseStickerNew]


class BoardTopicPoll(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int = Field(..., description="Poll owner's ID")
    poll_id: conint(ge=1) = Field(..., description='Poll ID')
    created: conint(ge=0) = Field(
        ..., description='Date when poll has been created in Unixtime'
    )
    is_closed: Optional[BaseBoolInt] = Field(
        None, description='Information whether the poll is closed'
    )
    question: str = Field(..., description='Poll question')
    votes: conint(ge=0) = Field(..., description='Votes number')
    answer_id: conint(ge=0) = Field(..., description="Current user's answer ID")
    answers: List[PollsAnswer]


class CallbackBase(BaseModel):
    class Config:
        extra = Extra.forbid

    type: CallbackType
    group_id: conint(ge=0)
    event_id: str = Field(
        ...,
        description='Unique event id. If it passed twice or more - you should ignore it.',
    )
    secret: Optional[str] = None


class CallbackConfirmation(CallbackBase):
    class Config:
        extra = Extra.forbid

    type: Optional[CallbackType] = 'confirmation'


class CallbackGroupJoin(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: int
    join_type: CallbackGroupJoinType


class CallbackGroupSettingsChanges(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[str] = None
    description: Optional[str] = None
    access: Optional[GroupsGroupIsClosed] = None
    screen_name: Optional[str] = None
    public_category: Optional[int] = None
    public_subcategory: Optional[int] = None
    age_limits: Optional[GroupsGroupFullAgeLimits] = None
    website: Optional[str] = None
    enable_status_default: Optional[GroupsGroupWall] = None
    enable_audio: Optional[GroupsGroupAudio] = None
    enable_video: Optional[GroupsGroupVideo] = None
    enable_photo: Optional[GroupsGroupPhotos] = None
    enable_market: Optional[CallbackGroupMarket] = None


class CallbackMessageAllow(CallbackBase):
    class Config:
        extra = Extra.forbid

    type: Optional[CallbackType] = 'message_allow'
    object: CallbackMessageAllowObject


class MessagesMessageAction(BaseModel):
    class Config:
        extra = Extra.forbid

    conversation_message_id: Optional[int] = Field(None, description='Message ID')
    email: Optional[str] = Field(
        None, description='Email address for chat_invite_user or chat_kick_user actions'
    )
    member_id: Optional[int] = Field(None, description='User or email peer ID')
    message: Optional[str] = Field(None, description='Message body of related message')
    photo: Optional[MessagesMessageActionPhoto] = None
    text: Optional[str] = Field(
        None, description='New chat title for chat_create and chat_title_update actions'
    )
    type: MessagesMessageActionStatus


class ClientInfoForBots(BaseModel):
    class Config:
        extra = Extra.forbid

    button_actions: Optional[List[MessagesTemplateActionTypeNames]] = None
    keyboard: Optional[bool] = Field(None, description='client has support keyboard')
    inline_keyboard: Optional[bool] = Field(
        None, description='client has support inline keyboard'
    )
    carousel: Optional[bool] = Field(None, description='client has support carousel')
    lang_id: Optional[int] = Field(None, description='client or user language id')


class CallsCall(BaseModel):
    class Config:
        extra = Extra.forbid

    duration: Optional[conint(ge=0)] = Field(None, description='Call duration')
    initiator_id: conint(ge=0) = Field(..., description='Caller initiator')
    receiver_id: conint(ge=0) = Field(..., description='Caller receiver')
    state: CallsEndState
    time: int = Field(..., description='Timestamp for call')
    video: Optional[bool] = Field(
        None, description='Was this call initiated as video call'
    )
    participants: Optional[CallsParticipants] = None


class WallWallCommentDonut(BaseModel):
    class Config:
        extra = Extra.forbid

    is_don: Optional[bool] = Field(None, description='Means commentator is donator')
    placeholder: Optional[WallWallCommentDonutPlaceholder] = None


class DocsDocPreviewPhotoSizes(BaseModel):
    class Config:
        extra = Extra.forbid

    src: AnyUrl = Field(..., description='URL of the image')
    width: conint(ge=0) = Field(..., description='Width in px')
    height: conint(ge=0) = Field(..., description='Height in px')
    type: PhotosPhotoSizesType


class EventsEventAttach(BaseModel):
    class Config:
        extra = Extra.forbid

    address: Optional[str] = Field(None, description='address of event')
    button_text: str = Field(..., description='text of attach')
    friends: List[int] = Field(..., description='array of friends ids')
    id: conint(ge=0) = Field(..., description='event ID')
    is_favorite: bool = Field(..., description='is favorite')
    member_status: Optional[GroupsGroupFullMemberStatus] = Field(
        None, description="Current user's member status"
    )
    text: str = Field(..., description='text of attach')
    time: Optional[int] = Field(None, description='event start time')


class GroupsGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Community ID')
    name: str = Field(..., description='Community name')
    screen_name: str = Field(..., description='Domain of the community page')
    is_closed: GroupsGroupIsClosed
    type: Optional[GroupsGroupType] = None
    is_admin: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user is administrator'
    )
    admin_level: Optional[GroupsGroupAdminLevel] = None
    is_member: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user is member'
    )
    is_advertiser: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user is advertiser'
    )
    start_date: Optional[int] = Field(None, description='Start date in Unixtime format')
    finish_date: Optional[int] = Field(
        None, description='Finish date in Unixtime format'
    )
    deactivated: Optional[str] = Field(
        None, description='Information whether community is banned'
    )
    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the community with 50 pixels in width'
    )
    photo_100: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with 100 pixels in width',
    )
    photo_200: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with 200 pixels in width',
    )
    photo_200_orig: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with 200 pixels in width original',
    )
    photo_400: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with 400 pixels in width',
    )
    photo_400_orig: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with 400 pixels in width original',
    )
    photo_max: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with max pixels in width',
    )
    photo_max_orig: Optional[AnyUrl] = Field(
        None,
        description='URL of square photo of the community with max pixels in width original',
    )
    est_date: Optional[str] = Field(None, description='Established date')
    public_date_label: Optional[str] = Field(None, description='Public date label')
    photo_max_size: Optional[GroupsPhotoSize] = None
    is_video_live_notifications_blocked: Optional[BaseBoolInt] = None
    video_live: Optional[VideoLiveInfo] = None


class FriendsFriendStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    friend_status: FriendsFriendStatusStatus
    sign: Optional[str] = Field(None, description='MD5 hash for the result validation')
    user_id: conint(ge=1) = Field(..., description='User ID')


class FriendsRequests(BaseModel):
    class Config:
        extra = Extra.forbid

    from_: Optional[str] = Field(
        None,
        alias='from',
        description='ID of the user by whom friend has been suggested',
    )
    mutual: Optional[FriendsRequestsMutual] = None
    user_id: Optional[conint(ge=1)] = Field(None, description='User ID')


class UsersUser(UsersUserMin):
    class Config:
        extra = Extra.forbid

    sex: Optional[BaseSex] = Field(None, description='User sex')
    screen_name: Optional[str] = Field(
        None, description="Domain name of the user's page"
    )
    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the user with 50 pixels in width'
    )
    photo_100: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the user with 100 pixels in width'
    )
    online_info: Optional[UsersOnlineInfo] = None
    online: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user is online'
    )
    online_mobile: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the user is online in mobile site or application',
    )
    online_app: Optional[int] = Field(None, description='Application ID')
    verified: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user is verified'
    )
    trending: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user has a "fire" pictogram.'
    )
    friend_status: Optional[FriendsFriendStatusStatus] = None
    mutual: Optional[FriendsRequestsMutual] = None


class GiftsGift(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[int] = Field(
        None, description='Date when gist has been sent in Unixtime'
    )
    from_id: Optional[int] = Field(None, description='Gift sender ID')
    gift: Optional[GiftsLayout] = None
    gift_hash: Optional[str] = Field(None, description='Hash')
    id: Optional[int] = Field(None, description='Gift ID')
    message: Optional[str] = Field(None, description='Comment text')
    privacy: Optional[GiftsGiftPrivacy] = None


class GroupsAddressTimetable(BaseModel):
    class Config:
        extra = Extra.forbid

    fri: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for friday'
    )
    mon: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for monday'
    )
    sat: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for saturday'
    )
    sun: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for sunday'
    )
    thu: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for thursday'
    )
    tue: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for tuesday'
    )
    wed: Optional[GroupsAddressTimetableDay] = Field(
        None, description='Timetable for wednesday'
    )


class GroupsBanInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: Optional[conint(ge=1)] = Field(None, description='Administrator ID')
    comment: Optional[str] = Field(None, description='Comment for a ban')
    comment_visible: Optional[bool] = Field(None, description='Show comment for user')
    is_closed: Optional[bool] = None
    date: Optional[conint(ge=0)] = Field(
        None, description='Date when user has been added to blacklist in Unixtime'
    )
    end_date: Optional[conint(ge=0)] = Field(
        None, description='Date when user will be removed from blacklist in Unixtime'
    )
    reason: Optional[GroupsBanInfoReason] = None


class GroupsOwnerXtrBanInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    ban_info: Optional[GroupsBanInfo] = None
    group: Optional[GroupsGroup] = Field(
        None, description='Information about group if type = group'
    )
    profile: Optional[UsersUser] = Field(
        None, description='Information about group if type = profile'
    )
    type: Optional[GroupsOwnerXtrBanInfoType] = None


class GroupsCallbackSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    api_version: Optional[str] = Field(
        None, description='API version used for the events'
    )
    events: Optional[GroupsLongPollEvents] = None


class GroupsGroupCategoryFull(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    page_count: int = Field(..., description='Pages number')
    page_previews: List[GroupsGroup]
    subcategories: Optional[List[GroupsGroupCategory]] = None


class GroupsMarketInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = Field(None, description='Market type')
    contact_id: Optional[int] = Field(None, description='Contact person ID')
    currency: Optional[MarketCurrency] = None
    currency_text: Optional[str] = Field(None, description='Currency name')
    enabled: Optional[BaseBoolInt] = Field(
        None, description='Information whether the market is enabled'
    )
    main_album_id: Optional[int] = Field(None, description='Main market album ID')
    price_max: Optional[str] = Field(None, description='Maximum price')
    price_min: Optional[str] = Field(None, description='Minimum price')
    min_order_price: Optional[MarketPrice] = None


class GroupsMemberRole(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='User ID')
    permissions: Optional[List[GroupsMemberRolePermission]] = None
    role: Optional[GroupsMemberRoleStatus] = None


class GroupsOnlineStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    minutes: Optional[int] = Field(
        None, description='Estimated time of answer (for status = answer_mark)'
    )
    status: GroupsOnlineStatusType


class LeadFormsAnswer(BaseModel):
    class Config:
        extra = Extra.forbid

    key: str
    answer: Union[LeadFormsAnswerItem, List[LeadFormsAnswerItem]]


class LeadFormsQuestionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: str
    type: Type1
    label: Optional[str] = None
    options: Optional[List[LeadFormsQuestionItemOption]] = Field(
        None, description='Опции выбора для типов radio, checkbox, select'
    )


class LeadFormsLead(BaseModel):
    class Config:
        extra = Extra.forbid

    lead_id: int
    user_id: int
    date: int
    answers: List[LeadFormsAnswer]
    ad_id: Optional[int] = None


class MarketMarketCategoryOld(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Category ID')
    name: str = Field(..., description='Category name')
    section: MarketSection


class MessagesChat(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: int = Field(..., description='Chat creator ID')
    id: int = Field(..., description='Chat ID')
    kicked: Optional[BaseBoolInt] = Field(
        None, description='Shows that user has been kicked from the chat'
    )
    left: Optional[BaseBoolInt] = Field(
        None, description='Shows that user has been left the chat'
    )
    photo_100: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 100 px in width'
    )
    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 200 px in width'
    )
    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 50 px in width'
    )
    push_settings: Optional[MessagesChatPushSettings] = None
    title: Optional[str] = Field(None, description='Chat title')
    type: str = Field(..., description='Chat type')
    users: List[int]
    is_default_photo: Optional[bool] = Field(
        None, description='If provided photo is default'
    )


class UsersUserXtrType(UsersUser):
    class Config:
        extra = Extra.forbid

    type: Optional[UsersUserType] = None


class MessagesConversationPeer(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int
    local_id: Optional[int] = None
    type: MessagesConversationPeerType


class MessagesKeyboardButton(BaseModel):
    class Config:
        extra = Extra.forbid

    action: MessagesKeyboardButtonAction
    color: Optional[Color1] = Field(None, description='Button color')


class NewsfeedItemBase(BaseModel):
    class Config:
        extra = Extra.forbid

    type: NewsfeedNewsfeedItemType
    source_id: int = Field(..., description='Item source ID')
    date: int = Field(..., description='Date when item has been added in Unixtime')


class NewsfeedItemFriend(NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    friends: Optional[NewsfeedItemFriendFriends] = None


class NewsfeedItemHolidayRecommendationsBlockHeader(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[str] = Field(None, description='Title of the header')
    subtitle: Optional[str] = Field(None, description='Subtitle of the header')
    image: Optional[List[BaseImage]] = None
    action: Optional[BaseLinkButtonAction] = None


class NewsfeedItemPromoButton(NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    text: Optional[str] = None
    title: Optional[str] = None
    action: Optional[NewsfeedItemPromoButtonAction] = None
    images: Optional[List[NewsfeedItemPromoButtonImage]] = None
    track_code: Optional[str] = None


class VideoVideo(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Video access key')
    adding_date: Optional[conint(ge=0)] = Field(
        None, description='Date when the video has been added in Unixtime'
    )
    can_comment: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the video'
    )
    can_edit: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can edit the video'
    )
    can_like: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can like the video'
    )
    can_repost: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can repost the video'
    )
    can_subscribe: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can subscribe to author of the video',
    )
    can_add_to_faves: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can add the video to favourites',
    )
    can_add: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can add the video'
    )
    can_attach_link: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can attach action button to the video',
    )
    is_private: Optional[BaseBoolInt] = Field(None, description='1 if video is private')
    comments: Optional[conint(ge=0)] = Field(None, description='Number of comments')
    date: Optional[conint(ge=0)] = Field(
        None, description='Date when video has been uploaded in Unixtime'
    )
    description: Optional[str] = Field(None, description='Video description')
    duration: Optional[conint(ge=0)] = Field(
        None, description='Video duration in seconds'
    )
    image: Optional[List[VideoVideoImage]] = None
    first_frame: Optional[List[VideoVideoImage]] = None
    width: Optional[conint(ge=0)] = Field(None, description='Video width')
    height: Optional[conint(ge=0)] = Field(None, description='Video height')
    id: Optional[conint(ge=0)] = Field(None, description='Video ID')
    owner_id: Optional[int] = Field(None, description='Video owner ID')
    user_id: Optional[conint(ge=0)] = Field(
        None,
        description='Id of the user who uploaded the video if it was uploaded to a group by member',
    )
    title: Optional[str] = Field(None, description='Video title')
    is_favorite: Optional[bool] = Field(
        None, description='Whether video is added to bookmarks'
    )
    player: Optional[AnyUrl] = Field(None, description='Video embed URL')
    processing: Optional[BasePropertyExists] = Field(
        None, description='Returns if the video is processing'
    )
    converting: Optional[BaseBoolInt] = Field(
        None, description='1 if  video is being converted'
    )
    added: Optional[BaseBoolInt] = Field(
        None, description="1 if video is added to user's albums"
    )
    is_subscribed: Optional[BaseBoolInt] = Field(
        None, description='1 if user is subscribed to author of the video'
    )
    track_code: Optional[str] = None
    repeat: Optional[BasePropertyExists] = Field(
        None, description='Information whether the video is repeated'
    )
    type: Optional[Type2] = None
    views: Optional[conint(ge=0)] = Field(None, description='Number of views')
    local_views: Optional[conint(ge=0)] = Field(
        None, description='If video is external, number of views on vk'
    )
    content_restricted: Optional[conint(ge=0)] = Field(
        None, description='Restriction code'
    )
    content_restricted_message: Optional[str] = Field(
        None, description='Restriction text'
    )
    balance: Optional[conint(ge=0)] = Field(None, description='Live donations balance')
    live_status: Optional[LiveStatus] = Field(None, description='Live stream status')
    live: Optional[BasePropertyExists] = Field(
        None, description='1 if the video is a live stream'
    )
    upcoming: Optional[BasePropertyExists] = Field(
        None, description='1 if the video is an upcoming stream'
    )
    live_start_time: Optional[conint(ge=0)] = Field(
        None,
        description='Date in Unixtime when the live stream is scheduled to start by the author',
    )
    live_notify: Optional[BaseBoolInt] = Field(
        None,
        description='Whether current user is subscribed to the upcoming live stream notification (if not subscribed to the author)',
    )
    spectators: Optional[conint(ge=0)] = Field(
        None, description='Number of spectators of the stream'
    )
    platform: Optional[str] = Field(None, description='External platform')
    likes: Optional[BaseLikes] = None
    reposts: Optional[BaseRepostsInfo] = None


class NewsfeedItemWallpostFeedback(BaseModel):
    class Config:
        extra = Extra.forbid

    type: NewsfeedItemWallpostFeedbackType
    question: str
    answers: Optional[List[NewsfeedItemWallpostFeedbackAnswer]] = None
    stars_count: Optional[conint(ge=2, le=5)] = None
    gratitude: Optional[str] = None


class OrdersAmount(BaseModel):
    class Config:
        extra = Extra.forbid

    amounts: Optional[List[OrdersAmountItem]] = None
    currency: Optional[str] = Field(None, description='Currency name')


class PhotosPhotoAlbumFull(BaseModel):
    class Config:
        extra = Extra.forbid

    can_upload: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can upload photo to the album',
    )
    comments_disabled: Optional[BaseBoolInt] = Field(
        None, description='Information whether album comments are disabled'
    )
    created: conint(ge=0) = Field(
        ..., description='Date when the album has been created in Unixtime'
    )
    description: Optional[str] = Field(None, description='Photo album description')
    id: int = Field(..., description='Photo album ID')
    owner_id: int = Field(..., description="Album owner's ID")
    size: conint(ge=0) = Field(..., description='Photos number')
    sizes: Optional[List[PhotosPhotoSizes]] = None
    thumb_id: Optional[conint(ge=0)] = Field(None, description='Thumb photo ID')
    thumb_is_last: Optional[BaseBoolInt] = Field(
        None, description='Information whether the album thumb is last photo'
    )
    thumb_src: Optional[AnyUrl] = Field(None, description='URL of the thumb image')
    title: str = Field(..., description='Photo album title')
    updated: conint(ge=0) = Field(
        ..., description='Date when the album has been updated last time in Unixtime'
    )
    upload_by_admins_only: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether only community administrators can upload photos',
    )


class PhotosPhotoFull(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the photo')
    album_id: int = Field(..., description='Album ID')
    can_comment: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the photo'
    )
    date: conint(ge=0) = Field(..., description='Date when uploaded')
    height: Optional[conint(ge=0)] = Field(None, description='Original photo height')
    id: conint(ge=0) = Field(..., description='Photo ID')
    images: Optional[List[PhotosImage]] = None
    lat: Optional[float] = Field(None, description='Latitude')
    likes: Optional[BaseLikes] = None
    reposts: Optional[BaseRepostsInfo] = None
    comments: Optional[BaseObjectCount] = None
    long: Optional[float] = Field(None, description='Longitude')
    owner_id: int = Field(..., description="Photo owner's ID")
    post_id: Optional[conint(ge=1)] = Field(None, description='Post ID')
    tags: Optional[BaseObjectCount] = None
    text: Optional[str] = Field(None, description='Photo caption')
    user_id: Optional[conint(ge=1)] = Field(
        None, description='ID of the user who have uploaded the photo'
    )
    width: Optional[conint(ge=0)] = Field(None, description='Original photo width')


class PollsPoll(BaseModel):
    class Config:
        extra = Extra.forbid

    anonymous: Optional[PollsPollAnonymous] = None
    friends: Optional[List[PollsFriend]] = None
    multiple: bool = Field(
        ..., description='Information whether the poll with multiple choices'
    )
    answer_id: Optional[conint(ge=0)] = Field(
        None, description="Current user's answer ID"
    )
    end_date: conint(ge=0)
    answer_ids: Optional[List[conint(ge=0)]] = Field(
        None, description="Current user's answer IDs"
    )
    closed: bool
    is_board: bool
    can_edit: bool
    can_vote: bool
    can_report: bool
    can_share: bool
    embed_hash: Optional[str] = None
    photo: Optional[PollsBackground] = None
    answers: List[PollsAnswer]
    created: conint(ge=0) = Field(
        ..., description='Date when poll has been created in Unixtime'
    )
    id: conint(ge=1) = Field(..., description='Poll ID')
    owner_id: int = Field(..., description="Poll owner's ID")
    author_id: Optional[int] = Field(None, description="Poll author's ID")
    question: str = Field(..., description='Poll question')
    background: Optional[PollsBackground] = None
    votes: conint(ge=0) = Field(..., description='Votes number')
    disable_unvote: bool


class PollsVoters(BaseModel):
    class Config:
        extra = Extra.forbid

    answer_id: Optional[int] = Field(None, description='Answer ID')
    users: Optional[PollsVotersUsers] = None


class StatsReach(BaseModel):
    class Config:
        extra = Extra.forbid

    age: Optional[List[StatsSexAge]] = None
    cities: Optional[List[StatsCity]] = None
    countries: Optional[List[StatsCountry]] = None
    mobile_reach: Optional[conint(ge=0)] = Field(
        None, description='Reach count from mobile devices'
    )
    reach: Optional[conint(ge=0)] = Field(None, description='Reach count')
    reach_subscribers: Optional[conint(ge=0)] = Field(
        None, description='Subscribers reach count'
    )
    sex: Optional[List[StatsSexAge]] = None
    sex_age: Optional[List[StatsSexAge]] = None


class StoreProduct(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(..., description='Id of the product')
    type: Type5 = Field(..., description='Product type')
    is_new: Optional[bool] = Field(
        None,
        description="Information whether sticker product wasn't used after being purchased",
    )
    purchased: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the product is purchased (1 - yes, 0 - no)',
    )
    active: Optional[BaseBoolInt] = Field(
        None, description='Information whether the product is active (1 - yes, 0 - no)'
    )
    promoted: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the product is promoted (1 - yes, 0 - no)',
    )
    purchase_date: Optional[conint(ge=0)] = Field(
        None, description='Date (Unix time) when the product was purchased'
    )
    title: Optional[str] = Field(None, description='Title of the product')
    stickers: Optional[BaseStickersList] = None
    style_sticker_ids: Optional[List[int]] = Field(
        None, description='Array of style sticker ids (for sticker pack styles)'
    )
    icon: Optional[StoreProductIcon] = Field(
        None,
        description='Array of icon images or icon set object of the product (for stickers product type)',
    )
    previews: Optional[List[BaseImage]] = Field(
        None,
        description='Array of preview images of the product (for stickers product type)',
    )
    has_animation: Optional[bool] = Field(
        None,
        description='Information whether the product is an animated sticker pack (for stickers product type)',
    )
    subtitle: Optional[str] = Field(None, description='Subtitle of the product')
    payment_region: Optional[str] = None


class StoreStickersKeyword(BaseModel):
    class Config:
        extra = Extra.forbid

    words: List[str]
    user_stickers: Optional[StoreStickersKeywordStickers] = None
    promoted_stickers: Optional[StoreStickersKeywordStickers] = None
    stickers: Optional[List[StoreStickersKeywordSticker]] = None


class StoriesStoryStatsStat(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Stat value')
    state: StoriesStoryStatsState


class UsersUserSettingsXtr(BaseModel):
    class Config:
        extra = Extra.forbid

    connections: Optional[UsersUserConnections] = None
    bdate: Optional[str] = Field(None, description="User's date of birth")
    bdate_visibility: Optional[conint(ge=0)] = Field(
        None, description="Information whether user's birthdate are hidden"
    )
    city: Optional[BaseCity] = None
    country: Optional[BaseCountry] = None
    first_name: Optional[str] = Field(None, description='User first name')
    home_town: str = Field(..., description="User's hometown")
    last_name: Optional[str] = Field(None, description='User last name')
    maiden_name: Optional[str] = Field(None, description='User maiden name')
    name_request: Optional[AccountNameRequest] = None
    personal: Optional[UsersPersonal] = None
    phone: Optional[str] = Field(
        None, description='User phone number with some hidden digits'
    )
    relation: Optional[UsersUserRelation] = Field(
        None, description='User relationship status'
    )
    relation_partner: Optional[UsersUserMin] = None
    relation_pending: Optional[BaseBoolInt] = Field(
        None, description='Information whether relation status is pending'
    )
    relation_requests: Optional[List[UsersUserMin]] = None
    screen_name: Optional[str] = Field(
        None, description="Domain name of the user's page"
    )
    sex: Optional[BaseSex] = Field(None, description='User sex')
    status: str = Field(..., description='User status')
    status_audio: Optional[AudioAudio] = None
    interests: Optional[AccountUserSettingsInterests] = None
    languages: Optional[List[str]] = None


class UtilsDomainResolved(BaseModel):
    class Config:
        extra = Extra.forbid

    object_id: Optional[int] = Field(None, description='Object ID')
    group_id: Optional[int] = Field(None, description='Group ID')
    type: Optional[UtilsDomainResolvedType] = None


class UtilsLinkChecked(BaseModel):
    class Config:
        extra = Extra.forbid

    link: Optional[AnyUrl] = Field(None, description='Link URL')
    status: Optional[UtilsLinkCheckedStatus] = None


class UtilsLinkStats(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = Field(None, description='Link key (characters after vk.cc/)')
    stats: Optional[List[UtilsStats]] = None


class UtilsStatsExtended(BaseModel):
    class Config:
        extra = Extra.forbid

    cities: Optional[List[UtilsStatsCity]] = None
    countries: Optional[List[UtilsStatsCountry]] = None
    sex_age: Optional[List[UtilsStatsSexAge]] = None
    timestamp: Optional[int] = Field(None, description='Start time')
    views: Optional[int] = Field(None, description='Total views number')


class VideoVideoFull(VideoVideo):
    class Config:
        extra = Extra.forbid

    files: Optional[VideoVideoFiles] = None
    live_settings: Optional[VideoLiveSettings] = Field(
        None, description='Settings for live stream'
    )


class WallWallpostDonut(BaseModel):
    class Config:
        extra = Extra.forbid

    is_donut: bool = Field(..., description='Post only for dons')
    paid_duration: Optional[int] = Field(
        None,
        description='Value of this field need to pass in wall.post/edit in donut_paid_duration',
    )
    placeholder: Optional[WallWallpostDonutPlaceholder] = Field(
        None,
        description='If placeholder was respond, text and all attachments will be hidden',
    )
    can_publish_free_copy: Optional[bool] = Field(
        None,
        description='Says whether group admin can post free copy of this donut post',
    )
    edit_mode: Optional[EditMode] = Field(
        None, description='Says what user can edit in post about donut properties'
    )


class WidgetsCommentMedia(BaseModel):
    class Config:
        extra = Extra.forbid

    item_id: Optional[int] = Field(None, description='Media item ID')
    owner_id: Optional[int] = Field(None, description="Media owner's ID")
    thumb_src: Optional[AnyUrl] = Field(
        None, description='URL of the preview image (type=photo only)'
    )
    type: Optional[WidgetsCommentMediaType] = None


class AccountGetInfoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AccountInfo


class AccountGetPushSettingsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AccountPushSettings


class Response3(BaseModel):
    class Config:
        extra = Extra.forbid

    changed: Optional[BaseBoolInt] = Field(
        None, description='1 if changes has been processed'
    )
    name_request: Optional[AccountNameRequest] = None


class AccountSaveProfileInfoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response3


class AdsGetAccountsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsAccount]


class AdsGetAdsTargetingResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargSettings]


class AdsGetAdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsAd]


class AdsGetCampaignsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsCampaign]


class Response5(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: Optional[List[AdsCategory]] = Field(None, description='Old categories')
    v2: Optional[List[AdsCategory]] = Field(None, description='Actual categories')


class AdsGetCategoriesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response5


class Response6(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(
        ..., description='Total count of found lookalike requests'
    )
    items: List[AdsLookalikeRequest] = Field(
        ..., description='found lookalike requests'
    )


class AdsGetLookalikeRequestsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response6


class AdsGetRejectionReasonResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AdsRejectReason


class AdsGetStatisticsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsStats]


class AdsGetSuggestionsSchoolsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsTargSuggestionsSchools]


class AppWidgetsGetAppImagesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AppWidgetsPhotos


class AppWidgetsGetGroupImagesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AppWidgetsPhotos


class AppWidgetsGetImagesByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AppWidgetsPhoto]


class AppWidgetsSaveAppImageResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AppWidgetsPhoto


class AppWidgetsSaveGroupImageResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AppWidgetsPhoto


class FriendsAreFriendsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[FriendsFriendStatus]


class Response54(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Total requests number')
    items: Optional[List[FriendsRequests]] = None


class FriendsGetRequestsNeedMutualResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response54


class Response60(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[GiftsGift]] = None


class GiftsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response60


class GroupsCreateResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsGroup


class GroupsGetCallbackSettingsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsCallbackSettings


class Response66(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: BaseBoolInt = Field(
        ..., description='Information whether catalog is enabled for current user'
    )
    categories: Optional[List[GroupsGroupCategoryFull]] = None


class GroupsGetCatalogInfoExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response66


class Response68(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[GroupsGroup]


class GroupsGetCatalogResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response68


class Response73(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total members number')
    items: List[GroupsMemberRole]


class GroupsGetMembersFilterResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response73


class Response82(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[GroupsGroup]


class GroupsSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response82


class Response85(BaseModel):
    class Config:
        extra = Extra.forbid

    leads: List[LeadFormsLead]
    next_page_token: Optional[str] = None


class LeadFormsGetLeadsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response85


class Response109(BaseModel):
    class Config:
        extra = Extra.forbid

    message_id: Optional[int] = Field(None, description='Service message ID')
    chat: Optional[MessagesChat] = None


class MessagesDeleteChatPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response109


class MessagesGetChatChatIdsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[MessagesChat]


class MessagesGetChatResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesChat


class Response130(BaseModel):
    class Config:
        extra = Extra.forbid

    message_id: Optional[int] = Field(None, description='Service message ID')
    chat: Optional[MessagesChat] = None


class MessagesSetChatPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response130


class OrdersGetAmountResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[OrdersAmount]


class PhotosCreateAlbumResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PhotosPhotoAlbumFull


class Response147(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhotoAlbumFull]


class PhotosGetAlbumsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response147


class Response151(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[PhotosPhotoFull]


class PhotosGetByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response151


class PhotosGetByIdLegacyExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhotoFull]


class Response156(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhotoFull]


class PhotosGetUserPhotosExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response156


class Response158(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhotoFull]


class PhotosGetExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response158


class PollsCreateResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PollsPoll


class PollsGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: PollsPoll


class PollsGetVotersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PollsVoters]


class StoreGetFavoriteStickers(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[BaseSticker]


class StoreGetFavoriteStickersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: StoreGetFavoriteStickers


class StoreGetProducts(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[StoreProduct]


class StoreGetProductsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: StoreGetProducts


class Response176(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0)
    dictionary: List[StoreStickersKeyword]
    chunks_count: Optional[conint(ge=1)] = Field(
        None, description='Total count of chunks to load'
    )
    chunks_hash: Optional[str] = Field(None, description='Chunks version hash')


class StoreGetStickersKeywordsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response176


class UtilsCheckLinkResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: UtilsLinkChecked


class UtilsGetLinkStatsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: UtilsLinkStats


class UtilsResolveScreenNameResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: UtilsDomainResolved


class Response204(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[VideoVideo]


class VideoSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response204


class AccountUserSettings(UsersUserMin, UsersUserSettingsXtr):
    class Config:
        extra = Extra.forbid

    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the user with 200 pixels in width'
    )
    is_service_account: Optional[bool] = Field(
        None, description='flag about service account'
    )


class AdsDemostatsFormat(BaseModel):
    class Config:
        extra = Extra.forbid

    age: Optional[List[AdsStatsAge]] = None
    cities: Optional[List[AdsStatsCities]] = None
    day: Optional[str] = Field(None, description='Day as YYYY-MM-DD')
    month: Optional[str] = Field(None, description='Month as YYYY-MM')
    overall: Optional[int] = Field(None, description='1 if period=overall')
    sex: Optional[List[AdsStatsSex]] = None
    sex_age: Optional[List[AdsStatsSexAge]] = None


class AdsUpdateOfficeUsersResult(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    is_success: bool
    error: Optional[BaseError] = None


class AppsApp(AppsAppMin):
    class Config:
        extra = Extra.forbid

    author_url: Optional[AnyUrl] = Field(None, description="Application author's URL")
    banner_1120: Optional[AnyUrl] = Field(
        None, description='URL of the app banner with 1120 px in width'
    )
    banner_560: Optional[AnyUrl] = Field(
        None, description='URL of the app banner with 560 px in width'
    )
    icon_16: Optional[AnyUrl] = Field(
        None, description='URL of the app icon with 16 px in width'
    )
    is_new: Optional[BaseBoolInt] = Field(None, description='Is new flag')
    push_enabled: Optional[BaseBoolInt] = Field(None, description='Is push enabled')
    screen_orientation: Optional[int] = Field(None, description='Screen orientation')
    friends: Optional[List[conint(ge=0)]] = None
    catalog_position: Optional[int] = Field(None, description='Catalog position')
    description: Optional[str] = Field(None, description='Application description')
    genre: Optional[str] = Field(None, description='Genre name')
    genre_id: Optional[int] = Field(None, description='Genre ID')
    international: Optional[bool] = Field(
        None, description='Information whether the application is multilanguage'
    )
    is_in_catalog: Optional[int] = Field(
        None, description='Information whether application is in mobile catalog'
    )
    leaderboard_type: Optional[AppsAppLeaderboardType] = None
    members_count: Optional[int] = Field(None, description='Members number')
    platform_id: Optional[str] = Field(None, description='Application ID in store')
    published_date: Optional[int] = Field(
        None, description='Date when the application has been published in Unixtime'
    )
    screen_name: Optional[str] = Field(None, description='Screen name')
    section: Optional[str] = Field(None, description='Application section name')


class AppsCatalogList(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[AppsApp]
    profiles: Optional[List[UsersUserMin]] = None


class BaseCommentsInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    can_post: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the post'
    )
    can_open: Optional[BaseBoolInt] = None
    can_close: Optional[BaseBoolInt] = None
    count: Optional[conint(ge=0)] = Field(None, description='Comments number')
    groups_can_post: Optional[bool] = Field(
        None, description='Information whether groups can comment the post'
    )
    donut: Optional[WallWallpostCommentsDonut] = None


class PhotosPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the photo')
    album_id: int = Field(..., description='Album ID')
    date: conint(ge=0) = Field(..., description='Date when uploaded')
    height: Optional[conint(ge=0)] = Field(None, description='Original photo height')
    id: conint(ge=0) = Field(..., description='Photo ID')
    images: Optional[List[PhotosImage]] = None
    lat: Optional[float] = Field(None, description='Latitude')
    long: Optional[float] = Field(None, description='Longitude')
    owner_id: int = Field(..., description="Photo owner's ID")
    photo_256: Optional[AnyUrl] = Field(
        None, description='URL of image with 2560 px width'
    )
    can_comment: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the photo'
    )
    place: Optional[str] = None
    post_id: Optional[conint(ge=1)] = Field(None, description='Post ID')
    sizes: Optional[List[PhotosPhotoSizes]] = None
    text: Optional[str] = Field(None, description='Photo caption')
    user_id: Optional[conint(ge=1)] = Field(
        None, description='ID of the user who have uploaded the photo'
    )
    width: Optional[conint(ge=0)] = Field(None, description='Original photo width')
    has_tags: bool = Field(..., description='Whether photo has attached tag links')


class BaseLinkButton(BaseModel):
    class Config:
        extra = Extra.forbid

    action: Optional[BaseLinkButtonAction] = Field(None, description='Button action')
    title: Optional[str] = Field(None, description='Button title')
    block_id: Optional[str] = Field(None, description='Target block id')
    section_id: Optional[str] = Field(None, description='Target section id')
    curator_id: Optional[int] = Field(None, description='curator id')
    album_id: Optional[conint(ge=1)] = Field(None, description='Video album id')
    owner_id: Optional[int] = Field(None, description='Owner id')
    icon: Optional[str] = Field(
        None, description="Button icon name, e.g. 'phone' or 'gift'"
    )
    style: Optional[BaseLinkButtonStyle] = None


class BaseLinkProduct(BaseModel):
    class Config:
        extra = Extra.forbid

    price: MarketPrice
    merchant: Optional[str] = None
    orders_count: Optional[int] = None


class CallbackGroupChangePhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    user_id: conint(ge=0)
    photo: PhotosPhoto


class DocsDocPreviewPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    sizes: Optional[List[DocsDocPreviewPhotoSizes]] = None


class FriendsFriendExtendedStatus(FriendsFriendStatus):
    class Config:
        extra = Extra.forbid

    is_request_unread: Optional[bool] = Field(
        None, description='Is friend request from other user unread'
    )


class GroupsAddress(BaseModel):
    class Config:
        extra = Extra.forbid

    additional_address: Optional[str] = Field(
        None, description='Additional address to the place (6 floor, left door)'
    )
    address: Optional[str] = Field(
        None, description='String address to the place (Nevsky, 28)'
    )
    city_id: Optional[conint(ge=0)] = Field(None, description='City id of address')
    country_id: Optional[conint(ge=0)] = Field(
        None, description='Country id of address'
    )
    distance: Optional[int] = Field(None, description='Distance from the point')
    id: int = Field(..., description='Address id')
    latitude: Optional[float] = Field(None, description='Address latitude')
    longitude: Optional[float] = Field(None, description='Address longitude')
    metro_station_id: Optional[conint(ge=0)] = Field(
        None, description='Metro id of address'
    )
    phone: Optional[str] = Field(None, description='Address phone')
    time_offset: Optional[int] = Field(
        None, description='Time offset int minutes from utc time'
    )
    timetable: Optional[GroupsAddressTimetable] = Field(
        None, description='Week timetable for the address'
    )
    title: Optional[str] = Field(None, description='Title of the place (Zinger, etc)')
    work_info_status: Optional[GroupsAddressWorkInfoStatus] = Field(
        None, description='Status of information about timetable'
    )
    place_id: Optional[int] = None


class GroupsBannedItem(BaseModel):
    __root__: GroupsOwnerXtrBanInfo


class LeadFormsForm(BaseModel):
    class Config:
        extra = Extra.forbid

    form_id: int
    group_id: int
    photo: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    confirmation: Optional[str] = None
    site_link_url: Optional[AnyUrl] = None
    policy_link_url: Optional[AnyUrl] = None
    questions: Optional[List[LeadFormsQuestionItem]] = None
    active: Optional[BaseBoolInt] = None
    leads_count: int
    pixel_code: Optional[str] = None
    once_per_user: Optional[int] = None
    notify_admins: Optional[str] = None
    notify_emails: Optional[str] = None
    url: AnyUrl


class LeadsChecked(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        ..., description='flag about service account'
    )


class LeadsComplete(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        ..., description=''
    )


class LeadsLead(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        ..., description=''
    )


class LeadsEntry(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        ..., description=''
    )


class LeadsStart(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        ..., description=''
    )


class LeadsCheckUserResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: LeadsChecked


class LeadsCompleteResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: LeadsComplete


class LeadsGetStatsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: LeadsLead


class LeadsGetUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[LeadsEntry]


class LeadsMetricHitResponseModel(BaseModel):
    class Config:
        extra = Extra.forbid

    result: Optional[bool] = Field(
        None,
        description="Information whether request has been processed successfully",
    )
    redirect_link: Optional[str] = Field(
        None,
        description="Redirect link",
    )


class LeadsMetricHitResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: "LeadsMetricHitResponseModel" = Field(
        ...,
        description="",
    )


class LeadsStartResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: LeadsStart


class MarketMarketAlbum(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Market album ID')
    owner_id: int = Field(..., description="Market album owner's ID")
    title: str = Field(..., description='Market album title')
    count: conint(ge=0) = Field(..., description='Items number')
    is_main: Optional[bool] = Field(None, description='Is album main for owner')
    is_hidden: Optional[bool] = Field(None, description='Is album hidden')
    photo: Optional[PhotosPhoto] = None
    updated_time: conint(ge=0) = Field(
        ..., description='Date when album has been updated last time in Unixtime'
    )


class MarketMarketCategory(BaseModel):
    __root__: MarketMarketCategoryOld


class MarketMarketItem(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(
        None, description='Access key for the market item'
    )
    availability: MarketMarketItemAvailability
    button_title: Optional[str] = Field(None, description='Title for button for url')
    category: MarketMarketCategory
    date: Optional[conint(ge=0)] = Field(
        None, description='Date when the item has been created in Unixtime'
    )
    description: str = Field(..., description='Item description')
    external_id: Optional[str] = None
    id: conint(ge=0) = Field(..., description='Item ID')
    is_favorite: Optional[bool] = None
    owner_id: int = Field(..., description="Item owner's ID")
    price: MarketPrice
    thumb_photo: Optional[AnyUrl] = Field(None, description='URL of the preview image')
    title: str = Field(..., description='Item title')
    url: Optional[AnyUrl] = Field(None, description='URL to item')
    variants_grouping_id: Optional[conint(ge=0)] = None
    is_main_variant: Optional[bool] = None
    sku: Optional[constr(max_length=50)] = None


class MarketOrderItem(BaseModel):
    class Config:
        extra = Extra.forbid

    owner_id: int
    item_id: int
    price: MarketPrice
    quantity: conint(ge=0)
    item: MarketMarketItem
    title: Optional[str] = None
    photo: Optional[PhotosPhoto] = None
    variants: Optional[List[str]] = None


class MessagesUserXtrInvitedBy(UsersUserXtrType):
    class Config:
        extra = Extra.forbid

    invited_by: Optional[int] = Field(None, description='ID of the inviter')


class MessagesKeyboard(BaseModel):
    class Config:
        extra = Extra.forbid

    author_id: Optional[int] = Field(
        None, description='Community or bot, which set this keyboard'
    )
    buttons: List[List[MessagesKeyboardButton]]
    one_time: bool = Field(
        ..., description='Should this keyboard disappear on first use'
    )
    inline: Optional[bool] = None


class NewsfeedItemAudio(NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    audio: Optional[NewsfeedItemAudioAudio] = None
    post_id: Optional[int] = Field(None, description='Post ID')


class PhotosPhotoAlbum(BaseModel):
    class Config:
        extra = Extra.forbid

    created: conint(ge=0) = Field(
        ..., description='Date when the album has been created in Unixtime'
    )
    description: Optional[str] = Field(None, description='Photo album description')
    id: int = Field(..., description='Photo album ID')
    owner_id: int = Field(..., description="Album owner's ID")
    size: conint(ge=0) = Field(..., description='Photos number')
    thumb: Optional[PhotosPhoto] = None
    title: str = Field(..., description='Photo album title')
    updated: conint(ge=0) = Field(
        ..., description='Date when the album has been updated last time in Unixtime'
    )


class NewsfeedNewsfeedPhoto(PhotosPhoto):
    class Config:
        extra = Extra.forbid

    likes: Optional[BaseLikes] = None
    comments: Optional[BaseObjectCount] = None
    can_repost: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can repost the photo'
    )


class NewsfeedItemPhotoTagPhotoTags(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Tags number')
    items: Optional[List[NewsfeedNewsfeedPhoto]] = None


class NewsfeedItemTopic(NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    comments: Optional[BaseCommentsInfo] = None
    likes: Optional[BaseLikesInfo] = None
    post_id: int = Field(..., description='Topic post ID')
    text: str = Field(..., description='Post text')


class NewsfeedItemVideoVideo(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Tags number')
    items: Optional[List[VideoVideo]] = None


class PhotosTagsSuggestionItem(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[str] = None
    caption: Optional[str] = None
    type: Optional[str] = None
    buttons: Optional[List[PhotosTagsSuggestionItemButton]] = None
    photo: Optional[PhotosPhoto] = None
    tags: Optional[List[PhotosPhotoTag]] = None
    track_code: Optional[str] = None


class StatsPeriod(BaseModel):
    class Config:
        extra = Extra.forbid

    activity: Optional[StatsActivity] = None
    period_from: Optional[int] = Field(None, description='Unix timestamp')
    period_to: Optional[int] = Field(None, description='Unix timestamp')
    reach: Optional[StatsReach] = None
    visitors: Optional[StatsViews] = None


class StoriesStoryStats(BaseModel):
    class Config:
        extra = Extra.forbid

    answer: StoriesStoryStatsStat
    bans: StoriesStoryStatsStat
    open_link: StoriesStoryStatsStat
    replies: StoriesStoryStatsStat
    shares: StoriesStoryStatsStat
    subscribers: StoriesStoryStatsStat
    views: StoriesStoryStatsStat
    likes: StoriesStoryStatsStat


class UtilsLinkStatsExtended(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Optional[str] = Field(None, description='Link key (characters after vk.cc/)')
    stats: Optional[List[UtilsStatsExtended]] = None


class AccountGetProfileInfoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AccountUserSettings


class AdsUpdateOfficeUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsUpdateOfficeUsersResult]


class AppsGetCatalogResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: AppsCatalogList


class Response21(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(
        None, description='Total number of applications'
    )
    items: Optional[List[AppsApp]] = Field(None, description='List of applications')


class AppsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response21


class FriendsAreFriendsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[FriendsFriendExtendedStatus]


class GroupsAddAddressResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsAddress


class GroupsEditAddressResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: GroupsAddress = Field(..., description='Result')


class Response62(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total count of addresses')
    items: List[GroupsAddress]


class GroupsGetAddressesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response62


class Response63(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total users number')
    items: List[GroupsBannedItem]


class GroupsGetBannedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response63


class LeadFormsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: LeadFormsForm


class LeadFormsListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[LeadFormsForm]


class Response93(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketAlbum]] = None


class MarketGetAlbumByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response93


class Response94(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketAlbum]] = None


class MarketGetAlbumsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response94


class Response96(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketItem]] = None


class MarketGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response96


class Response98(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketCategory]] = None


class MarketGetCategoriesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response98


class Response102(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MarketOrderItem]


class MarketGetOrderItemsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response102


class Response106(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketItem]] = None
    variants: Optional[List[MarketMarketItem]] = None


class MarketGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response106


class Response108(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    view_type: MarketServicesViewType
    items: List[MarketMarketItem]
    variants: Optional[List[MarketMarketItem]] = None


class MarketSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response108


class PhotosGetByIdLegacyResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class Response152(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[PhotosPhoto]] = None


class PhotosGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response152


class Response157(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhoto]


class PhotosGetUserPhotosResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response157


class Response159(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[PhotosPhoto]


class PhotosGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response159


class PhotosSaveMarketAlbumPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class PhotosSaveMarketPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class PhotosSaveMessagesPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class PhotosSaveWallPhotoResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class PhotosSaveResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[PhotosPhoto]


class Response168(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[PhotosPhoto]] = None


class PhotosSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response168


class StatsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[StatsPeriod]


class StoriesGetStatsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: StoriesStoryStats


class UtilsGetLinkStatsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: UtilsLinkStatsExtended


class AdsDemoStats(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[int] = Field(None, description='Object ID')
    stats: Optional[AdsDemostatsFormat] = None
    type: Optional[AdsObjectType] = None


class BaseCropPhoto(BaseModel):
    class Config:
        extra = Extra.forbid

    photo: PhotosPhoto
    crop: BaseCropPhotoCrop
    rect: BaseCropPhotoRect


class BaseLink(BaseModel):
    class Config:
        extra = Extra.forbid

    application: Optional[BaseLinkApplication] = None
    button: Optional[BaseLinkButton] = None
    caption: Optional[str] = Field(None, description='Link caption')
    description: Optional[str] = Field(None, description='Link description')
    id: Optional[str] = Field(None, description='Link ID')
    is_favorite: Optional[bool] = None
    photo: Optional[PhotosPhoto] = None
    preview_page: Optional[str] = Field(
        None, description='String ID of the page with article preview'
    )
    preview_url: Optional[AnyUrl] = Field(
        None, description='URL of the page with article preview'
    )
    product: Optional[BaseLinkProduct] = None
    rating: Optional[BaseLinkRating] = None
    title: Optional[str] = Field(None, description='Link title')
    url: str = Field(..., description='Link URL')
    target_object: Optional[LinkTargetObject] = None
    is_external: Optional[bool] = Field(
        None, description='Information whether the current link is external'
    )
    video: Optional[VideoVideo] = Field(None, description='Video from link')


class DocsDocPreview(BaseModel):
    class Config:
        extra = Extra.forbid

    audio_msg: Optional[DocsDocPreviewAudioMsg] = None
    graffiti: Optional[DocsDocPreviewGraffiti] = None
    photo: Optional[DocsDocPreviewPhoto] = None
    video: Optional[DocsDocPreviewVideo] = None


class GroupsGroupFull(GroupsGroup):
    class Config:
        extra = Extra.forbid

    market: Optional[GroupsMarketInfo] = None
    member_status: Optional[GroupsGroupFullMemberStatus] = Field(
        None, description="Current user's member status"
    )
    is_adult: Optional[BaseBoolInt] = Field(
        None, description='Information whether community is adult'
    )
    is_hidden_from_feed: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether community is hidden from current user's newsfeed",
    )
    is_favorite: Optional[BaseBoolInt] = Field(
        None, description='Information whether community is in faves'
    )
    is_subscribed: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user is subscribed'
    )
    city: Optional[BaseObject] = None
    country: Optional[BaseCountry] = None
    verified: Optional[BaseBoolInt] = Field(
        None, description='Information whether community is verified'
    )
    description: Optional[str] = Field(None, description='Community description')
    wiki_page: Optional[str] = Field(
        None, description="Community's main wiki page title"
    )
    members_count: Optional[conint(ge=0)] = Field(
        None, description='Community members number'
    )
    requests_count: Optional[conint(ge=0)] = Field(
        None, description='The number of incoming requests to the community'
    )
    video_live_level: Optional[conint(ge=0)] = Field(
        None, description='Community level live streams achievements'
    )
    video_live_count: Optional[conint(ge=0)] = Field(
        None, description="Number of community's live streams"
    )
    clips_count: Optional[conint(ge=0)] = Field(
        None, description="Number of community's clips"
    )
    counters: Optional[GroupsCountersGroup] = None
    cover: Optional[GroupsCover] = None
    can_post: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether current user can post on community's wall",
    )
    can_suggest: Optional[BaseBoolInt] = None
    can_upload_story: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can upload story'
    )
    can_upload_doc: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can upload doc'
    )
    can_upload_video: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can upload video'
    )
    can_see_all_posts: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether current user can see all posts on community's wall",
    )
    can_create_topic: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can create topic'
    )
    activity: Optional[str] = Field(
        None,
        description='Type of group, start date of event or category of public page',
    )
    fixed_post: Optional[int] = Field(None, description='Fixed post ID')
    has_photo: Optional[BaseBoolInt] = Field(
        None, description='Information whether community has photo'
    )
    crop_photo: Optional[BaseCropPhoto] = Field(
        None,
        description='Данные о точках, по которым вырезаны профильная и миниатюрная фотографии сообщества',
    )
    status: Optional[str] = Field(None, description='Community status')
    status_audio: Optional[AudioAudio] = None
    main_album_id: Optional[int] = Field(
        None, description="Community's main photo album ID"
    )
    links: Optional[List[GroupsLinksItem]] = None
    contacts: Optional[List[GroupsContactsItem]] = None
    wall: Optional[Wall] = Field(
        None, description='Information about wall status in community'
    )
    site: Optional[str] = Field(None, description="Community's website")
    main_section: Optional[GroupsGroupFullSection] = None
    secondary_section: Optional[GroupsGroupFullSection] = None
    trending: Optional[BaseBoolInt] = Field(
        None, description='Information whether the community has a "fire" pictogram.'
    )
    can_message: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can send a message to community',
    )
    is_messages_blocked: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether community can send a message to current user',
    )
    can_send_notify: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether community can send notifications by phone number to current user',
    )
    online_status: Optional[GroupsOnlineStatus] = Field(
        None, description='Status of replies in community messages'
    )
    invited_by: Optional[conint(ge=1)] = Field(None, description='Inviter ID')
    age_limits: Optional[GroupsGroupFullAgeLimits] = Field(
        None, description='Information whether age limit'
    )
    ban_info: Optional[GroupsGroupBanInfo] = Field(None, description='User ban info')
    has_market_app: Optional[bool] = Field(
        None, description='Information whether community has installed market app'
    )
    using_vkpay_market_app: Optional[bool] = None
    has_group_channel: Optional[bool] = None
    addresses: Optional[GroupsAddressesInfo] = Field(
        None, description='Info about addresses in groups'
    )
    is_subscribed_podcasts: Optional[bool] = Field(
        None, description='Information whether current user is subscribed to podcasts'
    )
    can_subscribe_podcasts: Optional[bool] = Field(
        None, description='Owner in whitelist or not'
    )
    is_subscribed_stories: Optional[bool] = Field(
        None, description='Information whether current user is subscribed to stories'
    )
    can_subscribe_stories: Optional[bool] = Field(
        None, description='Owner in whitelist or not'
    )
    can_subscribe_posts: Optional[bool] = Field(
        None, description='Can subscribe to wall'
    )
    live_covers: Optional[GroupsLiveCovers] = Field(
        None, description='Live covers state'
    )
    stories_archive_count: Optional[int] = None
    has_unseen_stories: Optional[bool] = None


class UsersUserFull(UsersUser):
    class Config:
        extra = Extra.forbid

    first_name_nom: Optional[str] = Field(
        None, description="User's first name in nominative case"
    )
    first_name_gen: Optional[str] = Field(
        None, description="User's first name in genitive case"
    )
    first_name_dat: Optional[str] = Field(
        None, description="User's first name in dative case"
    )
    first_name_acc: Optional[str] = Field(
        None, description="User's first name in accusative case"
    )
    first_name_ins: Optional[str] = Field(
        None, description="User's first name in instrumental case"
    )
    first_name_abl: Optional[str] = Field(
        None, description="User's first name in prepositional case"
    )
    last_name_nom: Optional[str] = Field(
        None, description="User's last name in nominative case"
    )
    last_name_gen: Optional[str] = Field(
        None, description="User's last name in genitive case"
    )
    last_name_dat: Optional[str] = Field(
        None, description="User's last name in dative case"
    )
    last_name_acc: Optional[str] = Field(
        None, description="User's last name in accusative case"
    )
    last_name_ins: Optional[str] = Field(
        None, description="User's last name in instrumental case"
    )
    last_name_abl: Optional[str] = Field(
        None, description="User's last name in prepositional case"
    )
    nickname: Optional[str] = Field(None, description='User nickname')
    maiden_name: Optional[str] = Field(None, description='User maiden name')
    contact_name: Optional[str] = Field(None, description='User contact name')
    domain: Optional[str] = Field(None, description="Domain name of the user's page")
    bdate: Optional[str] = Field(None, description="User's date of birth")
    city: Optional[BaseCity] = None
    country: Optional[BaseCountry] = None
    timezone: Optional[float] = Field(None, description="User's timezone")
    owner_state: Optional[OwnerState] = None
    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the user with 200 pixels in width'
    )
    photo_max: Optional[AnyUrl] = Field(
        None, description='URL of square photo of the user with maximum width'
    )
    photo_200_orig: Optional[AnyUrl] = Field(
        None, description="URL of user's photo with 200 pixels in width"
    )
    photo_400_orig: Optional[AnyUrl] = Field(
        None, description="URL of user's photo with 400 pixels in width"
    )
    photo_max_orig: Optional[AnyUrl] = Field(
        None, description="URL of user's photo of maximum size"
    )
    photo_id: Optional[str] = Field(None, description="ID of the user's main photo")
    has_photo: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user has main photo'
    )
    has_mobile: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user specified his phone number'
    )
    is_friend: Optional[BaseBoolInt] = Field(
        None, description='Information whether the user is a friend of current user'
    )
    wall_comments: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment wall posts'
    )
    can_post: Optional[BaseBoolInt] = Field(
        None, description="Information whether current user can post on the user's wall"
    )
    can_see_all_posts: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether current user can see other users' audio on the wall",
    )
    can_see_audio: Optional[BaseBoolInt] = Field(
        None, description="Information whether current user can see the user's audio"
    )
    type: Optional[UsersUserType] = None
    email: Optional[str] = None
    skype: Optional[str] = None
    facebook: Optional[str] = None
    facebook_name: Optional[str] = None
    twitter: Optional[str] = None
    livejournal: Optional[str] = None
    instagram: Optional[str] = None
    test: Optional[BaseBoolInt] = None
    video_live: Optional[VideoLiveInfo] = None
    is_video_live_notifications_blocked: Optional[BaseBoolInt] = None
    is_service: Optional[bool] = None
    service_description: Optional[str] = None
    photo_rec: Optional[PhotosPhotoFalseable] = None
    photo_medium: Optional[PhotosPhotoFalseable] = None
    photo_medium_rec: Optional[PhotosPhotoFalseable] = None
    photo: Optional[str] = None
    photo_big: Optional[str] = None
    photo_400: Optional[str] = None
    photo_max_size: Optional[PhotosPhoto] = None
    language: Optional[str] = None
    stories_archive_count: Optional[int] = None
    has_unseen_stories: Optional[bool] = None
    wall_default: Optional[WallDefault] = None
    can_call: Optional[bool] = Field(
        None, description='Information whether current user can call'
    )
    can_call_from_group: Optional[bool] = Field(
        None, description='Information whether group can call user'
    )
    can_see_wishes: Optional[bool] = Field(
        None, description="Information whether current user can see the user's wishes"
    )
    can_see_gifts: Optional[BaseBoolInt] = Field(
        None, description="Information whether current user can see the user's gifts"
    )
    interests: Optional[str] = None
    books: Optional[str] = None
    tv: Optional[str] = None
    quotes: Optional[str] = None
    about: Optional[str] = None
    games: Optional[str] = None
    movies: Optional[str] = None
    activities: Optional[str] = None
    music: Optional[str] = None
    can_write_private_message: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can write private message'
    )
    can_send_friend_request: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can send a friend request'
    )
    can_be_invited_group: Optional[bool] = Field(
        None,
        description='Information whether current user can be invited to the community',
    )
    mobile_phone: Optional[str] = Field(None, description="User's mobile phone number")
    home_phone: Optional[str] = Field(
        None, description="User's additional phone number"
    )
    site: Optional[str] = Field(None, description="User's website")
    status_audio: Optional[AudioAudio] = None
    status: Optional[str] = Field(None, description="User's status")
    activity: Optional[str] = Field(None, description="User's status")
    last_seen: Optional[UsersLastSeen] = None
    exports: Optional[UsersExports] = None
    crop_photo: Optional[BaseCropPhoto] = None
    followers_count: Optional[conint(ge=0)] = Field(
        None, description="Number of user's followers"
    )
    video_live_level: Optional[conint(ge=0)] = Field(
        None, description='User level in live streams achievements'
    )
    video_live_count: Optional[conint(ge=0)] = Field(
        None, description="Number of user's live streams"
    )
    clips_count: Optional[conint(ge=0)] = Field(
        None, description="Number of user's clips"
    )
    blacklisted: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether current user is in the requested user's blacklist.",
    )
    blacklisted_by_me: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether the requested user is in current user's blacklist",
    )
    is_favorite: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether the requested user is in faves of current user',
    )
    is_hidden_from_feed: Optional[BaseBoolInt] = Field(
        None,
        description="Information whether the requested user is hidden from current user's newsfeed",
    )
    common_count: Optional[conint(ge=0)] = Field(
        None, description='Number of common friends with current user'
    )
    occupation: Optional[UsersOccupation] = None
    career: Optional[List[UsersCareer]] = None
    military: Optional[List[UsersMilitary]] = None
    university: Optional[int] = Field(None, description='University ID')
    university_name: Optional[str] = Field(None, description='University name')
    university_group_id: Optional[int] = None
    faculty: Optional[int] = Field(None, description='Faculty ID')
    faculty_name: Optional[str] = Field(None, description='Faculty name')
    graduation: Optional[int] = Field(None, description='Graduation year')
    education_form: Optional[str] = Field(None, description='Education form')
    education_status: Optional[str] = Field(None, description="User's education status")
    home_town: Optional[str] = Field(None, description='User hometown')
    relation: Optional[UsersUserRelation] = Field(
        None, description='User relationship status'
    )
    relation_partner: Optional[UsersUserMin] = None
    personal: Optional[UsersPersonal] = None
    universities: Optional[List[UsersUniversity]] = None
    schools: Optional[List[UsersSchool]] = None
    relatives: Optional[List[UsersRelative]] = None
    is_subscribed_podcasts: Optional[bool] = Field(
        None, description='Information whether current user is subscribed to podcasts'
    )
    can_subscribe_podcasts: Optional[bool] = Field(
        None, description='Owner in whitelist or not'
    )
    can_subscribe_posts: Optional[bool] = Field(
        None, description='Can subscribe to wall'
    )
    counters: Optional[UsersUserCounters] = None
    access_key: Optional[str] = None
    can_upload_doc: Optional[BaseBoolInt] = None
    hash: Optional[str] = None
    is_no_index: Optional[bool] = Field(
        None, description='Access to user profile is restricted for search engines'
    )
    contact_id: Optional[int] = Field(None, description='Contact person ID')
    is_message_request: Optional[bool] = None
    descriptions: Optional[List[str]] = None
    lists: Optional[List[int]] = None
    can_invite_to_chats: Optional[bool] = None

class GroupsUserXtrRole(UsersUserFull):
    class Config:
        extra = Extra.forbid

    role: Optional[GroupsRoleOptions] = None


class MarketMarketItemFull(MarketMarketItem):
    class Config:
        extra = Extra.forbid

    albums_ids: Optional[List[int]] = None
    photos: Optional[List[PhotosPhoto]] = None
    can_comment: Optional[BaseBoolInt] = Field(
        None, description='Information whether current use can comment the item'
    )
    can_repost: Optional[BaseBoolInt] = Field(
        None, description='Information whether current use can repost the item'
    )
    likes: Optional[BaseLikes] = None
    reposts: Optional[BaseRepostsInfo] = None
    views_count: Optional[int] = Field(None, description='Views number')
    wishlist_item_id: Optional[int] = Field(
        None, description='Object identifier in wishlist of viewer'
    )
    cancel_info: Optional[BaseLink] = Field(
        None, description='Information for cancel and revert order'
    )
    user_agreement_info: Optional[str] = Field(None, description='User agreement info')


class MarketOrder(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0)
    group_id: conint(ge=0)
    user_id: conint(ge=0)
    display_order_id: Optional[str] = None
    date: conint(ge=0)
    status: conint(ge=0)
    items_count: conint(ge=0)
    track_number: Optional[str] = None
    track_link: Optional[str] = None
    comment: Optional[str] = None
    address: Optional[str] = None
    merchant_comment: Optional[str] = None
    weight: Optional[conint(ge=0)] = None
    total_price: MarketPrice
    preview_order_items: Optional[List[MarketOrderItem]] = Field(
        None, description='Several order items for preview'
    )
    cancel_info: Optional[BaseLink] = Field(
        None, description='Information for cancel and revert order'
    )


class MessagesChatFull(BaseModel):
    class Config:
        extra = Extra.forbid

    admin_id: int = Field(..., description='Chat creator ID')
    id: int = Field(..., description='Chat ID')
    kicked: Optional[BaseBoolInt] = Field(
        None, description='Shows that user has been kicked from the chat'
    )
    left: Optional[BaseBoolInt] = Field(
        None, description='Shows that user has been left the chat'
    )
    photo_100: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 100 px in width'
    )
    photo_200: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 200 px in width'
    )
    photo_50: Optional[AnyUrl] = Field(
        None, description='URL of the preview image with 50 px in width'
    )
    push_settings: Optional[MessagesChatPushSettings] = None
    title: Optional[str] = Field(None, description='Chat title')
    type: str = Field(..., description='Chat type')
    users: List[MessagesUserXtrInvitedBy]


class MessagesGetConversationMembers(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Chat members count')
    items: List[MessagesConversationMember]
    chat_restrictions: Optional[MessagesChatRestrictions] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class NewsfeedItemPhotoPhotos(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Photos number')
    items: Optional[List[NewsfeedNewsfeedPhoto]] = None


class NewsfeedItemPhotoTag(WallCarouselBase, NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    photo_tags: Optional[NewsfeedItemPhotoTagPhotoTags] = None
    post_id: Optional[int] = Field(None, description='Post ID')


class NewsfeedItemVideo(WallCarouselBase, NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    video: Optional[NewsfeedItemVideoVideo] = None


class SearchHint(BaseModel):
    class Config:
        extra = Extra.forbid

    app: Optional[AppsApp] = None
    description: str = Field(..., description='Object description')
    global_: Optional[BaseBoolInt] = Field(
        None,
        alias='global',
        description='Information whether the object has been found globally',
    )
    group: Optional[GroupsGroup] = None
    profile: Optional[UsersUserMin] = None
    section: Optional[SearchHintSection] = None
    type: SearchHintType
    link: Optional[BaseLink] = None


class StoriesClickableSticker(BaseModel):
    class Config:
        extra = Extra.forbid

    clickable_area: List[StoriesClickableArea]
    id: int = Field(..., description='Clickable sticker ID')
    hashtag: Optional[str] = None
    link_object: Optional[BaseLink] = None
    mention: Optional[str] = None
    tooltip_text: Optional[str] = None
    owner_id: Optional[int] = None
    story_id: Optional[int] = None
    question: Optional[str] = None
    question_button: Optional[str] = None
    place_id: Optional[int] = None
    market_item: Optional[MarketMarketItem] = None
    audio: Optional[AudioAudio] = None
    audio_start_time: Optional[int] = None
    style: Optional[Style5] = None
    type: Type6
    subtype: Optional[Subtype] = None
    post_owner_id: Optional[int] = None
    post_id: Optional[int] = None
    poll: Optional[PollsPoll] = None
    color: Optional[str] = Field(None, description='Color, hex format')
    sticker_id: Optional[int] = Field(None, description='Sticker ID')
    sticker_pack_id: Optional[int] = Field(None, description='Sticker pack ID')
    app: Optional[AppsAppMin] = None
    app_context: Optional[str] = Field(
        None, description='Additional context for app sticker'
    )
    has_new_interactions: Optional[bool] = Field(
        None, description='Whether current user has unread interaction with this app'
    )
    is_broadcast_notify_allowed: Optional[bool] = Field(
        None, description='Whether current user allowed broadcast notify from this app'
    )
    situational_theme_id: Optional[int] = None
    situational_app_url: Optional[str] = None


class StoriesClickableStickers(BaseModel):
    class Config:
        extra = Extra.forbid

    clickable_stickers: List[StoriesClickableSticker]
    original_height: conint(ge=0)
    original_width: conint(ge=0)


class StoriesStory(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(
        None, description='Access key for private object.'
    )
    can_comment: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can comment the story (0 - no, 1 - yes).',
    )
    can_reply: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can reply to the story (0 - no, 1 - yes).',
    )
    can_see: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can see the story (0 - no, 1 - yes).',
    )
    can_like: Optional[bool] = Field(
        None, description='Information whether current user can like the story.'
    )
    can_share: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can share the story (0 - no, 1 - yes).',
    )
    can_hide: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user can hide the story (0 - no, 1 - yes).',
    )
    date: Optional[conint(ge=0)] = Field(
        None, description='Date when story has been added in Unixtime.'
    )
    expires_at: Optional[conint(ge=0)] = Field(
        None, description='Story expiration time. Unixtime.'
    )
    id: int = Field(..., description='Story ID.')
    is_deleted: Optional[bool] = Field(
        None,
        description='Information whether the story is deleted (false - no, true - yes).',
    )
    is_expired: Optional[bool] = Field(
        None,
        description='Information whether the story is expired (false - no, true - yes).',
    )
    link: Optional[StoriesStoryLink] = None
    owner_id: int = Field(..., description="Story owner's ID.")
    parent_story: Optional[StoriesStory] = None
    parent_story_access_key: Optional[str] = Field(
        None, description='Access key for private object.'
    )
    parent_story_id: Optional[int] = Field(None, description='Parent story ID.')
    parent_story_owner_id: Optional[int] = Field(
        None, description="Parent story owner's ID."
    )
    photo: Optional[PhotosPhoto] = None
    replies: Optional[StoriesReplies] = Field(
        None, description='Replies counters to current story.'
    )
    seen: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether current user has seen the story or not (0 - no, 1 - yes).',
    )
    type: Optional[StoriesStoryType] = None
    clickable_stickers: Optional[StoriesClickableStickers] = None
    video: Optional[VideoVideo] = None
    views: Optional[conint(ge=0)] = Field(None, description='Views number.')
    can_ask: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether story has question sticker and current user can send question to the author',
    )
    can_ask_anonymous: Optional[BaseBoolInt] = Field(
        None,
        description='Information whether story has question sticker and current user can send anonymous question to the author',
    )
    narratives_count: Optional[int] = None
    first_narrative_title: Optional[str] = None
    birthday_wish_user_id: Optional[int] = None
    can_use_in_narrative: Optional[bool] = None


class StoriesViewersItem(BaseModel):
    class Config:
        extra = Extra.forbid

    is_liked: bool = Field(..., description='user has like for this object')
    user_id: int = Field(..., description='user id')
    user: Optional[UsersUserFull] = None


class UsersSubscriptionsItem(BaseModel):
    __root__: Union[UsersUserXtrType, GroupsGroupFull]


class WallPostSource(BaseModel):
    class Config:
        extra = Extra.forbid

    data: Optional[str] = Field(None, description='Additional data')
    platform: Optional[str] = Field(None, description='Platform name')
    type: Optional[WallPostSourceType] = None
    url: Optional[AnyUrl] = Field(
        None, description='URL to an external site used to publish the post'
    )
    link: Optional[BaseLink] = None


class WidgetsCommentRepliesItem(BaseModel):
    class Config:
        extra = Extra.forbid

    cid: Optional[int] = Field(None, description='Comment ID')
    date: Optional[int] = Field(
        None, description='Date when the comment has been added in Unixtime'
    )
    likes: Optional[WidgetsWidgetLikes] = None
    text: Optional[str] = Field(None, description='Comment text')
    uid: Optional[int] = Field(None, description='User ID')
    user: Optional[UsersUserFull] = None


class Response2(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[int]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroup]] = None


class AccountGetBannedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response2


class AdsGetDemographicsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[AdsDemoStats]


class Response16(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[UsersUserFull]] = None


class AppsGetFriendsListResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response16


class Response42(BaseModel):
    class Config:
        extra = Extra.forbid

    subscriptions: List[DonutDonatorSubscriptionInfo]
    count: Optional[conint(ge=0)] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class DonutGetSubscriptionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response42


class Response56(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total results number')
    items: List[UsersUserFull]


class FriendsGetSuggestionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response56


class Response57(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total friends number')
    items: List[UsersUserFull]


class FriendsGetFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response57


class Response59(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[UsersUserFull]


class FriendsSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response59


class GroupsGetByIdObjectLegacyResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[GroupsGroupFull]


class Response69(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[UsersUserFull]


class GroupsGetInvitedUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response69


class Response70(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[GroupsGroupFull]
    profiles: List[UsersUserMin]
    groups: List[GroupsGroupFull]


class GroupsGetInvitesExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response70


class Response71(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[GroupsGroupFull]


class GroupsGetInvitesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response71


class Response72(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total members number')
    items: List[GroupsUserXtrRole]


class GroupsGetMembersFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response72


class Response75(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[UsersUserFull]


class GroupsGetRequestsFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response75


class Response79(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total communities number')
    items: List[GroupsGroupFull]


class GroupsGetObjectExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response79


class Response95(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketItemFull]] = None


class MarketGetByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response95


class Response100(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[MarketOrder]


class MarketGetGroupOrdersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response100


class Response101(BaseModel):
    class Config:
        extra = Extra.forbid

    order: Optional[MarketOrder] = None


class MarketGetOrderByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response101


class Response103(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[MarketOrder]
    groups: Optional[List[GroupsGroupFull]] = None


class MarketGetOrdersExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response103


class Response104(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[MarketOrder]


class MarketGetOrdersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response104


class Response105(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[MarketMarketItemFull]] = None
    variants: Optional[List[MarketMarketItemFull]] = None


class MarketGetExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response105


class Response107(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    view_type: MarketServicesViewType
    items: List[MarketMarketItemFull]
    variants: Optional[List[MarketMarketItemFull]] = None


class MarketSearchExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response107


class Response114(BaseModel):
    class Config:
        extra = Extra.forbid

    preview: Optional[MessagesChatPreview] = None
    profiles: Optional[List[UsersUserFull]] = None


class MessagesGetChatPreviewResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response114


class MessagesGetChatChatIdsFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[MessagesChatFull]


class MessagesGetChatFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesChatFull


class MessagesGetConversationMembersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesGetConversationMembers


class Response121(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0)
    items: List[conint(ge=0)]
    profiles: Optional[List[UsersUserFull]] = None


class MessagesGetIntentUsersResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response121


class Response131(BaseModel):
    class Config:
        extra = Extra.forbid

    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class NewsfeedGetBannedExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response131


class Response138(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[UsersSubscriptionsItem]] = None


class NewsfeedGetSuggestedSourcesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response138


class Response175(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0)
    items: List[SearchHint]
    suggested_queries: Optional[List[str]] = None


class SearchGetHintsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response175


class Response177(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Stories count')
    items: List[int]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class StoriesGetBannedExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response177


class Response179(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Stories count')
    items: List[StoriesStory]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class StoriesGetByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response179


class Response180(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Stories count')
    items: List[StoriesStory]


class StoriesGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response180


class Response183(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Viewers count')
    items: List[StoriesViewersItem]
    hidden_reason: Optional[str] = None
    next_from: Optional[str] = None


class StoriesGetViewersExtendedV5115Response(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response183


class Response184(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Viewers count')
    items: List[UsersUserFull]


class StoriesGetViewersExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response184


class Response186(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Stories count')
    items: List[List[StoriesStory]]
    promo_data: Optional[StoriesPromoBlock] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroup]] = None
    need_upload_screen: Optional[bool] = None


class StoriesGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response186


class Response187(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int
    items: List[StoriesStory]
    profiles: Optional[List[UsersUser]] = None
    groups: Optional[List[GroupsGroup]] = None


class StoriesSaveResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response187


class Response190(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number of available results')
    items: List[UsersUserFull]


class UsersGetFollowersFieldsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response190


class Response192(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number of available results')
    items: List[UsersSubscriptionsItem]


class UsersGetSubscriptionsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response192


class UsersGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[UsersUserFull]


class Response194(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number of available results')
    items: List[UsersUserFull]


class UsersSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response194


class Response202(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[VideoVideoFull]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class VideoGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response202


class Response203(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[VideoVideoFull]
    profiles: List[UsersUser]
    groups: List[GroupsGroupFull]


class VideoSearchExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response203


class DocsDoc(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=0) = Field(..., description='Document ID')
    owner_id: int = Field(..., description='Document owner ID')
    title: str = Field(..., description='Document title')
    size: conint(ge=0) = Field(..., description='File size in bites')
    ext: str = Field(..., description='File extension')
    url: Optional[AnyUrl] = Field(None, description='File URL')
    date: conint(ge=0) = Field(
        ..., description='Date when file has been uploaded in Unixtime'
    )
    type: int = Field(..., description='Document type')
    preview: Optional[DocsDocPreview] = None
    is_licensed: Optional[BaseBoolInt] = None
    access_key: Optional[str] = Field(None, description='Access key for the document')
    tags: Optional[List[str]] = Field(None, description='Document tags')


class FavePage(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str = Field(..., description='Some info about user or group')
    group: Optional[GroupsGroupFull] = None
    tags: List[FaveTag]
    type: FavePageType = Field(..., description='Item type')
    updated_date: Optional[conint(ge=0)] = Field(
        None, description='Timestamp, when this page was bookmarked'
    )
    user: Optional[UsersUserFull] = None


class FriendsUserXtrPhone(UsersUserFull):
    class Config:
        extra = Extra.forbid

    phone: Optional[str] = Field(None, description='User phone')


class MessagesHistoryMessageAttachment(BaseModel):
    class Config:
        extra = Extra.forbid

    audio: Optional[AudioAudio] = None
    audio_message: Optional[MessagesAudioMessage] = None
    doc: Optional[DocsDoc] = None
    graffiti: Optional[MessagesGraffiti] = None
    link: Optional[BaseLink] = None
    market: Optional[BaseLink] = None
    photo: Optional[PhotosPhoto] = None
    share: Optional[BaseLink] = None
    type: MessagesHistoryMessageAttachmentType
    video: Optional[VideoVideo] = None
    wall: Optional[BaseLink] = None


class WallWallpostAttachment(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key for the audio')
    album: Optional[PhotosPhotoAlbum] = None
    app: Optional[WallAppPost] = None
    audio: Optional[AudioAudio] = None
    doc: Optional[DocsDoc] = None
    event: Optional[EventsEventAttach] = None
    group: Optional[GroupsGroupAttach] = None
    graffiti: Optional[WallGraffiti] = None
    link: Optional[BaseLink] = None
    market: Optional[MarketMarketItem] = None
    market_album: Optional[MarketMarketAlbum] = None
    note: Optional[NotesNote] = None
    page: Optional[PagesWikipageFull] = None
    photo: Optional[PhotosPhoto] = None
    poll: Optional[PollsPoll] = None
    posted_photo: Optional[WallPostedPhoto] = None
    type: WallWallpostAttachmentType
    video: Optional[VideoVideoFull] = None


class NewsfeedItemPhoto(WallCarouselBase, NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    photos: Optional[NewsfeedItemPhotoPhotos] = None
    post_id: Optional[int] = Field(None, description='Post ID')


class NotificationsFeedback(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[WallWallpostAttachment]] = None
    from_id: Optional[int] = Field(None, description="Reply author's ID")
    geo: Optional[BaseGeo] = None
    id: Optional[int] = Field(None, description='Item ID')
    likes: Optional[BaseLikesInfo] = None
    text: Optional[str] = Field(None, description='Reply text')
    to_id: Optional[int] = Field(None, description="Wall owner's ID")


class NotificationsNotification(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[int] = Field(
        None, description='Date when the event has been occurred'
    )
    feedback: Optional[NotificationsFeedback] = None
    parent: Optional[NotificationsNotification] = None
    reply: Optional[NotificationsReply] = None
    type: Optional[str] = Field(None, description='Notification type')


class NotificationsNotificationItem(BaseModel):
    __root__: NotificationsNotification


class WallWallpostToId(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[WallWallpostAttachment]] = None
    comments: Optional[BaseCommentsInfo] = None
    copy_owner_id: Optional[int] = Field(
        None, description='ID of the source post owner'
    )
    copy_post_id: Optional[int] = Field(None, description='ID of the source post')
    date: Optional[int] = Field(None, description='Date of publishing in Unixtime')
    from_id: Optional[int] = Field(None, description='Post author ID')
    geo: Optional[WallGeo] = None
    id: Optional[int] = Field(None, description='Post ID')
    is_favorite: Optional[bool] = Field(
        None, description='Information whether the post in favorites list'
    )
    likes: Optional[BaseLikesInfo] = None
    post_id: Optional[int] = Field(None, description='wall post ID (if comment)')
    post_source: Optional[WallPostSource] = None
    post_type: Optional[WallPostType] = None
    reposts: Optional[BaseRepostsInfo] = None
    signer_id: Optional[int] = Field(None, description='Post signer ID')
    text: Optional[str] = Field(None, description='Post text')
    to_id: Optional[int] = Field(None, description="Wall owner's ID")


class StoriesFeedItem(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Type7 = Field(..., description='Type of Feed Item')
    id: Optional[str] = None
    stories: Optional[List[StoriesStory]] = Field(None, description='Author stories')
    grouped: Optional[List[StoriesFeedItem]] = Field(
        None,
        description='Grouped stories of various authors (for types community_grouped_stories/app_grouped_stories type)',
    )
    app: Optional[AppsAppMin] = Field(
        None,
        description='App, which stories has been grouped (for type app_grouped_stories)',
    )
    promo_data: Optional[StoriesPromoBlock] = Field(
        None, description='Additional data for promo stories (for type promo_stories)'
    )
    birthday_user_id: Optional[int] = None
    track_code: Optional[str] = None
    has_unseen: Optional[bool] = None
    name: Optional[str] = None


class WidgetsCommentReplies(BaseModel):
    class Config:
        extra = Extra.forbid

    can_post: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can comment the post'
    )
    count: Optional[conint(ge=0)] = Field(None, description='Comments number')
    replies: Optional[List[WidgetsCommentRepliesItem]] = None


class DocsGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[DocsDoc]


class Response39(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[DocsDoc]


class DocsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response39


class Response40(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[DocsDocAttachmentType] = None
    audio_message: Optional[MessagesAudioMessage] = None
    doc: Optional[DocsDoc] = None
    graffiti: Optional[MessagesGraffiti] = None


class DocsSaveResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response40


class Response41(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[DocsDoc]


class DocsSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response41


class Response44(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = None
    items: Optional[List[FavePage]] = None


class FaveGetPagesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response44


class FriendsGetByPhonesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[FriendsUserXtrPhone]


class Response136(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallpostToId]


class NewsfeedGetMentionsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response136


class Response145(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[NotificationsNotificationItem]] = None
    profiles: Optional[List[UsersUser]] = None
    groups: Optional[List[GroupsGroup]] = None
    last_viewed: Optional[int] = Field(
        None, description='Time when user has been checked notifications last time'
    )
    photos: Optional[List[PhotosPhoto]] = None
    videos: Optional[List[VideoVideo]] = None
    apps: Optional[List[AppsApp]] = None
    next_from: Optional[str] = None
    ttl: Optional[int] = None


class NotificationsGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response145


class Response185(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int
    items: List[StoriesFeedItem]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroup]] = None
    need_upload_screen: Optional[bool] = None


class StoriesGetV5113Response(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response185


class WallCommentAttachment(BaseModel):
    class Config:
        extra = Extra.forbid

    audio: Optional[AudioAudio] = None
    doc: Optional[DocsDoc] = None
    link: Optional[BaseLink] = None
    market: Optional[MarketMarketItem] = None
    market_market_album: Optional[MarketMarketAlbum] = None
    note: Optional[WallAttachedNote] = None
    page: Optional[PagesWikipageFull] = None
    photo: Optional[PhotosPhoto] = None
    sticker: Optional[BaseSticker] = None
    type: WallCommentAttachmentType
    video: Optional[VideoVideo] = None


class MessagesHistoryAttachment(BaseModel):
    class Config:
        extra = Extra.forbid

    attachment: MessagesHistoryMessageAttachment
    message_id: int = Field(..., description='Message ID')
    from_id: int = Field(..., description="Message author's ID")
    forward_level: Optional[int] = Field(None, description='Forward level (optional)')


class WallWallpost(BaseModel):
    class Config:
        extra = Extra.forbid

    access_key: Optional[str] = Field(None, description='Access key to private object')
    is_deleted: Optional[bool] = None
    attachments: Optional[List[WallWallpostAttachment]] = None
    copyright: Optional[WallPostCopyright] = Field(
        None, description='Information about the source of the post'
    )
    date: Optional[int] = Field(None, description='Date of publishing in Unixtime')
    edited: Optional[conint(ge=0)] = Field(
        None, description='Date of editing in Unixtime'
    )
    from_id: Optional[int] = Field(None, description='Post author ID')
    geo: Optional[WallGeo] = None
    id: Optional[int] = Field(None, description='Post ID')
    is_archived: Optional[bool] = Field(
        None, description='Is post archived, only for post owners'
    )
    is_favorite: Optional[bool] = Field(
        None, description='Information whether the post in favorites list'
    )
    likes: Optional[BaseLikesInfo] = Field(None, description='Count of likes')
    owner_id: Optional[int] = Field(None, description="Wall owner's ID")
    post_id: Optional[int] = Field(
        None, description="If post type 'reply', contains original post ID"
    )
    parents_stack: Optional[List[int]] = Field(
        None, description="If post type 'reply', contains original parent IDs stack"
    )
    post_source: Optional[WallPostSource] = None
    post_type: Optional[WallPostType] = None
    reposts: Optional[BaseRepostsInfo] = None
    signer_id: Optional[int] = Field(None, description='Post signer ID')
    text: Optional[str] = Field(None, description='Post text')
    views: Optional[WallViews] = Field(None, description='Count of views')


class NewsfeedItemDigestFullItem(BaseModel):
    class Config:
        extra = Extra.forbid

    text: Optional[str] = None
    source_name: Optional[str] = None
    attachment_index: Optional[int] = None
    attachment: Optional[WallWallpostAttachment] = None
    style: Optional[Style2] = None
    post: WallWallpost


class NotificationsNotificationsComment(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[conint(ge=0)] = Field(
        None, description='Date when the comment has been added in Unixtime'
    )
    id: Optional[conint(ge=1)] = Field(None, description='Comment ID')
    owner_id: Optional[int] = Field(None, description='Author ID')
    photo: Optional[PhotosPhoto] = None
    post: Optional[WallWallpost] = None
    text: Optional[str] = Field(None, description='Comment text')
    topic: Optional[BoardTopic] = None
    video: Optional[VideoVideo] = None


class WidgetsWidgetComment(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[WallCommentAttachment]] = None
    can_delete: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can delete the comment'
    )
    comments: Optional[WidgetsCommentReplies] = None
    date: int = Field(
        ..., description='Date when the comment has been added in Unixtime'
    )
    from_id: int = Field(..., description='Comment author ID')
    id: int = Field(..., description='Comment ID')
    likes: Optional[BaseLikesInfo] = None
    media: Optional[WidgetsCommentMedia] = None
    post_source: Optional[WallPostSource] = None
    post_type: int = Field(..., description='Post type')
    reposts: Optional[BaseRepostsInfo] = None
    text: str = Field(..., description='Comment text')
    to_id: int = Field(..., description='Wall owner')
    user: Optional[UsersUserFull] = None


class Response116(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[MessagesHistoryAttachment]] = None
    next_from: Optional[str] = Field(None, description='Value for pagination')


class MessagesGetHistoryAttachmentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response116


class Response222(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    posts: List[WidgetsWidgetComment]


class WidgetsGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response222


class BoardTopicComment(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[WallCommentAttachment]] = None
    date: conint(ge=0) = Field(
        ..., description='Date when the comment has been added in Unixtime'
    )
    from_id: int = Field(..., description='Author ID')
    id: conint(ge=1) = Field(..., description='Comment ID')
    real_offset: Optional[int] = Field(None, description='Real position of the comment')
    text: str = Field(..., description='Comment text')
    can_edit: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can edit the comment'
    )
    likes: Optional[BaseLikesInfo] = None


class WallWallpostFull(WallCarouselBase, WallWallpost):
    class Config:
        extra = Extra.forbid

    copy_history: Optional[List[WallWallpostFull]] = None
    can_edit: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can edit the post'
    )
    created_by: Optional[int] = Field(
        None, description='Post creator ID (if post still can be edited)'
    )
    can_delete: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can delete the post'
    )
    can_pin: Optional[BaseBoolInt] = Field(
        None, description='Information whether current user can pin the post'
    )
    donut: Optional[WallWallpostDonut] = None
    is_pinned: Optional[int] = Field(
        None, description='Information whether the post is pinned'
    )
    comments: Optional[BaseCommentsInfo] = None
    marked_as_ads: Optional[BaseBoolInt] = Field(
        None, description='Information whether the post is marked as ads'
    )
    topic_id: Optional[TopicId] = Field(
        None,
        description='Topic ID. Allowed values can be obtained from newsfeed.getPostTopics method',
    )
    short_text_rate: Optional[confloat(ge=0.0, le=1.0)] = Field(
        None, description='Preview length control parameter'
    )
    hash: Optional[str] = Field(None, description='Hash for sharing')


class NewsfeedItemDigestItem(BaseModel):
    __root__: WallWallpost


class NewsfeedItemWallpost(NewsfeedItemBase, WallWallpostFull):
    class Config:
        extra = Extra.forbid

    feedback: Optional[NewsfeedItemWallpostFeedback] = None


class NotificationsNotificationParent(
    WallWallpostToId,
    PhotosPhoto,
    BoardTopic,
    VideoVideo,
    NotificationsNotificationsComment,
):
    pass

    class Config:
        extra = Extra.forbid


class Response25(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[BoardTopicComment]
    poll: Optional[BoardTopicPoll] = None
    profiles: List[UsersUser]
    groups: List[GroupsGroup]


class BoardGetCommentsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response25


class Response26(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[BoardTopicComment]
    poll: Optional[BoardTopicPoll] = None


class BoardGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response26


class Response141(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[WallWallpostFull]] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    suggested_queries: Optional[List[str]] = None
    next_from: Optional[str] = None
    count: Optional[conint(ge=0)] = Field(None, description='Filtered number')
    total_count: Optional[conint(ge=0)] = Field(None, description='Total number')


class NewsfeedSearchExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response141


class Response142(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[WallWallpostFull]] = None
    suggested_queries: Optional[List[str]] = None
    next_from: Optional[str] = None
    count: Optional[conint(ge=0)] = Field(None, description='Filtered number')
    total_count: Optional[conint(ge=0)] = Field(None, description='Total number')


class NewsfeedSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response142


class Response208(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[WallWallpostFull]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class WallGetByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response208


class WallGetByIdLegacyResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: List[WallWallpostFull]


class Response209(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[WallWallpostFull]] = None


class WallGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response209


class Response214(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[WallWallpostFull]
    profiles: List[UsersUser]
    groups: List[GroupsGroup]


class WallGetRepostsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response214


class Response215(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallpostFull]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class WallGetExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response215


class Response216(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallpostFull]


class WallGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response216


class Response220(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallpostFull]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class WallSearchExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response220


class Response221(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallpostFull]


class WallSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response221


class FaveBookmark(BaseModel):
    class Config:
        extra = Extra.forbid

    added_date: conint(ge=0) = Field(
        ..., description='Timestamp, when this item was bookmarked'
    )
    link: Optional[BaseLink] = None
    post: Optional[WallWallpostFull] = None
    product: Optional[MarketMarketItem] = None
    seen: bool = Field(..., description='Has user seen this item')
    tags: List[FaveTag]
    type: FaveBookmarkType = Field(..., description='Item type')
    video: Optional[VideoVideo] = None


class NewsfeedItemDigest(NewsfeedItemBase):
    class Config:
        extra = Extra.forbid

    feed_id: Optional[str] = Field(None, description='id of feed in digest')
    items: Optional[List[NewsfeedItemDigestItem]] = None
    main_post_ids: Optional[List[str]] = None
    template: Optional[Template] = Field(None, description='type of digest')
    header: Optional[NewsfeedItemDigestHeader] = None
    footer: Optional[NewsfeedItemDigestFooter] = None
    track_code: Optional[str] = None


class NewsfeedNewsfeedItem(BaseModel):
    __root__: Union[
        NewsfeedItemWallpost,
        NewsfeedItemPhoto,
        NewsfeedItemPhotoTag,
        NewsfeedItemFriend,
        NewsfeedItemAudio,
        NewsfeedItemVideo,
        NewsfeedItemTopic,
        NewsfeedItemDigest,
        NewsfeedItemPromoButton,
    ]


class Response46(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[FaveBookmark]] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroup]] = None


class FaveGetExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response46


class Response47(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[FaveBookmark]] = None


class FaveGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response47


class Response133(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[NewsfeedNewsfeedItem]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]
    next_from: Optional[str] = Field(None, description='Next from value')


class NewsfeedGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response133


class Response137(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[NewsfeedNewsfeedItem]] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    next_from: Optional[str] = Field(None, description='Next from value')


class NewsfeedGetRecommendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response137


class Response139(BaseModel):
    class Config:
        extra = Extra.forbid

    items: Optional[List[NewsfeedNewsfeedItem]] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    next_from: Optional[str] = Field(None, description='New from value')


class NewsfeedGetResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response139


class CallbackMessageEdit(CallbackBase):
    class Config:
        extra = Extra.forbid

    type: Optional[CallbackType] = 'message_edit'
    object: MessagesMessage


class MessagesMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    action: Optional[MessagesMessageAction] = None
    admin_author_id: Optional[int] = Field(
        None,
        description='Only for messages from community. Contains user ID of community admin, who sent this message.',
    )
    attachments: Optional[List[MessagesMessageAttachment]] = None
    conversation_message_id: Optional[int] = Field(
        None,
        description='Unique auto-incremented number for all messages with this peer',
    )
    date: int = Field(
        ..., description='Date when the message has been sent in Unixtime'
    )
    deleted: Optional[BaseBoolInt] = Field(None, description='Is it an deleted message')
    from_id: int = Field(..., description="Message author's ID")
    fwd_messages: Optional[List[MessagesForeignMessage]] = Field(
        None, description='Forwarded messages'
    )
    geo: Optional[BaseGeo] = None
    id: int = Field(..., description='Message ID')
    important: Optional[bool] = Field(None, description='Is it an important message')
    is_hidden: Optional[bool] = None
    is_cropped: Optional[bool] = Field(
        None, description='this message is cropped for bot'
    )
    keyboard: Optional[MessagesKeyboard] = None
    members_count: Optional[int] = Field(None, description='Members number')
    out: BaseBoolInt = Field(
        ..., description='Information whether the message is outcoming'
    )
    payload: Optional[str] = None
    peer_id: int = Field(..., description='Peer ID')
    random_id: Optional[int] = Field(
        None,
        description='ID used for sending messages. It returned only for outgoing messages',
    )
    ref: Optional[str] = None
    ref_source: Optional[str] = None
    reply_message: Optional[MessagesForeignMessage] = None
    text: str = Field(..., description='Message text')
    update_time: Optional[int] = Field(
        None, description='Date when the message has been updated in Unixtime'
    )
    was_listened: Optional[bool] = Field(
        None, description='Was the audio message inside already listened by you'
    )
    pinned_at: Optional[int] = Field(
        None, description='Date when the message has been pinned in Unixtime'
    )
    is_silent: Optional[bool] = Field(
        None, description='Is silent message, push without sound'
    )


class CallbackMessageNew(CallbackBase):
    class Config:
        extra = Extra.forbid

    type: Optional[CallbackType] = 'message_new'
    object: CallbackMessageObject


class CallbackMessageObject(BaseModel):
    class Config:
        extra = Extra.forbid

    client_info: Optional[ClientInfoForBots] = None
    message: Optional[MessagesMessage] = None


class CallbackMessageReply(CallbackBase):
    class Config:
        extra = Extra.forbid

    type: Optional[CallbackType] = 'message_reply'
    object: MessagesMessage


class CommentThread(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Comments number')
    items: Optional[List[WallWallComment]] = None
    can_post: Optional[bool] = Field(
        None, description='Information whether current user can comment the post'
    )
    show_reply_button: Optional[bool] = Field(
        None, description='Information whether recommended to display reply button'
    )
    groups_can_post: Optional[bool] = Field(
        None, description='Information whether groups can comment the post'
    )


class WallWallComment(BaseModel):
    class Config:
        extra = Extra.forbid

    id: conint(ge=1) = Field(..., description='Comment ID')
    from_id: int = Field(..., description='Author ID')
    can_edit: Optional[BaseBoolInt] = None
    post_id: Optional[int] = None
    owner_id: Optional[int] = None
    parents_stack: Optional[List[int]] = None
    photo_id: Optional[int] = None
    video_id: Optional[int] = None
    date: conint(ge=0) = Field(
        ..., description='Date when the comment has been added in Unixtime'
    )
    text: str = Field(..., description='Comment text')
    attachments: Optional[List[WallCommentAttachment]] = None
    donut: Optional[WallWallCommentDonut] = None
    likes: Optional[BaseLikesInfo] = None
    real_offset: Optional[int] = Field(None, description='Real position of the comment')
    reply_to_user: Optional[int] = Field(None, description='Replied user ID')
    reply_to_comment: Optional[int] = Field(None, description='Replied comment ID')
    thread: Optional[CommentThread] = None
    deleted: Optional[bool] = None
    pid: Optional[conint(ge=0)] = Field(None, description='Photo ID')


class MessagesChatSettings(BaseModel):
    class Config:
        extra = Extra.forbid

    members_count: Optional[int] = None
    friends_count: Optional[int] = None
    owner_id: int
    title: str = Field(..., description='Chat title')
    pinned_message: Optional[MessagesPinnedMessage] = None
    state: MessagesChatSettingsState
    photo: Optional[MessagesChatSettingsPhoto] = None
    admin_ids: Optional[List[int]] = Field(None, description='Ids of chat admins')
    active_ids: List[int]
    is_group_channel: Optional[bool] = None
    acl: MessagesChatSettingsAcl
    permissions: Optional[MessagesChatSettingsPermissions] = None
    is_disappearing: Optional[bool] = None
    theme: Optional[str] = None
    disappearing_chat_link: Optional[str] = None
    is_service: Optional[bool] = None


class MessagesPinnedMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[MessagesMessageAttachment]] = None
    conversation_message_id: Optional[int] = Field(
        None,
        description='Unique auto-incremented number for all messages with this peer',
    )
    date: int = Field(
        ..., description='Date when the message has been sent in Unixtime'
    )
    from_id: int = Field(..., description="Message author's ID")
    fwd_messages: Optional[List[MessagesForeignMessage]] = Field(
        None, description='Forwarded messages'
    )
    geo: Optional[BaseGeo] = None
    id: int = Field(..., description='Message ID')
    peer_id: int = Field(..., description='Peer ID')
    reply_message: Optional[MessagesForeignMessage] = None
    text: str = Field(..., description='Message text')
    keyboard: Optional[MessagesKeyboard] = None


class MessagesMessageAttachment(BaseModel):
    class Config:
        extra = Extra.forbid

    audio: Optional[AudioAudio] = None
    audio_message: Optional[MessagesAudioMessage] = None
    call: Optional[CallsCall] = None
    doc: Optional[DocsDoc] = None
    gift: Optional[GiftsLayout] = None
    graffiti: Optional[MessagesGraffiti] = None
    link: Optional[BaseLink] = None
    market: Optional[MarketMarketItem] = None
    market_market_album: Optional[MarketMarketAlbum] = None
    photo: Optional[PhotosPhoto] = None
    sticker: Optional[BaseSticker] = None
    story: Optional[StoriesStory] = None
    type: MessagesMessageAttachmentType
    video: Optional[VideoVideo] = None
    wall: Optional[WallWallpostFull] = None
    wall_reply: Optional[WallWallComment] = None
    poll: Optional[PollsPoll] = None


class MessagesConversation(BaseModel):
    class Config:
        extra = Extra.forbid

    peer: MessagesConversationPeer
    sort_id: Optional[MessagesConversationSortId] = None
    last_message_id: conint(ge=0) = Field(
        ..., description='ID of the last message in conversation'
    )
    last_conversation_message_id: Optional[conint(ge=0)] = Field(
        None, description='Conversation message ID of the last message in conversation'
    )
    in_read: conint(ge=0) = Field(..., description='Last message user have read')
    out_read: conint(ge=0) = Field(
        ..., description='Last outcoming message have been read by the opponent'
    )
    unread_count: Optional[conint(ge=0)] = Field(
        None, description='Unread messages number'
    )
    is_marked_unread: Optional[bool] = Field(
        None, description='Is this conversation uread'
    )
    out_read_by: Optional[MessagesOutReadBy] = None
    important: Optional[bool] = None
    unanswered: Optional[bool] = None
    special_service_type: Optional[SpecialServiceType] = None
    message_request_data: Optional[MessagesMessageRequestData] = None
    mentions: Optional[List[int]] = Field(
        None, description='Ids of messages with mentions'
    )
    current_keyboard: Optional[MessagesKeyboard] = None
    push_settings: Optional[MessagesPushSettings] = None
    can_write: Optional[MessagesConversationCanWrite] = None
    chat_settings: Optional[MessagesChatSettings] = None


class MessagesConversationWithMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    conversation: MessagesConversation
    last_message: Optional[MessagesMessage] = None


class MessagesForeignMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    attachments: Optional[List[MessagesMessageAttachment]] = None
    conversation_message_id: Optional[int] = Field(
        None, description='Conversation message ID'
    )
    date: int = Field(..., description='Date when the message was created')
    from_id: int = Field(..., description="Message author's ID")
    fwd_messages: Optional[List[MessagesForeignMessage]] = None
    geo: Optional[BaseGeo] = None
    id: Optional[int] = Field(None, description='Message ID')
    peer_id: Optional[int] = Field(None, description='Peer ID')
    reply_message: Optional[MessagesForeignMessage] = None
    text: str = Field(..., description='Message text')
    update_time: Optional[int] = Field(
        None, description='Date when the message has been updated in Unixtime'
    )
    was_listened: Optional[bool] = Field(
        None, description='Was the audio message inside already listened by you'
    )
    payload: Optional[str] = Field(
        None,
        description='Additional data sent along with message for developer convenience',
    )


class MessagesGetConversationById(BaseModel):
    class Config:
        extra = Extra.forbid

    count: conint(ge=0) = Field(..., description='Total number')
    items: List[MessagesConversation]


class MessagesLongpollMessages(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = Field(None, description='Total number')
    items: Optional[List[MessagesMessage]] = None


class MessagesMessagesArray(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[conint(ge=0)] = None
    items: Optional[List[MessagesMessage]] = None


class Response99(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[WallWallComment]] = None


class MarketGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response99


class Response111(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]


class MessagesGetByConversationMessageIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response111


class Response112(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]
    profiles: List[UsersUserFull]
    groups: Optional[List[GroupsGroupFull]] = None


class MessagesGetByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response112


class Response113(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]


class MessagesGetByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response113


class MessagesGetConversationsByIdExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesGetConversationByIdExtended


class MessagesGetConversationsByIdResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesGetConversationById


class Response115(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    unread_count: Optional[int] = Field(None, description='Unread dialogs number')
    items: List[MessagesConversationWithMessage]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class MessagesGetConversationsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response115


class Response117(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    conversations: Optional[List[MessagesConversation]] = None


class MessagesGetHistoryExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response117


class Response118(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]


class MessagesGetHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response118


class Response119(BaseModel):
    class Config:
        extra = Extra.forbid

    messages: MessagesMessagesArray
    profiles: Optional[List[UsersUser]] = None
    groups: Optional[List[GroupsGroup]] = None
    conversations: Optional[List[MessagesConversation]] = None


class MessagesGetImportantMessagesExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response119


class Response120(BaseModel):
    class Config:
        extra = Extra.forbid

    messages: MessagesMessagesArray
    profiles: Optional[List[UsersUser]] = None
    groups: Optional[List[GroupsGroup]] = None
    conversations: Optional[List[MessagesConversation]] = None


class MessagesGetImportantMessagesResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response120


class Response123(BaseModel):
    class Config:
        extra = Extra.forbid

    history: Optional[List[List[int]]] = None
    messages: Optional[MessagesLongpollMessages] = None
    credentials: Optional[MessagesLongpollParams] = None
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    chats: Optional[List[MessagesChat]] = None
    new_pts: Optional[int] = Field(None, description='Persistence timestamp')
    from_pts: Optional[int] = None
    more: Optional[bool] = Field(None, description='Has more')
    conversations: Optional[List[MessagesConversation]] = None


class MessagesGetLongPollHistoryResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response123


class MessagesPinResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: MessagesPinnedMessage


class Response126(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total results number')
    items: List[MessagesConversation]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


class MessagesSearchConversationsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response126


class Response127(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total results number')
    items: List[MessagesConversation]


class MessagesSearchConversationsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response127


class Response128(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]
    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None
    conversations: Optional[List[MessagesConversation]] = None


class MessagesSearchExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response128


class Response129(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[MessagesMessage]


class MessagesSearchResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response129


class Response148(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    items: Optional[List[WallWallComment]] = None


class PhotosGetAllCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response148


class Response153(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    real_offset: Optional[conint(ge=0)] = Field(
        None, description='Real offset of the comments'
    )
    items: List[WallWallComment]
    profiles: List[UsersUserFull]
    groups: List[GroupsGroupFull]


class PhotosGetCommentsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response153


class Response154(BaseModel):
    class Config:
        extra = Extra.forbid

    count: Optional[int] = Field(None, description='Total number')
    real_offset: Optional[conint(ge=0)] = Field(
        None, description='Real offset of the comments'
    )
    items: Optional[List[WallWallComment]] = None


class PhotosGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response154


class Response200(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallComment]
    profiles: List[UsersUserMin]
    groups: List[GroupsGroupFull]


class VideoGetCommentsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response200


class Response201(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallComment]


class VideoGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response201


class Response210(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[WallWallComment]
    profiles: List[UsersUser]
    groups: List[GroupsGroup]


class WallGetCommentExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response210


class Response211(BaseModel):
    class Config:
        extra = Extra.forbid

    items: List[WallWallComment]


class WallGetCommentResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response211


class Response212(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallComment]
    profiles: List[UsersUser]
    groups: List[GroupsGroup]
    current_level_count: Optional[int] = Field(
        None, description='Count of replies of current level'
    )
    can_post: Optional[bool] = Field(
        None, description='Information whether current user can comment the post'
    )
    show_reply_button: Optional[bool] = None
    groups_can_post: Optional[bool] = Field(
        None, description='Information whether groups can comment the post'
    )


class WallGetCommentsExtendedResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response212


class Response213(BaseModel):
    class Config:
        extra = Extra.forbid

    count: int = Field(..., description='Total number')
    items: List[WallWallComment]
    current_level_count: Optional[int] = Field(
        None, description='Count of replies of current level'
    )
    can_post: Optional[bool] = Field(
        None, description='Information whether current user can comment the post'
    )
    show_reply_button: Optional[bool] = None
    groups_can_post: Optional[bool] = Field(
        None, description='Information whether groups can comment the post'
    )


class WallGetCommentsResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    response: Response213


class MessagesGetConversationByIdExtended(MessagesGetConversationById):
    class Config:
        extra = Extra.forbid

    profiles: Optional[List[UsersUserFull]] = None
    groups: Optional[List[GroupsGroupFull]] = None


MarketMarketCategoryNested.update_forward_refs()
MarketMarketCategoryTree.update_forward_refs()
StoriesStory.update_forward_refs()
NotificationsNotification.update_forward_refs()
StoriesFeedItem.update_forward_refs()
WallWallpostFull.update_forward_refs()
CallbackMessageEdit.update_forward_refs()
MessagesMessage.update_forward_refs()
CallbackMessageNew.update_forward_refs()
CommentThread.update_forward_refs()
MessagesChatSettings.update_forward_refs()
MessagesPinnedMessage.update_forward_refs()
MessagesGetConversationsByIdExtendedResponse.update_forward_refs()
